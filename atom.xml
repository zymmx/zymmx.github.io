<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木木夕</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zymmx.github.io/"/>
  <updated>2018-12-04T15:01:58.044Z</updated>
  <id>https://zymmx.github.io/</id>
  
  <author>
    <name>木木夕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mybatis详解</title>
    <link href="https://zymmx.github.io/2018/12/04/mybatis/"/>
    <id>https://zymmx.github.io/2018/12/04/mybatis/</id>
    <published>2018-12-04T15:01:58.044Z</published>
    <updated>2018-12-04T15:01:58.044Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h3 id="01-入门-根据id查询数据"><a href="#01-入门-根据id查询数据" class="headerlink" title="01-入门-根据id查询数据"></a>01-入门-根据id查询数据</h3><p><strong>一、什么是MyBatis（SQL Mapping Framework）</strong></p><ul><li>MyBatis是对JDBC的封装，</li><li>将SQL语句放在了映射文件中，</li><li>并且能够自动的将输入参数映射到SQL语句的动态参数上</li><li>能够将SQL语句执行的结果集自动的映射成Java对象</li></ul><p><strong>底层原理：</strong></p><p>利用dom4j对xml映射文件进行解析，利用java的反射机制以及动态代理模式生成动态的java类和代理对象，实现对jdbc的封装</p><p><strong>MyBatis的核心要素：</strong></p><p>1、映射文件（相当于原来的dao类，每个子节点相当于dao中的一个方法）</p><p>2、配置文件（配置数据库连接信息、事务和映射文件）</p><p><strong>二、MyBatis入门示例</strong></p><p><strong>1、java项目：引入jar包</strong></p><p>mybatis.jar包</p><p>jdbc包</p><p>log4j包</p><p>junit包</p><p><strong>2、maven项目：jar形式，pom.xml</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- 日志 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 单元测试 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mybatis --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.5&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- MySql --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.45&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>3、创建数据库表</strong> </p><p>执行 blog.sql（先创建库再执行）</p><p> <img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/6818ad79-7a28-4495-87fb-0ecf587082d4/index_files/94ccea5a-a2ae-4edc-8836-7e6ae0d93edd.jpg" alt="img">  </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543932919503.png" alt="1543932919503"></p><p><strong>4、创建实体类pojo</strong></p><p>Blog.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Blog &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String title;</span><br><span class="line">    private Integer authorId;</span><br><span class="line">    private String state;</span><br><span class="line">    private Boolean featured;</span><br><span class="line">    private String style;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、创建配置文件</strong></p><p>5.1、log4j.properties日志文件</p><p>5.2、db.properties数据库</p><p>5.3、mybatis-config.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;properties resource="db.properties"&gt;&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义类型别名 --&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!-- &lt;typeAlias type=<span class="string">"name.yaohuan.mybatis.pojo.Blog"</span> alias=<span class="string">"Blog"</span>/&gt; --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"name.yaohuan.mybatis.pojo"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 定义数据源 --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 定义映射文件 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!-- &lt;mapper resource=<span class="string">"name/yaohuan/mybatis/dao/BlogMapper.xml"</span>/&gt; --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"name.yaohuan.mybatis.dao"</span> /&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p><properties>数据库参数配置</properties></p><p><typealiases>类型别名：也可以批量定义别名</typealiases></p><p><environments>数据库环境配置，包含事务管理和数据库连接池配置</environments></p><p><mappers>包含映射文件列表：也可以批量定义映射文件</mappers></p><p>注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下；</p><p>5.4、BlogMapper.xml</p><p>namespace对应接口的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span><br><span class="line">&lt;mapper namespace=&quot;name.yaohuan.mybatis.dao.BlogMapper&quot; &gt;</span><br><span class="line">   </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>mapper：namespace属性定义完全名，相当于类的全名(包名+类名)</p><p>select：id属性定义了一个名为“selectBlog”的映射语句</p><p>使用 namespace + id 调用映射语句</p><p> 6、在映射文件中编写SQL </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- statment --&gt;</span><br><span class="line">    &lt;select id=&quot;selectBlogById&quot; parameterType=&quot;int&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">        SELECT * FROM blog WHERE id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>7、创建接口类和接口方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.yaohuan.mybatis.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> name.yaohuan.mybatis.pojo.Blog;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Blog <span class="title">selectBlogById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、写工具类MyBatisUtil.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.yaohuan.mybatis.utils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyBatisUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、单元测试 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.yaohuan.mybatis.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> name.yaohuan.mybatis.pojo.Blog;</span><br><span class="line"><span class="keyword">import</span> name.yaohuan.mybatis.utils.MyBatisUtil;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        </span><br><span class="line">        BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">        Blog blog = blogDao.selectBlogById(<span class="number">1</span>);</span><br><span class="line">        session.close();</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以不创建Mapper接口 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogNoInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    Blog blog = (Blog) session.selectOne(</span><br><span class="line">    <span class="string">"name.yaohuan.mybatis.dao.BlogMapper.selectBlogById"</span>, <span class="number">1</span>);</span><br><span class="line">    session.close();</span><br><span class="line">    System.out.println(blog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong> </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/6818ad79-7a28-4495-87fb-0ecf587082d4/index_files/0e03b9a4-9ff1-4530-acb5-b59d4bc15707.png" alt="img"></p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/6818ad79-7a28-4495-87fb-0ecf587082d4/index_files/a798b669-1729-4508-9cc8-ab076b1b50dc.png" alt="img"></p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/6818ad79-7a28-4495-87fb-0ecf587082d4/index_files/d8ee1dfc-fb57-498b-8bdb-32c1002e82dd.png" alt="img"></p><p> <img src="C:\Users\Administrator\AppData\Local\Temp\1543933172700.png" alt="1543933172700"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543933181281.png" alt="1543933181281"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543933189830.png" alt="1543933189830"></p><h3 id="02-数据库表的列名和实体类的属性名不一致的情况"><a href="#02-数据库表的列名和实体类的属性名不一致的情况" class="headerlink" title="02-数据库表的列名和实体类的属性名不一致的情况"></a>02-数据库表的列名和实体类的属性名不一致的情况</h3><p><strong>一、方案一</strong></p><p><strong>sql语句中定义别名</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用别名处理列名不一致 --&gt;</span><br><span class="line">   &lt;select id=<span class="string">"selectBlogById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">       SELECT </span><br><span class="line">       id,</span><br><span class="line">       title,</span><br><span class="line">       author_id AS authorId,</span><br><span class="line">       state,</span><br><span class="line">       featured,</span><br><span class="line">       style</span><br><span class="line">       FROM blog WHERE id = #&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>二、方案二</strong></p><p><strong>使用resultMap</strong></p><p>在resultMap中至少要定义一个主键列<id>，使用<result>定义其他列，</result></id></p><p>cloumn表示表中的列名，property表示实体类中的字段</p><p>jdbcType是可选的参数，mybatis可以自动识别，可以省略</p><p>mapper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=&quot;Blog&quot; id=&quot;blogResultMap&quot;&gt;</span><br><span class="line">      &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;</span><br><span class="line">      &lt;result column=&quot;author_id&quot; property=&quot;authorId&quot; /&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用resultMap处理列名不一致 --&gt;</span><br><span class="line">   &lt;select id=&quot;selectBlogById2&quot; parameterType=&quot;int&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">       SELECT *</span><br><span class="line">       FROM blog WHERE id = #&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blog selectBlogById2(Integer id);</span><br></pre></td></tr></table></figure><p>测试用例： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogById</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       </span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       Blog blog = blogDao.selectBlogById2(<span class="number">1</span>);</span><br><span class="line">       session.close();</span><br><span class="line">       System.out.println(blog);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="03-模糊查询和排序-和"><a href="#03-模糊查询和排序-和" class="headerlink" title="03-模糊查询和排序-# 和 $"></a>03-模糊查询和排序-# 和 $</h3><p>一、模糊查询</p><p><strong>需求：</strong>根据博客的名字查询博客列表（模糊查询）</p><p><strong>方式一：使用#传参</strong></p><p>mapper：</p><p><strong>注意：</strong>参数占位符名称任意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogByTitle&quot; parameterType=&quot;string&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">      select * from blog where title like #&#123;title&#125;</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogByTitle(String title);</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void testSelectBlogByTitle() &#123;</span><br><span class="line">      </span><br><span class="line">      SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">      </span><br><span class="line">      BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">      List&lt;Blog&gt; blogList = blogMapper.selectBlogByTitle(&quot;%o%&quot;);</span><br><span class="line">      </span><br><span class="line">      session.close();</span><br><span class="line">      </span><br><span class="line">      System.out.println(blogList);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：使用$传参</strong></p><p>mapper：</p><p><strong>注意：</strong>当时用$传参时，如果参数是单值类型（简单类型），并且只有一个参数，</p><p>那么参数必须使用 <strong>value</strong> 占位，并且如果参数是字符串，要使用引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogByTitle2&quot; parameterType=&quot;string&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">       select * from blog where title like &apos;%$&#123;value&#125;%&apos;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogByTitle2(String title);</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testSelectBlogByTitle2() &#123;</span><br><span class="line">        </span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        </span><br><span class="line">        BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">        //List&lt;Blog&gt; blogList = blogMapper.selectBlogByTitle2(&quot;%o%&quot;);</span><br><span class="line">        List&lt;Blog&gt; blogList = blogMapper.selectBlogByTitle2(&quot;o&quot;);</span><br><span class="line">        </span><br><span class="line">        session.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(blogList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>比较#和$的区别：</strong></p><ul><li>#是占位符？，$是字符串拼接。因此使用$的时候，如果参数是字符串类型，那么要使用引号</li><li>尽量使用# 而不是 $</li><li>当参数表示表名或列名的时候，只能使用 $</li></ul><p><strong>不区分大小写的查询：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogByTitle2&quot; parameterType=&quot;string&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">       select * from blog where lower(title) like lower(&apos;%$&#123;value&#125;%&apos;)</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>二、排序</p><p><strong>需求：</strong>按照某一列排序</p><p>注意：</p><p>1、如果使用#，那么sql不会报错，但是排序功能不好使；所以应该使用$</p><p>2、中文排序，需要使用mysql的转换函数 CONVERT</p><p>mapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogBySort&quot; parameterType=&quot;string&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">       select * from blog order by CONVERT($&#123;value&#125; USING gbk)</span><br><span class="line">       &lt;!-- select * from blog order by $&#123;value&#125; --&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogBySort(String column);</span><br></pre></td></tr></table></figure><p>测试 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testSelectBlogBySort() &#123;</span><br><span class="line">        </span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        </span><br><span class="line">        BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">        List&lt;Blog&gt; blogList = blogMapper.selectBlogBySort(&quot;title&quot;);</span><br><span class="line">        /*List&lt;Blog&gt; blogList = blogMapper.selectBlogBySort(&quot;CONVERT(title USING gbk)&quot;);*/</span><br><span class="line">        </span><br><span class="line">        session.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(blogList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="04-分页-多参数传递"><a href="#04-分页-多参数传递" class="headerlink" title="04-分页-多参数传递"></a>04-分页-多参数传递</h3><p><strong>需求：</strong>查询分页数据</p><p>一、方法一：使用索引</p><p>按照参数的顺序，从0开始</p><p>3.2版本：#{0}, #{1}</p><p>3.4版本：#{arg0}, #{arg1} 或 #{param1}, #{param2}</p><p>mapper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogByPage&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">       select * from blog limit #&#123;0&#125;, #&#123;1&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口：</p><p>参数名任意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogByPage(int offset, int pagesize);</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testSelectBlogByPage() &#123;</span><br><span class="line">        </span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        </span><br><span class="line">        BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">        List&lt;Blog&gt; blogList = blogMapper.selectBlogByPage(2, 2);</span><br><span class="line">        </span><br><span class="line">        session.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(blogList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>二、方法二：使用注解</strong></p><p>mapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogByPage2&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">       select * from blog limit #&#123;offset&#125;, #&#123;pagesize&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口：注解的value值要和mapper的占位参数一致 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogByPage2(</span><br><span class="line">            @Param(value=&quot;offset&quot;) int offset, </span><br><span class="line">            @Param(value=&quot;pagesize&quot;) int pagesize);</span><br></pre></td></tr></table></figure><p><strong>三、方法三：使用map</strong></p><p>mapper中的参数占位符要和测试中的map的key 一 一对应</p><p>mapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogByPage3&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">     select * from blog limit #&#123;offset&#125;, #&#123;pagesize&#125;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogByPage3(Map&lt;String, Object&gt; map);</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByPage3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       </span><br><span class="line">       BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">       </span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">       map.put(<span class="string">"offset"</span>, <span class="number">2</span>);</span><br><span class="line">       map.put(<span class="string">"pagesize"</span>, <span class="number">2</span>);</span><br><span class="line">       List&lt;Blog&gt; blogList = blogMapper.selectBlogByPage3(map);</span><br><span class="line">       </span><br><span class="line">       session.close();</span><br><span class="line">       </span><br><span class="line">       System.out.println(blogList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="05-插入-获取刚刚插入的id（自增id）"><a href="#05-插入-获取刚刚插入的id（自增id）" class="headerlink" title="05-插入-获取刚刚插入的id（自增id）"></a>05-插入-获取刚刚插入的id（自增id）</h3><p><strong>一、插入记录</strong></p><p>需求：新增一个博客记录</p><p>mapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertBlog&quot; parameterType=&quot;Blog&quot;&gt;</span><br><span class="line">       INSERT INTO `blog` (</span><br><span class="line">         `title`,</span><br><span class="line">         `author_id`,</span><br><span class="line">         `state`,</span><br><span class="line">         `featured`,</span><br><span class="line">         `style`</span><br><span class="line">       ) </span><br><span class="line">       VALUES</span><br><span class="line">         (</span><br><span class="line">           #&#123;title&#125;,</span><br><span class="line">           #&#123;authorId&#125;,</span><br><span class="line">           #&#123;state&#125;,</span><br><span class="line">           #&#123;featured&#125;,</span><br><span class="line">           #&#123;style&#125;</span><br><span class="line">         )</span><br><span class="line">   &lt;/insert&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int insertBlog(Blog blog);</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertBlog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setTitle(<span class="string">"我的blog"</span>);</span><br><span class="line">    blog.setState(<span class="string">"ACTIVE"</span>);</span><br><span class="line">    blog.setStyle(<span class="string">"pink"</span>);</span><br><span class="line">    blog.setFeatured(<span class="keyword">true</span>);</span><br><span class="line">    blog.setAuthorId(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> count = blogMapper.insertBlog(blog);</span><br><span class="line"></span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(blog);<span class="comment">//看看是否有id值（没值）</span></span><br><span class="line">    System.out.println(<span class="string">"插入了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、获取自增id</strong></p><p><strong>方式一：</strong>在mapper中配置 insert节点的属性 useGeneratedKeys=”true” keyProperty=”id”</p><p>mapper</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertBlog"</span> parameterType=<span class="string">"Blog"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span>&gt;</span><br><span class="line">      INSERT INTO `blog` (</span><br><span class="line">        `title`,</span><br><span class="line">        `author_id`,</span><br><span class="line">        `state`,</span><br><span class="line">        `featured`,</span><br><span class="line">        `style`</span><br><span class="line">      ) </span><br><span class="line">      VALUES</span><br><span class="line">        (</span><br><span class="line">          #&#123;title&#125;,</span><br><span class="line">          #&#123;authorId&#125;,</span><br><span class="line">          #&#123;state&#125;,</span><br><span class="line">          #&#123;featured&#125;,</span><br><span class="line">          #&#123;style&#125;</span><br><span class="line">        )</span><br><span class="line">  &lt;/insert&gt;</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>在全局配置文件中配置 settings选项 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">       &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">   &lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>并且在mapper的insert节点配置属性 keyProperty=”id”</p><p><strong>方式三：</strong>适用于没有自增主键的数据库（或者mysql中没有使用主键自增策略）</p><p>mysql版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertBlogMysql"</span> parameterType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">     &lt;selectKey resultType=<span class="string">"java.lang.Integer"</span> order=<span class="string">"AFTER"</span> keyProperty=<span class="string">"id"</span>&gt;</span><br><span class="line">         <span class="function">SELECT <span class="title">LAST_INSERT_ID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     &lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">     INSERT INTO `blog` <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">       `title`,</span></span></span><br><span class="line"><span class="function"><span class="params">       `author_id`,</span></span></span><br><span class="line"><span class="function"><span class="params">       `state`,</span></span></span><br><span class="line"><span class="function"><span class="params">       `featured`,</span></span></span><br><span class="line"><span class="function"><span class="params">       `style`</span></span></span><br><span class="line"><span class="function"><span class="params">     )</span> </span></span><br><span class="line"><span class="function">     VALUES</span></span><br><span class="line"><span class="function">       <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         #&#123;title&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">         #&#123;authorId&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">         #&#123;state&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">         #&#123;featured&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">         #&#123;style&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">       )</span>    </span></span><br><span class="line"><span class="function"> &lt;/insert&gt;</span></span><br></pre></td></tr></table></figure><p>oracle版本 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertBlogOracle"</span> parameterType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">    &lt;selectKey resultType=<span class="string">"java.lang.Integer"</span> order=<span class="string">"BEFORE"</span> keyProperty=<span class="string">"id"</span>&gt;</span><br><span class="line">        select seq.nextval as id from dual</span><br><span class="line">    &lt;/selectKey&gt;</span><br><span class="line">    INSERT INTO `blog` (</span><br><span class="line">      `title`,</span><br><span class="line">      `author_id`,</span><br><span class="line">      `state`,</span><br><span class="line">      `featured`,</span><br><span class="line">      `style`</span><br><span class="line">    ) </span><br><span class="line">    VALUES</span><br><span class="line">      (</span><br><span class="line">        #&#123;title&#125;,</span><br><span class="line">        #&#123;authorId&#125;,</span><br><span class="line">        #&#123;state&#125;,</span><br><span class="line">        #&#123;featured&#125;,</span><br><span class="line">        #&#123;style&#125;</span><br><span class="line">      )    </span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h3 id="06-修改"><a href="#06-修改" class="headerlink" title="06-修改"></a>06-修改</h3><p>mapper： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateBlog&quot; parameterType=&quot;Blog&quot;&gt;</span><br><span class="line">       UPDATE </span><br><span class="line">         blog</span><br><span class="line">       SET</span><br><span class="line">         title = #&#123;title&#125;,</span><br><span class="line">         author_id = #&#123;authorId&#125;,</span><br><span class="line">         state = #&#123;state&#125;,</span><br><span class="line">         featured = #&#123;featured&#125;,</span><br><span class="line">         style = #&#123;style&#125; </span><br><span class="line">       WHERE id = #&#123;id&#125; ;</span><br><span class="line">   &lt;/update&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int updateBlog(Blog blog);</span><br></pre></td></tr></table></figure><p>测试用例： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setId(<span class="number">27</span>);</span><br><span class="line">    blog.setAuthorId(<span class="number">2</span>);</span><br><span class="line">    blog.setState(<span class="string">"NOT ACTIVE"</span>);</span><br><span class="line">    blog.setFeatured(<span class="keyword">false</span>);</span><br><span class="line">    blog.setStyle(<span class="string">"blue"</span>);</span><br><span class="line">    blog.setTitle(<span class="string">"an's blog"</span>);</span><br><span class="line"></span><br><span class="line">    BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">    <span class="keyword">int</span> count = blogDao.updateBlog(blog);</span><br><span class="line"></span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"修改了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>修改时如果不想修改所有字段，那么可以用如下的方式</p><p>方法一、先查询记录，再在查询出来的记录上修改</p><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateBlog2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//查询</span></span><br><span class="line">       Blog blog = blogDao.selectBlogById(<span class="number">27</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//修改</span></span><br><span class="line">       blog.setId(<span class="number">27</span>);</span><br><span class="line">       blog.setAuthorId(<span class="number">2</span>);</span><br><span class="line">       blog.setTitle(<span class="string">"new blog"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> count = blogDao.updateBlog(blog);</span><br><span class="line">       </span><br><span class="line">       session.commit();</span><br><span class="line">       session.close();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"修改了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>方法二、动态SQL</p><p>参考后面的动态SQL</p><h3 id="07-删除"><a href="#07-删除" class="headerlink" title="07-删除"></a>07-删除</h3><p><strong>一、删除</strong></p><p>注意：关联表级联删除的问题会报告如下错误 </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/8e66c401-11e6-4050-a1bb-06d3f72a845d/index_files/765ca244-a131-4dde-adf2-b35b6f54c8ac.jpg" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543933977271.png" alt="1543933977271"></p><p>解决方案1：先删除子记录，再删除父记录</p><p>解决方案2：在数据库的外键中设置级联删除</p><p>mapper： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=&quot;deleteBlogById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        DELETE FROM blog WHERE id = #&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int deleteBlogById(Integer id);</span><br></pre></td></tr></table></figure><p>测试用例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"> public void testDeleteBlogById()&#123;</span><br><span class="line">     </span><br><span class="line">     SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">     BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     int count = blogDao.deleteBlogById(27);</span><br><span class="line">     </span><br><span class="line">     session.commit();</span><br><span class="line">     session.close();</span><br><span class="line">     </span><br><span class="line">     System.out.println(&quot;删除了&quot; + count + &quot;条记录&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>二、批量删除</p><p>参考后面的动态SQL</p><h3 id="08-动态SQL-if"><a href="#08-动态SQL-if" class="headerlink" title="08-动态SQL-if"></a>08-动态SQL-if</h3><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/d57d9000-02d2-4918-b25f-cca923c086a4/index_files/2b6fe212-c414-494d-8b86-1ffe32d8eb6f.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543934048720.png" alt="1543934048720"></p><p><strong>案例一</strong></p><p><strong>需求：</strong></p><p>1、按博客的名字模糊查询已激活的博客</p><p>2、如果用户没有输入任何查询字符串，那么查询所有已激活的blog</p><p><strong>分析：</strong></p><p>– 用户输入了查询字符串</p><p>SELECT * FROM blog </p><p>WHERE state = ‘ACTIVE’ </p><p>AND title LIKE ‘%a%’</p><p>– 用户没有输入查询字符串</p><p>SELECT * FROM blog </p><p>WHERE state = ‘ACTIVE’</p><p>注意：</p><p>1、参数类型如果是多值对象，如Blog类型，那么if语句中的test属性判断使用Blog的属性名</p><p>2、参数类型如果是简单类型，如String类型，那么if语句中的test属性判断使用value关键字</p><p>如果使用简单类型（string），那么test中无法判断 空字符串””（不要写value != ‘’ 判断不出来，有坑）</p><p>如果使用$ 那么 传值应该使用 ${value}， if中判断也应该使用 value 关键字</p><p>如果使用# 那么 传值应该使用 #{任意名}， if中判断还是使用 value 关键字</p><p><strong>因此：最好使用对象传参</strong></p><p><strong>传递单值参数</strong></p><p>mapper： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectActiveBlogByTitle&quot; parameterType=&quot;string&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">     SELECT * FROM blog </span><br><span class="line">     WHERE state = &apos;ACTIVE&apos; </span><br><span class="line">     &lt;if test=&quot;value != null and value != &apos;&apos;&quot;&gt;</span><br><span class="line">         AND title LIKE &apos;%$&#123;value&#125;%&apos;</span><br><span class="line">     &lt;/if&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectActiveBlogByTitle(String title);</span><br></pre></td></tr></table></figure><p>测试用例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testSelectActiveBlogByTitle()&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       </span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       //List&lt;Blog&gt; blogList = blogDao.selectActiveBlogByTitle(&quot;o&quot;);</span><br><span class="line">       //List&lt;Blog&gt; blogList = blogDao.selectActiveBlogByTitle(&quot;&quot;);</span><br><span class="line">       List&lt;Blog&gt; blogList = blogDao.selectActiveBlogByTitle(null);</span><br><span class="line">       </span><br><span class="line">       session.close();</span><br><span class="line">       </span><br><span class="line">       System.out.println(blogList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>案例二</p><p><strong>需求：</strong></p><p>1、查询已激活的，并且根据blog的名字和是否推荐来查询</p><p>2、如果用户没有输入任何查询条件，那么查询所有已激活的blog</p><p><strong>分析：</strong></p><p>– 用户输入了查询条件</p><p>SELECT * FROM blog </p><p>WHERE state = ‘ACTIVE’ </p><p>AND title LIKE ‘%a%’</p><p>AND featured = TRUE</p><p>– 用户没有输入查询条件</p><p>SELECT * FROM blog </p><p>WHERE state = ‘ACTIVE’</p><p><strong>注意：</strong>要修改pojo中Blog的featured的数据类型是Boolean</p><p><strong>方案：</strong>传递多值对象参数</p><p>mapper：</p><p>映射文件中可以使用参数Blog中的属性的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectActiveBlogByTitleAndFeatured&quot; parameterType=&quot;Blog&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">    SELECT * FROM blog </span><br><span class="line">    WHERE state = &apos;ACTIVE&apos; </span><br><span class="line">    &lt;if test=&quot;title != null and title != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND title LIKE &apos;%$&#123;title&#125;%&apos;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;featured != null&quot;&gt;</span><br><span class="line">        AND featured = #&#123;featured&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectActiveBlogByTitleAndFeatured(Blog blog);</span><br></pre></td></tr></table></figure><p>测试用例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testSelectActiveBlogByTitleAndFeatured()&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       </span><br><span class="line">       Blog blog = new Blog();</span><br><span class="line">       blog.setTitle(&quot;树&quot;);</span><br><span class="line">       blog.setFeatured(true);</span><br><span class="line">       </span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       List&lt;Blog&gt; blogList = blogDao.selectActiveBlogByTitleAndFeatured(blog);</span><br><span class="line">       </span><br><span class="line">       session.close();</span><br><span class="line">       </span><br><span class="line">       System.out.println(blogList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>补充：</strong>忽略大小写的查询，使用LOWER或UPPER </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AND LOWER(title) LIKE LOWER(&apos;%$&#123;title&#125;%&apos;)</span><br></pre></td></tr></table></figure><h3 id="09-动态SQL-choose、when、otherwise"><a href="#09-动态SQL-choose、when、otherwise" class="headerlink" title="09-动态SQL-choose、when、otherwise"></a>09-动态SQL-choose、when、otherwise</h3><p>choose：在when和otherwise中选择</p><p>when：必须的，一个或多个</p><p>otherwise：可选的，一个或零个</p><p><strong>需求：</strong></p><p>1、查询已激活的</p><p>2、如果用户输入了blog的查询关键字，</p><p>3、则根据关键字查询，否则根据blog的风格样式查询，</p><p>4、否则给用户显示推荐的blog</p><p><strong>分析：</strong></p><p>2、3、4条件互斥</p><p><strong>方案：</strong></p><p>mapper：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectActiveBlogByTitleOrStyle"</span> parameterType=<span class="string">"Blog"</span> resultMap=<span class="string">"blogResultMap"</span>&gt;</span><br><span class="line">       SELECT * FROM blog </span><br><span class="line">       WHERE state = <span class="string">'ACTIVE'</span> </span><br><span class="line">       &lt;choose&gt;</span><br><span class="line">           &lt;when test=<span class="string">"title != null and title != ''"</span>&gt;</span><br><span class="line">               <span class="function">AND <span class="title">LOWER</span><span class="params">(title)</span> LIKE <span class="title">LOWER</span><span class="params">(<span class="string">'%$&#123;title&#125;%'</span>)</span></span></span><br><span class="line"><span class="function">           &lt;/when&gt;</span></span><br><span class="line"><span class="function">           &lt;when test</span>=<span class="string">"style != null"</span>&gt;</span><br><span class="line">               AND style = #&#123;style&#125;</span><br><span class="line">           &lt;/when&gt;</span><br><span class="line">           &lt;otherwise&gt;</span><br><span class="line">               AND featured = <span class="keyword">true</span></span><br><span class="line">           &lt;/otherwise&gt;</span><br><span class="line">       &lt;/choose&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectActiveBlogByTitleOrStyle(Blog blog);</span><br></pre></td></tr></table></figure><p>测试用例： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectActiveBlogByTitleOrStyle</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">      SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">      </span><br><span class="line">      Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">      <span class="comment">//blog.setTitle("O");</span></span><br><span class="line">      <span class="comment">//blog.setStyle("red");</span></span><br><span class="line">      </span><br><span class="line">      BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">      List&lt;Blog&gt; blogList = blogDao.selectActiveBlogByTitleOrStyle(blog);</span><br><span class="line">      </span><br><span class="line">      session.close();</span><br><span class="line">      </span><br><span class="line">      System.out.println(blogList);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="10-动态SQL-where"><a href="#10-动态SQL-where" class="headerlink" title="10-动态SQL-where"></a>10-动态SQL-where</h3><p><strong>需求：</strong></p><p>多条件查询：状态、标题、是否推荐</p><p><where>会自动去掉查询条件中多余的第一个逻辑符号，如 and、or</where></p><p>mapper：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectBlog"</span> parameterType=<span class="string">"Blog"</span> resultMap=<span class="string">"blogResultMap"</span>&gt;</span><br><span class="line">       SELECT * FROM blog</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"state != null and state != ''"</span>&gt;</span><br><span class="line">               state = #&#123;state&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"title != null and title != ''"</span>&gt;</span><br><span class="line">               <span class="function">AND <span class="title">LOWER</span><span class="params">(title)</span> LIKE <span class="title">LOWER</span><span class="params">(<span class="string">'%$&#123;title&#125;%'</span>)</span></span></span><br><span class="line"><span class="function">           &lt;/<span class="keyword">if</span>&gt;</span></span><br><span class="line"><span class="function">           &lt;<span class="keyword">if</span> test</span>=<span class="string">"featured != null"</span>&gt;</span><br><span class="line">               AND featured = #&#123;featured&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlog(Blog blog);</span><br></pre></td></tr></table></figure><p>测试用例：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void testSelectBlog()&#123;</span><br><span class="line">      </span><br><span class="line">      SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">      </span><br><span class="line">      Blog blog = new Blog();</span><br><span class="line">      blog.setState(&quot;ACTIVE&quot;);</span><br><span class="line">      blog.setTitle(&quot;O&quot;);</span><br><span class="line">      blog.setFeatured(false);</span><br><span class="line">      </span><br><span class="line">      BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">      List&lt;Blog&gt; blogList = blogDao.selectBlog(blog);</span><br><span class="line">      </span><br><span class="line">      session.close();</span><br><span class="line">      </span><br><span class="line">      System.out.println(blogList);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="11-动态SQL-set"><a href="#11-动态SQL-set" class="headerlink" title="11-动态SQL-set"></a>11-动态SQL-set</h3><p><strong>需求：</strong></p><p>按需修改：修改指定的列，未指定的不修改</p><p><set>会自动去掉update语句的set子句中多余的最后一个逗号</set></p><p>mapper：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateBlogIfNecessary"</span> parameterType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">      UPDATE blog</span><br><span class="line">      &lt;set&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"title != null and title != ''"</span>&gt;</span><br><span class="line">              title = #&#123;title&#125;,</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"authorId != null"</span>&gt;</span><br><span class="line">              author_id = #&#123;authorId&#125;,</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"state != null and state != ''"</span>&gt;</span><br><span class="line">              state = #&#123;state&#125;,</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"featured != null"</span>&gt;</span><br><span class="line">              featured = #&#123;featured&#125;,</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"style != null and style != ''"</span>&gt;</span><br><span class="line">              state = #&#123;state&#125;</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">      &lt;/set&gt;</span><br><span class="line">      WHERE id = #&#123;id&#125;</span><br><span class="line">  &lt;/update&gt;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int updateBlogIfNecessary(Blog blog);</span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateBlogIfNecessary</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">      SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">      BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">      </span><br><span class="line">      Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">      blog.setId(<span class="number">3</span>);</span><br><span class="line">      blog.setTitle(<span class="string">"new title"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">int</span> count = blogDao.updateBlogIfNecessary(blog);</span><br><span class="line">      </span><br><span class="line">      session.commit();</span><br><span class="line">      session.close();</span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">"修改了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="12-动态SQL-trim"><a href="#12-动态SQL-trim" class="headerlink" title="12-动态SQL-trim"></a>12-动态SQL-trim</h3><p>trim可以实现set和where的功能</p><p>一、trim实现where的功能</p><p>mapper：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectBlogTrim"</span> parameterType=<span class="string">"Blog"</span> resultMap=<span class="string">"blogResultMap"</span>&gt;</span><br><span class="line">       SELECT * FROM blog</span><br><span class="line">       &lt;trim prefix=<span class="string">"WHERE"</span> prefixOverrides=<span class="string">"AND | OR"</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"state != null and state != ''"</span>&gt;</span><br><span class="line">              state = #&#123;state&#125;</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"title != null and title != ''"</span>&gt;</span><br><span class="line">              <span class="function">AND <span class="title">LOWER</span><span class="params">(title)</span> LIKE <span class="title">LOWER</span><span class="params">(<span class="string">'%$&#123;title&#125;%'</span>)</span></span></span><br><span class="line"><span class="function">          &lt;/<span class="keyword">if</span>&gt;</span></span><br><span class="line"><span class="function">          &lt;<span class="keyword">if</span> test</span>=<span class="string">"featured != null"</span>&gt;</span><br><span class="line">              AND featured = #&#123;featured&#125;</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">      &lt;/trim&gt;</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogTrim(Blog blog);</span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogTrim</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       </span><br><span class="line">       Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">       blog.setState(<span class="string">"ACTIVE"</span>);</span><br><span class="line">       blog.setTitle(<span class="string">"O"</span>);</span><br><span class="line">       blog.setFeatured(<span class="keyword">false</span>);</span><br><span class="line">       </span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       List&lt;Blog&gt; blogList = blogDao.selectBlogTrim(blog);</span><br><span class="line">       </span><br><span class="line">       session.close();</span><br><span class="line">       </span><br><span class="line">       System.out.println(blogList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>二、trim实现set的功能</p><p>mapper：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateBlogIfNecessaryTrim"</span> parameterType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">        UPDATE blog</span><br><span class="line">        &lt;trim prefix=<span class="string">"SET"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"title != null and title != ''"</span>&gt;</span><br><span class="line">                title = #&#123;title&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"authorId != null"</span>&gt;</span><br><span class="line">                author_id = #&#123;authorId&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"state != null and state != ''"</span>&gt;</span><br><span class="line">                state = #&#123;state&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"featured != null"</span>&gt;</span><br><span class="line">                featured = #&#123;featured&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"style != null and style != ''"</span>&gt;</span><br><span class="line">                state = #&#123;state&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/trim&gt;</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">      &lt;/update&gt;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int updateBlogIfNecessaryTrim(Blog blog);</span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testUpdateBlogIfNecessaryTrim()&#123;</span><br><span class="line">    </span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">    </span><br><span class="line">    Blog blog = new Blog();</span><br><span class="line">    blog.setId(3);</span><br><span class="line">    blog.setTitle(&quot;new title&quot;);</span><br><span class="line">    </span><br><span class="line">    int count = blogDao.updateBlogIfNecessaryTrim(blog);</span><br><span class="line">    </span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    </span><br><span class="line">    System.out.println(&quot;修改了&quot; + count + &quot;条记录&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-动态SQL-foreach"><a href="#13-动态SQL-foreach" class="headerlink" title="13-动态SQL-foreach"></a>13-动态SQL-foreach</h3><p>需求：实现批量删除</p><p>向sql传递数组或List时，mybatis使用foreach解析数组里的参数并拼接到SQL中。</p><p>mapper：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=&quot;deleteBlogList&quot; parameterType=&quot;list&quot;&gt;</span><br><span class="line">     DELETE FROM blog WHERE id IN</span><br><span class="line">     &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">         #&#123;item&#125;</span><br><span class="line">     &lt;/foreach&gt;</span><br><span class="line"> &lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int deleteBlogList(List&lt;Integer&gt; idList);</span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 批量删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBlogList</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">      SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">      BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">      </span><br><span class="line">      List&lt;Integer&gt; idList = Arrays.asList(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">      <span class="keyword">int</span> count = blogDao.deleteBlogList(idList);</span><br><span class="line">      </span><br><span class="line">      session.commit();</span><br><span class="line">      session.close();</span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">"删除了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/5510f16b-e4a8-402d-9634-75d865e90afe/index_files/143037078.jpg" alt="img"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543934524583.png" alt="1543934524583"></p><h3 id="14-动态SQL-SQL片段"><a href="#14-动态SQL-SQL片段" class="headerlink" title="14-动态SQL-SQL片段"></a>14-动态SQL-SQL片段</h3><p>Mybatis提供了SQL片段的功能，可以提高SQL的可重用性</p><p>定义片段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义列名片段 --&gt;</span><br><span class="line">&lt;sql id=<span class="string">"columnBase"</span>&gt;</span><br><span class="line">    id,</span><br><span class="line">    title,</span><br><span class="line">    author_id AS authorId,</span><br><span class="line">    state,</span><br><span class="line">    featured,</span><br><span class="line">    style</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure><p>使用片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogById&quot; parameterType=&quot;int&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">     SELECT</span><br><span class="line">     &lt;include refid=&quot;columnBase&quot;&gt;&lt;/include&gt;</span><br><span class="line">     FROM blog WHERE id = #&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="15-性能-一级缓存"><a href="#15-性能-一级缓存" class="headerlink" title="15-性能-一级缓存"></a>15-性能-一级缓存</h3><p>一级缓存就是session级别的缓存，一级缓存默认存在 </p><p>一、测试一：</p><p><strong>下面的测试说明</strong>：两次查询，第一次查询结果从数据库查询，缓存到sqlsession缓存区域，第二次查询直接返回，不查询数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 一级缓存测试1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheLevelOne1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">      BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第一次查询执行sql语句</span></span><br><span class="line">      Blog blog1 = blogDao.selectBlogById(<span class="number">1</span>);</span><br><span class="line">      System.out.println(<span class="string">"查询结果"</span>);</span><br><span class="line">      <span class="comment">//第二次查询不执行sql语句，直接从缓存中读取数据</span></span><br><span class="line">      Blog blog2 = blogDao.selectBlogById(<span class="number">1</span>);</span><br><span class="line">      System.out.println(<span class="string">"查询结果"</span>);</span><br><span class="line">      session.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>二、测试二：</p><p>在第一个测试用例的基础上增加中间黄色的部分</p><p><strong>下面的测试说明：</strong>如果两次查询之间，有增加、删除、修改操作并其提交，sqlsession缓存区域会自动清空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 一级缓存测试2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheLevelOne2</span><span class="params">()</span></span>&#123;</span><br><span class="line">     SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">     BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//第一次查询执行sql语句</span></span><br><span class="line">     Blog blog1 = blogDao.selectBlogById(<span class="number">1</span>);</span><br><span class="line">     System.out.println(<span class="string">"查询结果"</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//如果有insert、update和delete，则会清空缓存空间</span></span><br><span class="line">     blog1.setFeatured(<span class="keyword">true</span>);</span><br><span class="line">     blogDao.updateBlog(blog1);</span><br><span class="line">     System.out.println(<span class="string">"更新"</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//第二次查询重新执行sql语句</span></span><br><span class="line">     Blog blog2 = blogDao.selectBlogById(<span class="number">1</span>);</span><br><span class="line">     System.out.println(<span class="string">"查询结果"</span>);</span><br><span class="line">     session.commit();</span><br><span class="line">     session.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="16-性能-二级缓存"><a href="#16-性能-二级缓存" class="headerlink" title="16-性能-二级缓存"></a>16-性能-二级缓存</h3><p><strong>一、测试：</strong></p><p><strong>跨</strong>seesion范围，默认情况下，不配置二级缓存，会执行两次数据库的sql查询</p><p>注意：这个例子中创建了两个session对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二级缓存测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheLevelTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一次查询执行sql语句</span></span><br><span class="line">    SqlSession session1 = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper blogDao1 = session1.getMapper(BlogMapper.class);</span><br><span class="line">    Blog blog1 = blogDao1.selectBlogById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"查询结果"</span>); </span><br><span class="line">    session1.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不开启二级缓存时：第二次查询 执行sql语句</span></span><br><span class="line">    SqlSession session2 = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper blogDao2 = session2.getMapper(BlogMapper.class);  </span><br><span class="line">    Blog blog2 = blogDao2.selectBlogById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"查询结果"</span>);</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、启用二级缓存：</strong></p><p>1、在对应的表的mapper映射文件中添加一行 <cache>  </cache></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;name.yaohuan.mybatis.dao.BlogMapper&quot;&gt;</span><br><span class="line">    &lt;!-- 开启二级缓存 --&gt;</span><br><span class="line">    &lt;cache /&gt;</span><br></pre></td></tr></table></figure><p>2、对应的实体类必须是可以序列化的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class Blog implements Serializable&#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br></pre></td></tr></table></figure><p><strong>重新执行上面的测试用例</strong></p><p>一旦看到Cache Hit Ratio 命中率，说明二级缓存开启成功，查到次数/查询次数=0.0</p><p>第二次查询，直接从缓存读取数据，命中率： 1/2=0.5</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/c88cb900-0577-4bed-bbb7-3d6acd9d568b/index_files/b914175c-63ed-4b88-b448-76d07086af13.png" alt="img"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543934749739.png" alt="1543934749739"></p><p><strong>这个简单语句的效果如下：</strong></p><p>映射语句文件中的所有select语句将会被缓存。</p><p>和一级缓存一样，所有insert，update和delete语句会刷新缓存。</p><p>例如：在第一次session关闭前加入update语句会清空缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog1.setFeatured(true);</span><br><span class="line">     blogDao1.updateBlog(blog1);</span><br><span class="line">     System.out.println(&quot;更新&quot;);</span><br><span class="line">     session1.commit();</span><br></pre></td></tr></table></figure><p>对于映射文件的select：</p><p>useCache属性</p><p>将其设置为true，将会导致本条语句的结果被缓存。默认值：true。</p><p>如果设置成false，可以阻止二级缓存的产生，但不能阻止一级缓存的产生。</p><p>对于映射文件的select、insert、update、delete：</p><p>flushCache属性</p><p>将其设置为true，无论语句什么时候被调用，都会导致缓存被清空。</p><p>可以清空一级缓存和二级缓存</p><p><strong>其他：</strong></p><p><strong>配置<cache>属性：</cache></strong></p><p>所有的这些属性都可以通过缓存元素的属性来修改。比如：</p><cache eviction="FIFO" flushinterval="60000" size="512" readonly="true"><p>这个更高级的配置创建了一个FIFO缓存，并每隔60秒刷新，存数结果对象或列表的512个引用，而且返回的对象被认为是只读的，因此在不同线程中的调用者之间修改它们会导致冲突。</p><p>可用的收回策略有：</p><p>. LRU – 最近最少使用的：移除最长时间不被使用的对象。</p><p>. FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</p><p>. SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p><p>. WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p><p>默认的是LRU。</p><p>flushInterval（刷新间隔）可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。</p><p>size（引用数目）可以被设置为任意正整数，要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值是1024。</p><p>readOnly（只读）属性可以被设置为true或false。只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p><p><strong>全局配置：</strong></p><p>注意：cacheEnabled 默认就是开启的，设置为false则全局范围内关闭二级缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 全局设置 --&gt;</span><br><span class="line">  &lt;settings&gt;</span><br><span class="line">      &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">      ......</span><br><span class="line">  &lt;/settings&gt;</span><br></pre></td></tr></table></figure><p><strong>三、应用场景：</strong></p><p>对于访问响应速度要求高，但是实时性不高的查询，可以采用二级缓存技术。</p><p>注意：在使用二级缓存的时候，要设置一下刷新间隔（cache标签中有一个flashInterval属性）来定时刷新二级缓存，这个刷新间隔根据具体需求来设置，比如设置30分钟、60分钟等，单位为毫秒</p><p><strong>四、局限性：</strong></p><p>Mybatis二级缓存对细粒度的数据，缓存实现不好。</p><p>场景：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次查询都是最新的商品信息，此时如果使用二级缓存，就无法实现当一个商品发生变化只刷新该商品的缓存信息而不刷新其他商品缓存信息，因为二级缓存是mapper级别的，当一个商品的信息发送更新，所有的商品信息缓存数据都会清空。</p><p>解决此类问题，需要在业务层根据需要对数据有针对性的缓存。</p><p>比如可以对经常变化的 数据操作单独放到另一个namespace的mapper中。</p><h3 id="17-性能-整合ehcache"><a href="#17-性能-整合ehcache" class="headerlink" title="17-性能-整合ehcache"></a>17-性能-整合ehcache</h3><p> 一、什么是ehcache</p><p>Mybatis本身是一个持久层框架，它不是专门的缓存框架，所以它对缓存的实现不够好，不能支持分布式。</p><p>Ehcache是一个分布式的缓存框架。</p><p> <img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/709d1e27-27fc-485f-93f4-e3658ea6ecb2/index_files/e1954a34-f261-4505-8208-c75c991f237a.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543934834811.png" alt="1543934834811"></p><p><strong>二、整合思路</strong></p><p>Cache是一个接口，它的默认实现是mybatis的PerpetualCache。如果想整合mybatis的二级缓存，那么实现Cache接口即可。</p><p><strong>三、整合步骤</strong></p><p><strong>1、添加jar包：</strong></p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/709d1e27-27fc-485f-93f4-e3658ea6ecb2/index_files/f72bc8d4-611c-4118-8e1a-f0743a09d1f3.png" alt="img"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543934851485.png" alt="1543934851485"></p><p><strong>2、设置映射文件中cache标签的type值为ehcache的实现类：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第三方二级缓存框架 --&gt;</span><br><span class="line">  &lt;!-- type: 二级缓存的实现类，默认实现类是 org.apache.ibatis.cache.implPerpetualCache--&gt;</span><br><span class="line">  &lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>3、添加ehcache的配置文件：</strong></p><p>在配置文件目录下创建ehcache.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 缓存数据要存放的磁盘地址 --&gt;</span><br><span class="line">&lt;diskStore path=&quot;D:\ehcache&quot; /&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">diskStore：指定数据在磁盘中的存储位置。 </span><br><span class="line">defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略 </span><br><span class="line">以下属性是必须的： </span><br><span class="line">    maxElementsInMemory - 在内存中缓存的element的最大数目 </span><br><span class="line">    maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大 </span><br><span class="line">    eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断 </span><br><span class="line">           overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上 </span><br><span class="line">以下属性是可选的： </span><br><span class="line">    timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，</span><br><span class="line">    默认值是0,也就是可闲置时间无穷大 </span><br><span class="line">    timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大 </span><br><span class="line">    diskSpoolBufferSizeMB - 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区. </span><br><span class="line">    diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。 </span><br><span class="line">    diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作 </span><br><span class="line">    memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。</span><br><span class="line">    默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出） </span><br><span class="line">--&gt;</span><br><span class="line">&lt;defaultCache </span><br><span class="line">maxElementsInMemory=&quot;1000&quot;</span><br><span class="line">maxElementsOnDisk=&quot;10000000&quot; </span><br><span class="line">eternal=&quot;false&quot; </span><br><span class="line">overflowToDisk=&quot;false&quot;</span><br><span class="line">timeToIdleSeconds=&quot;120&quot; </span><br><span class="line">timeToLiveSeconds=&quot;120&quot;</span><br><span class="line">diskExpiryThreadIntervalSeconds=&quot;120&quot; </span><br><span class="line">memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class="line">&lt;/defaultCache&gt;</span><br></pre></td></tr></table></figure><p><strong>4、测试：</strong></p><p>参考上一节的测试方式</p><h3 id="18-高级结果映射-嵌套查询-关联映射"><a href="#18-高级结果映射-嵌套查询-关联映射" class="headerlink" title="18-高级结果映射-嵌套查询-关联映射"></a>18-高级结果映射-嵌套查询-关联映射</h3><p>项目：mybatis<strong>02relation</strong></p><p><strong>把pojo拷贝过来，重新创建映射文件</strong></p><p><strong>需求：</strong>查询博客信息，同时查询作者信息：Blog和Author是一对一的关系</p><p>注意：如果有相互引用，则打印输出的时候会出现栈内存溢出的异常，可以将一方的关联配置配置到返回值是 resultType 的 statement 中</p><p>关联映射（适用于一对一和多对一）</p><p>pojo：在Blog类中设计author属性，用来替换authorId</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Blog &#123;</span><br><span class="line">    /*private Integer authorId;*/</span><br><span class="line">    private Author author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pojo：Author </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.mybatis.pojo;</span><br><span class="line">public class Author &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String email;</span><br><span class="line">    private String bio;</span><br><span class="line">    private String favouriteSection;</span><br><span class="line">    private String nickname;</span><br><span class="line">    private String realname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>blog的mapper：</p><p><strong>说明：</strong></p><p>1、property对应实体类中的属性</p><p>2、column对应数据库中的外键字段</p><p>3、javaType表示实体类中属性的类型，在这里不是必须的属性</p><p>4、select表示通过column字段进一步查询需要的sql语句，column的值作为参数传递给这个sql语句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"Blog"</span> id=<span class="string">"blogResultMap"</span>&gt;</span><br><span class="line">      &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span> jdbcType=<span class="string">"INTEGER"</span> /&gt;</span><br><span class="line">      &lt;association property=<span class="string">"author"</span> column=<span class="string">"author_id"</span> javaType=<span class="string">"Author"</span></span><br><span class="line">      select="name.yaohuan.mybatis.dao.AuthorMapper.selectAuthorById"&gt;&lt;/association&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">  &lt;select id=<span class="string">"selectBlogById"</span> parameterType=<span class="string">"int"</span> resultMap=<span class="string">"blogResultMap"</span>&gt;</span><br><span class="line">      SELECT * FROM blog WHERE id = #&#123;id&#125;</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>author的mapper： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"name.yaohuan.mybatis.dao.AuthorMapper"</span> &gt;</span><br><span class="line">    &lt;resultMap type=<span class="string">"Author"</span> id=<span class="string">"authorResultMap"</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span> jdbcType=<span class="string">"INTEGER"</span> /&gt;</span><br><span class="line">        &lt;result column=<span class="string">"favourite_section"</span> property=<span class="string">"favouriteSection"</span> jdbcType=<span class="string">"VARCHAR"</span> /&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=<span class="string">"selectAuthorById"</span> parameterType=<span class="string">"int"</span> resultMap=<span class="string">"authorResultMap"</span>&gt;</span><br><span class="line">        SELECT * FROM author WHERE id = #&#123;id&#125; </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>blog的接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blog selectBlogById(Integer id);</span><br></pre></td></tr></table></figure><p>author的接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Author selectAuthorById(Integer id);</span><br></pre></td></tr></table></figure><p><strong>测试用例 1：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        </span><br><span class="line">        BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">        Blog blog = blogDao.selectBlogById(<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        session.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试用例2：</strong> </p><p>查询Blog<strong>列表</strong>时，执行的sql语句是 1 + n ， 但是如果blog关联的author有重复的数据，那么回从一级缓存中查询。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogList&quot; resultMap=&quot;blogResultMap&quot;&gt;</span><br><span class="line">       select * from blog</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; selectBlogList();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       </span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       List&lt;Blog&gt; blogList = blogDao.selectBlogList();</span><br><span class="line">       </span><br><span class="line">       session.close();</span><br><span class="line">       </span><br><span class="line">       System.out.println(blogList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>其他案例：post中的author 和 blog</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=&quot;Post&quot; id=&quot;postResultMap&quot;&gt;</span><br><span class="line">        &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;INTEGER&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;association property=&quot;author&quot; column=&quot;author_id&quot; javaType=&quot;Author&quot;</span><br><span class="line">        select=&quot;name.yaohuan.mybatis.dao.AuthorMapper.selectAuthorById&quot;&gt;&lt;/association&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;association property=&quot;blog&quot; column=&quot;blog_id&quot; javaType=&quot;Blog&quot;</span><br><span class="line">        select=&quot;name.yaohuan.mybatis.dao.BlogMapper.selectBlogById&quot;&gt;&lt;/association&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h3 id="19-高级结果映射-嵌套查询-集合映射"><a href="#19-高级结果映射-嵌套查询-集合映射" class="headerlink" title="19-高级结果映射-嵌套查询-集合映射"></a>19-高级结果映射-嵌套查询-集合映射</h3><p><strong>集合映射（适用于一对多和多对多）</strong></p><p><strong>需求：</strong>查询文章信息，同时查询这篇文章的评论列表</p><p><strong>思考：</strong>执行sql语句的条数</p><p>pojo：Post</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> name.yaohuan.mybatis.pojo;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="keyword">private</span> Blog blog;</span><br><span class="line">    <span class="keyword">private</span> Date createOn;</span><br><span class="line">    <span class="keyword">private</span> String section;</span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="keyword">private</span> String draft;</span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="keyword">private</span> Integer visit;</span><br><span class="line">    <span class="comment">/*private List&lt;Tag&gt; tagList;*/</span><span class="comment">//作业</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Comment&gt; commentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pojo：Comment </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.mybatis.pojo;</span><br><span class="line">import java.util.Date;</span><br><span class="line">public class Comment &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String comment;</span><br><span class="line">    private Date createOn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post的mapper： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"name.yaohuan.mybatis.dao.PostMapper"</span> &gt;</span><br><span class="line">    &lt;resultMap type=<span class="string">"Post"</span> id=<span class="string">"postResultMap"</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span> jdbcType=<span class="string">"INTEGER"</span> /&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;association property=<span class="string">"author"</span> column=<span class="string">"author_id"</span> javaType=<span class="string">"Author"</span></span><br><span class="line">        select="name.yaohuan.mybatis.dao.AuthorMapper.selectAuthorById"&gt;&lt;/association&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;association property=<span class="string">"blog"</span> column=<span class="string">"blog_id"</span> javaType=<span class="string">"Blog"</span></span><br><span class="line">        select="name.yaohuan.mybatis.dao.BlogMapper.selectBlogById"&gt;&lt;/association&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;collection property=<span class="string">"commentList"</span> column=<span class="string">"id"</span> javaType=<span class="string">"ArrayList"</span> ofType=<span class="string">"Comment"</span></span><br><span class="line">        select="name.yaohuan.mybatis.dao.CommentMapper.selectCommentByPostId" &gt;&lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;!-- 思考执行了几条sql --&gt;    </span><br><span class="line">    &lt;select id=<span class="string">"selectPostById"</span> parameterType=<span class="string">"int"</span> resultMap=<span class="string">"postResultMap"</span>&gt;</span><br><span class="line">        SELECT * FROM post WHERE id = #&#123;id&#125; </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!-- 思考执行了几条sql --&gt;     </span><br><span class="line">    &lt;select id=<span class="string">"selectPostList"</span> parameterType=<span class="string">"int"</span> resultMap=<span class="string">"postResultMap"</span>&gt;</span><br><span class="line">        SELECT * FROM post</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>comment的mapper： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"name.yaohuan.mybatis.dao.CommentMapper"</span> &gt;</span><br><span class="line">    &lt;resultMap type=<span class="string">"Comment"</span> id=<span class="string">"commentResultMap"</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span> jdbcType=<span class="string">"INTEGER"</span> /&gt;</span><br><span class="line">        &lt;result column=<span class="string">"create_on"</span> property=<span class="string">"createOn"</span> jdbcType=<span class="string">"DATE"</span> /&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=<span class="string">"selectCommentByPostId"</span> parameterType=<span class="string">"int"</span> resultMap=<span class="string">"commentResultMap"</span>&gt;</span><br><span class="line">        SELECT * FROM comment WHERE post_id = #&#123;postId&#125; </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>post的接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.mybatis.dao;</span><br><span class="line">import java.util.List;</span><br><span class="line">import name.yaohuan.mybatis.pojo.Post;</span><br><span class="line">public interface PostMapper &#123;</span><br><span class="line">    Post selectPostById(Integer id);</span><br><span class="line">    List&lt;Post&gt; selectPostList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>comment的接口： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.mybatis.dao;</span><br><span class="line">import java.util.List;</span><br><span class="line">import name.yaohuan.mybatis.pojo.Comment;</span><br><span class="line">public interface CommentMapper &#123;</span><br><span class="line">    List&lt;Comment&gt; selectCommentByPostId(Integer postId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPostById</span><span class="params">()</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">     SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">     </span><br><span class="line">     PostMapper postDao = session.getMapper(PostMapper.class);</span><br><span class="line">     Post post = postDao.selectPostById(<span class="number">2</span>);</span><br><span class="line">     </span><br><span class="line">     session.close();</span><br><span class="line">     </span><br><span class="line">     System.out.println(post);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPostList</span><span class="params">()</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">     SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">     </span><br><span class="line">     PostMapper postDao = session.getMapper(PostMapper.class);</span><br><span class="line">     List&lt;Post&gt; postList = postDao.selectPostList();</span><br><span class="line">     </span><br><span class="line">     session.close();</span><br><span class="line">     </span><br><span class="line">     System.out.println(postList);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="20-高级结果映射-嵌套结果"><a href="#20-高级结果映射-嵌套结果" class="headerlink" title="20-高级结果映射-嵌套结果"></a>20-高级结果映射-嵌套结果</h3><p>上一节讲了嵌套查询，嵌套查询的方式很简单，但是对于大型数据集合和列表将不会表现很好。问题就是我们熟知的“N+1查询问题”。</p><p>概括地讲，N+1查询问题可以是这样引起的：</p><ol><li>你执行了一个单独的SQL语句来获取结果列表（就是“+1”）。</li><li>对返回的每条记录，你执行了一个查询语句来为每个加载细节（就是“N”）。</li></ol><p>这个问题会导致成百上千的SQL语句被执行。这通常不是期望的。</p><p>所以还有另外一种方法：嵌套结果</p><p><strong>结果集映射：</strong></p><p><strong>方式一：</strong></p><p>使用 association 映射嵌套的结果列</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 嵌套结果 --&gt;</span><br><span class="line">    &lt;resultMap type=<span class="string">"Blog"</span> id=<span class="string">"blogResultMapNested"</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">"blog_id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">"blog_title"</span> property=<span class="string">"title"</span> /&gt;</span><br><span class="line">        &lt;result column=<span class="string">"blog_state"</span> property=<span class="string">"state"</span> /&gt;</span><br><span class="line">        &lt;result column=<span class="string">"blog_featured"</span> property=<span class="string">"featured"</span> /&gt;</span><br><span class="line">        &lt;association property=<span class="string">"author"</span> column=<span class="string">"blog_author_id"</span> javaType=<span class="string">"Author"</span>&gt;</span><br><span class="line">            &lt;id column=<span class="string">"author_id"</span> property=<span class="string">"id"</span> /&gt;</span><br><span class="line">            &lt;result column=<span class="string">"author_username"</span> property=<span class="string">"username"</span> /&gt;</span><br><span class="line">            &lt;result column=<span class="string">"author_password"</span> property=<span class="string">"password"</span> /&gt;</span><br><span class="line">            &lt;result column=<span class="string">"author_email"</span> property=<span class="string">"email"</span> /&gt;</span><br><span class="line">            &lt;result column=<span class="string">"author_bio"</span> property=<span class="string">"bio"</span> /&gt;</span><br><span class="line">            &lt;result column=<span class="string">"author_favourite_section"</span> property=<span class="string">"favouriteSection"</span> /&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><p><strong>查询语句：</strong></p><p>注意：</p><p>1、要使用列的别名避免列名重复</p><p>2、使用关联查询（内连接、或外连接）将所有需要的列查询出来</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!-- 关联查询 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"selectBlogListNested"</span> resultMap=<span class="string">"blogResultMapNested"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line"> b.id AS blog_id,</span><br><span class="line"> b.title AS blog_title,</span><br><span class="line"> b.author_id AS blog_author_id,</span><br><span class="line"> b.state AS blog_state,</span><br><span class="line"> b.featured AS blog_featured,</span><br><span class="line"> b.style AS blog_style,</span><br><span class="line"> a.id AS author_id,</span><br><span class="line"> a.username AS author_username,</span><br><span class="line"> a.password AS author_password,</span><br><span class="line"> a.email AS author_email,</span><br><span class="line"> a.bio AS author_bio,</span><br><span class="line"> a.favourite_section AS author_favourite_section,</span><br><span class="line"> a.nickname AS author_nickname,</span><br><span class="line"> a.realname AS author_realname</span><br><span class="line"> FROM blog b</span><br><span class="line"> LEFT JOIN author a</span><br><span class="line"> ON b.author_id = a.id</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>方式二：</p><p>使用继承，让结果集更灵活</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=&quot;Blog&quot; id=&quot;blogResultMap2&quot;&gt;</span><br><span class="line">      &lt;id column=&quot;blog_id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">      &lt;result column=&quot;blog_title&quot; property=&quot;title&quot;/&gt;</span><br><span class="line">      &lt;result column=&quot;blog_state&quot; property=&quot;state&quot;/&gt;</span><br><span class="line">      &lt;result column=&quot;blog_featured&quot; property=&quot;featured&quot;/&gt;</span><br><span class="line">      &lt;result column=&quot;blog_style&quot; property=&quot;style&quot;/&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br><span class="line">  &lt;resultMap type=&quot;Blog&quot; id=&quot;blogResultMapNested2&quot; extends=&quot;blogResultMap2&quot;&gt;</span><br><span class="line">      &lt;association column=&quot;blog_author_id&quot; property=&quot;author&quot; javaType=&quot;Author&quot;&gt;</span><br><span class="line">          &lt;id column=&quot;author_id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">          &lt;result column=&quot;author_username&quot; property=&quot;username&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;author_password&quot; property=&quot;password&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;author_email&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;author_bio&quot; property=&quot;bio&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;author_favourite_section&quot; property=&quot;favouriteSection&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;author_nickname&quot; property=&quot;nickname&quot;/&gt;</span><br><span class="line">          &lt;result column=&quot;author_realname&quot; property=&quot;realname&quot;/&gt;</span><br><span class="line">      &lt;/association&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;select id=&quot;selectBlogListNested&quot; resultMap=&quot;blogResultMapNested2&quot;&gt;</span><br><span class="line">  SELECT </span><br><span class="line">    b.id AS blog_id,</span><br><span class="line">    b.title AS blog_title,</span><br><span class="line">    b.author_id AS blog_author_id,</span><br><span class="line">    b.state AS blog_state,</span><br><span class="line">    b.featured AS blog_featured,</span><br><span class="line">    b.style AS blog_style,</span><br><span class="line">    </span><br><span class="line">    a.id AS author_id,</span><br><span class="line">    a.username AS author_username,</span><br><span class="line">    a.password AS author_password,</span><br><span class="line">    a.email AS author_email,</span><br><span class="line">    a.bio AS author_bio,</span><br><span class="line">    a.favourite_section AS author_favourite_section,</span><br><span class="line">    a.nickname AS author_nickname,</span><br><span class="line">    a.realname AS author_realname</span><br><span class="line">  </span><br><span class="line">  FROM blog b</span><br><span class="line">  LEFT JOIN author a</span><br><span class="line">  ON b.author_id = a.id</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="21-高级结果映射-构造方法映射"><a href="#21-高级结果映射-构造方法映射" class="headerlink" title="21-高级结果映射-构造方法映射"></a>21-高级结果映射-构造方法映射</h3><p><strong>pojo中创建构造方法：</strong></p><p>1、注意：要使用Integer而不是int</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Blog(Integer id, String title) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.title = title;</span><br><span class="line">       System.out.println(&quot;构造方法。。。。。。。。。。。。。。&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>mapper中创建构造方法映射：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 构造方法映射 --&gt;</span><br><span class="line">  &lt;resultMap type=&quot;Blog&quot; id=&quot;blogResultMapConstructor&quot;&gt;</span><br><span class="line">      &lt;constructor&gt;</span><br><span class="line">          &lt;idArg column=&quot;id&quot; javaType=&quot;int&quot; /&gt;</span><br><span class="line">          &lt;arg column=&quot;title&quot; javaType=&quot;string&quot; /&gt;</span><br><span class="line">      &lt;/constructor&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><p><strong>使用构造方法的映射结果：</strong></p><p>注意：</p><p>1、include中的内容包含：id, title, author_id, state, featured</p><p>mybatis在做结果映射的时候会首先调用构造函数将id，和title映射到结果对象中，</p><p>然后调用 setXxx 方法 将state 和 featured 映射到结果对象中</p><p>如果需要映射 author 属性，则可以按照之前的方法 添加 <association> 节点做嵌套查询映射</association></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogConstructor&quot; parameterType=&quot;int&quot; </span><br><span class="line">   resultMap=&quot;blogResultMapConstructor&quot;&gt;</span><br><span class="line">         select &lt;include refid=&quot;columnWords&quot;&gt;&lt;/include&gt; from Blog where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>接口：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blog selectBlogConstructor(Integer id);</span><br></pre></td></tr></table></figure><p><strong>测试：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testSelectBlogConstructor()&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       Blog blog = blogDao.selectBlogConstructor(3);</span><br><span class="line">       session.close();</span><br><span class="line">       System.out.println(blog);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="22-高级结果映射-鉴别器"><a href="#22-高级结果映射-鉴别器" class="headerlink" title="22-高级结果映射-鉴别器"></a>22-高级结果映射-鉴别器</h3><p>类型鉴别器，帮助实现创建多态的对象，用于多态映射</p><p><strong>示例：</strong></p><p>一、类设计</p><p>1、交通工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Vehicle &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String vin;//车辆识别代码Veterinary information network</span><br><span class="line">    private Date year;</span><br><span class="line">    private String make;//品牌：what make is it</span><br><span class="line">    private String model;//</span><br><span class="line">    private String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、小汽车类 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class Car extends Vehicle&#123;</span><br><span class="line">    private Integer doorCount;</span><br></pre></td></tr></table></figure><p>3、Suv类  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Suv extends Vehicle&#123;</span><br><span class="line">    private Boolean allWheelDrive;//全轮驱动 awd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、数据库设计</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/560bff0d-ebe1-4be0-82ef-86bdeb5eb3f1/index_files/ec717d45-dd82-4e34-a743-5bfd49847321.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543935456269.png" alt="1543935456269"></p><p> 三、代码实现</p><p><strong>配置文件：</strong></p><p>注意：</p><p>1、一定要有鉴别器，测试才能通过</p><p>2、查询结果中一定要包含鉴别器列</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"Vehicle"</span> id=<span class="string">"vehicleResultMap"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;discriminator javaType=<span class="string">"int"</span> column=<span class="string">"vehicle_type"</span>&gt;</span><br><span class="line">           &lt;<span class="keyword">case</span> value=<span class="string">"1"</span> resultType=<span class="string">"Car"</span>&gt;</span><br><span class="line">               &lt;result property=<span class="string">"doorCount"</span> column=<span class="string">"door_count"</span> /&gt;</span><br><span class="line">           &lt;/case&gt;</span><br><span class="line">           &lt;<span class="keyword">case</span> value=<span class="string">"2"</span> resultType=<span class="string">"Suv"</span>&gt;</span><br><span class="line">               &lt;result property=<span class="string">"allWheelDrive"</span> column=<span class="string">"all_wheel_drive"</span> /&gt;</span><br><span class="line">           &lt;/case&gt;</span><br><span class="line">       &lt;/discriminator&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">   &lt;select id=<span class="string">"selectVehicleById"</span> parameterType=<span class="string">"int"</span> </span><br><span class="line">   resultMap=<span class="string">"vehicleResultMap"</span>&gt;</span><br><span class="line">       SELECT * FROM Vehicle WHERE id = #&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">   &lt;select id=<span class="string">"selectVehicleList"</span> resultMap=<span class="string">"vehicleResultMap"</span>&gt;</span><br><span class="line">       SELECT * FROM Vehicle</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>接口：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface VehicleMapper &#123;</span><br><span class="line">    public Vehicle selectVehicleById(Integer id);</span><br><span class="line">    public List&lt;Vehicle&gt; selectVehicleList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p>方法1：打印对象地址可以看出对象是多态的</p><p>方法2：用断点调试可以发现取出的对象是多态的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectVehicleById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">      </span><br><span class="line">      VehicleMapper vehicleDao = session.getMapper(VehicleMapper.class);</span><br><span class="line">      <span class="comment">/*Car vehicle1 = (Car)vehicleDao.selectVehicleById(1);</span></span><br><span class="line"><span class="comment">      Suv vehicle3 = (Suv)vehicleDao.selectVehicleById(3);*/</span></span><br><span class="line">      Vehicle vehicle1 = vehicleDao.selectVehicleById(<span class="number">1</span>);</span><br><span class="line">      Vehicle vehicle3 = vehicleDao.selectVehicleById(<span class="number">3</span>);</span><br><span class="line">      </span><br><span class="line">      session.close();</span><br><span class="line">      System.out.println(vehicle1);</span><br><span class="line">      System.out.println(vehicle3);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="23-性能-延迟加载"><a href="#23-性能-延迟加载" class="headerlink" title="23-性能-延迟加载"></a>23-性能-延迟加载</h3><p>延迟加载又叫懒加载，也叫按需加载。也就是说先加载主信息，在需要的时候，再去加载从信息。</p><p>在mybatis中，resultMap标签 的association标签和collection标签具有延迟加载的功能。</p><p><strong>1、拷贝jar包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2、配置全局设置</strong></p><p>目前的mybatis版本对 aggressiveLazyLoading 的支持不好？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 全局设置 --&gt;</span><br><span class="line">   &lt;settings&gt;</span><br><span class="line">       &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">       &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">   &lt;/settings&gt;</span><br></pre></td></tr></table></figure><p><strong>官方对这两个属性的解释是：</strong></p><p><strong>lazyLoadingEnabled</strong> 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。（是否延迟加载当前对象的关联对象）</p><p><strong>aggressiveLazyLoading</strong> 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。（是否延迟加载当前对象属性的关联对象）</p><p>延迟加载会生成代理对象</p><p> <strong>3、测试</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试延迟加载</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogLazyLoading</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">       BlogMapper blogDao = session.getMapper(BlogMapper.class);</span><br><span class="line">       System.out.println(<span class="string">"查询blog"</span>);</span><br><span class="line">       Blog blog = blogDao.selectBlogById(<span class="number">3</span>);<span class="comment">//执行查询blog的sql语句</span></span><br><span class="line">       <span class="comment">//System.out.println(blog);</span></span><br><span class="line">       session.close();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"查询title属性"</span>);</span><br><span class="line">       System.out.println(blog.getTitle());<span class="comment">//不执行任何sql语句</span></span><br><span class="line">       System.out.println(<span class="string">"查询author属性"</span>);</span><br><span class="line">       System.out.println(blog.getAuthor().getUsername());<span class="comment">//执行查询作者的sql语句</span></span><br><span class="line">       System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>（1）什么都不配置</strong></p><p>查询blog</p><p>Opening JDBC Connection</p><p>Created connection 798244209.</p><p>Setting autocommit to false on JDBC Connection</p><p>==&gt;  Preparing: SELECT * FROM blog WHERE id = ? </p><p>====&gt;  Preparing: SELECT * FROM author WHERE id = ? </p><p>Resetting autocommit to true on JDBC Connection</p><p>Closing JDBC Connection</p><p>Returned connection 798244209 to pool.</p><p>查询title属性</p><p>姚延军的空间</p><p>查询author属性</p><p>yaoyanjun</p><p>结束</p><p><strong>（2）配置</strong> <setting name="lazyLoadingEnabled" value="true"></setting></p><p>只要结果映射中配置了association</p><p>则执行懒加载特性：不查询blog的属性，则不执行子查询，一旦查询任意属性则执行子查询(无论查不查author，都会执行author的查询sql)</p><p>查询blog</p><p>Opening JDBC Connection</p><p>Created connection 798244209.</p><p>Setting autocommit to false on JDBC Connection</p><p>==&gt;  Preparing: SELECT * FROM blog WHERE id = ? </p><p>Resetting autocommit to true on JDBC Connection</p><p>Closing JDBC Connection</p><p>Returned connection 798244209 to pool.</p><p>查询title属性</p><p>Opening JDBC Connection</p><p>Checked out connection 798244209 from pool.</p><p>Setting autocommit to false on JDBC Connection</p><p>==&gt;  Preparing: SELECT * FROM author WHERE id = ? </p><p>Resetting autocommit to true on JDBC Connection</p><p>Closing JDBC Connection</p><p>Returned connection 798244209 to pool.</p><p>姚延军的空间</p><p>查询author属性</p><p>yaoyanjun</p><p>结束</p><p><strong>（3）配置</strong> <setting name="aggressiveLazyLoading" value="false"></setting></p><p>author属性将会按需加载：例如如果不查询author，则不会执行author的查询sql</p><p>查询blog</p><p>Opening JDBC Connection</p><p>Created connection 798244209.</p><p>Setting autocommit to false on JDBC Connection</p><p>==&gt;  Preparing: SELECT * FROM blog WHERE id = ? </p><p>Resetting autocommit to true on JDBC Connection</p><p>Closing JDBC Connection</p><p>Returned connection 798244209 to pool.</p><p>查询title属性</p><p>姚延军的空间</p><p>结束</p><h3 id="24-逆向工程maven版"><a href="#24-逆向工程maven版" class="headerlink" title="24-逆向工程maven版"></a>24-逆向工程maven版</h3><p><a href="http://blog.csdn.net/modote9527/article/details/69053751" target="_blank" rel="noopener">http://blog.csdn.net/modote9527/article/details/69053751</a></p><p>1、创建maven项目 <strong>mybatis03generator</strong></p><p>2、创建数据库 oa</p><p>执行脚本：权限管理基础表.sql</p><p>3、添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--  mybatis逆向工程jar包 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>4、添加插件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">            &lt;dependencies&gt;</span><br><span class="line">                &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;5.1.45&lt;/version&gt;</span><br><span class="line">                &lt;/dependency&gt;</span><br><span class="line">            &lt;/dependencies&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;!--配置文件的路径--&gt;</span><br><span class="line">                &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">                &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>5、resources下创建 generatorConfig.xml</p><p>配置参考：<a href="https://blog.csdn.net/isea533/article/details/42102297" target="_blank" rel="noopener">https://blog.csdn.net/isea533/article/details/42102297</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;mysql&quot; targetRuntime=&quot;MyBatis3&quot;  defaultModelType=&quot;flat&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--分隔符--&gt;</span><br><span class="line">        &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 一些工具 --&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.EqualsHashCodePlugin&quot;&gt;&lt;/plugin&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;&gt;&lt;/plugin&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;&gt;&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!--取消时间戳--&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--数据库链接参数--&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://localhost:3306/oa_bj1802&quot; userId=&quot;root&quot;</span><br><span class="line">                        password=&quot;123456&quot;&gt;&lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;!-- This property is used to specify whether MyBatis Generator should</span><br><span class="line">               force the use of java.math.BigDecimal for DECIMAL and NUMERIC fields, --&gt;</span><br><span class="line">            &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer/Long，为 true时把JDBC DECIMAL 和</span><br><span class="line">         NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--pojo模型的位置和包名--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.qfedu.oa.pojo&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--mapper映射文件的位置和包名--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;com.qfedu.oa.dao&quot; targetProject=&quot;src/main/java&quot;&gt;&lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成DAO的包名和位置 XMLMAPPER | ANNOTATEDMAPPER--&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.qfedu.oa.dao&quot; targetProject=&quot;src/main/java&quot;&gt;&lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 要生成哪些表 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_menu&quot; domainObjectName=&quot;SysMenu&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_role&quot; domainObjectName=&quot;SysRole&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_user&quot; domainObjectName=&quot;SysUser&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_role_menu&quot; domainObjectName=&quot;SysRoleMenu&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_user_role&quot; domainObjectName=&quot;SysUserRole&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_config&quot; domainObjectName=&quot;SysConfig&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_log&quot; domainObjectName=&quot;SysLog&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line"></span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p><strong>6、运行</strong></p><p>mybatis-generator:generate</p></cache>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;mybatis&quot;&gt;&lt;a href=&quot;#mybatis&quot; class=&quot;headerlink&quot; title=&quot;mybatis&quot;&gt;&lt;/a&gt;mybatis&lt;/h1&gt;&lt;h3 id=&quot;01-入门-根据id查询数据&quot;&gt;&lt;a href=&quot;#01-入门-
      
    
    </summary>
    
      <category term="框架" scheme="https://zymmx.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="mybatis" scheme="https://zymmx.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC详解</title>
    <link href="https://zymmx.github.io/2018/12/04/SpringMVC/"/>
    <id>https://zymmx.github.io/2018/12/04/SpringMVC/</id>
    <published>2018-12-04T13:29:52.677Z</published>
    <updated>2018-12-04T13:29:52.678Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h3 id="一、springmvc框架"><a href="#一、springmvc框架" class="headerlink" title="一、springmvc框架"></a>一、springmvc框架</h3><p>MVC的概念：</p><p>M：model，模型层， 一种javabean，是数据库中的表的实体类型的映射</p><p>V：view，视图层，jsp页面，和用户交互的一个界面</p><p>C：controller，控制层，接受请求，调用业务逻辑，返回结果，调用结果视图</p><p>struts2：一个MVC框架</p><p>springmvc：是一个在性能上和安全性上更优秀MVC框架</p><h3 id="二、springmvc-HelloWorld"><a href="#二、springmvc-HelloWorld" class="headerlink" title="二、springmvc HelloWorld"></a>二、springmvc HelloWorld</h3><p><strong>1、创建项目</strong></p><p><strong>springmvc01hello</strong></p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/93a36431-820f-45cc-9acf-6db7c64489dc/index_files/f735b809-78ff-44fd-ad3e-492f8e24bcf6.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543923226463.png" alt="1543923226463"></p><p><strong>2、pom中设置项目的打包方式为：war</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p><strong>3、pom中添加jar包</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.13.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p> <strong>4、完善项目目录结构</strong> </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/93a36431-820f-45cc-9acf-6db7c64489dc/index_files/92ea87d4-4434-488a-aa92-1fdfcb9671ea.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543923503611.png" alt="1543923503611"></p><p>添加web.xml文件 </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/93a36431-820f-45cc-9acf-6db7c64489dc/index_files/a92495e9-f2da-4a3e-886f-e51704c56b38.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543923530133.png" alt="1543923530133"></p><p><strong>5、log4j</strong></p><p>复制4j.properties文件</p><p><strong>6、创建jsp目录和文件</strong> </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/93a36431-820f-45cc-9acf-6db7c64489dc/index_files/cae67306-076b-4804-9de0-7c35561192bf.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543923557060.png" alt="1543923557060"></p><p><strong>7、创建Controller</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"index......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;<span class="comment">//视图的名字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8、创建和配置springmvc-servlet.xml</strong></p><p>在resources下添加文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描controller包下所有标注<span class="meta">@Controller</span>的组件 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.qfedu.springmvc.controller"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器 --&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><br><span class="line">          p:prefix=<span class="string">"/WEB-INF/jsp/"</span></span><br><span class="line">          p:suffix=<span class="string">".jsp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>9、配置web.xml</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line">         version=<span class="string">"3.1"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置SpringMVC的 DispatcherServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">        &lt;!-- 配置 DispatcherServlet 的一个初始化参数: 配置 springmvc 配置文件的位置和名称 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            实际上也可以不通过 contextConfigLocation 来配置 springmvc 的配置文件, 而使用默认的.</span><br><span class="line">            默认的配置文件为: /WEB-INF/&lt;servlet-name&gt;-servlet.xml</span><br><span class="line">            如：springmvc-servlet.xml</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">            &lt;!-- &lt;param-value&gt;/WEB-INF/springmvc-servlet.xml&lt;/param-value&gt; --&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line"></span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 所有的客户端请求由 DispatcherServlet处理：前端控制器模式--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>/* 拦截所有请求</p><p>/  拦截所有请求，不包括 jsp</p><p><em>.do 或 </em>.action 只拦截 do 或 action 扩展名的请求</p><p> <strong>10、配置tomcat插件</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!-- 配置Tomcat插件 --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;  &lt;!--配置编码方式为UTF-8--&gt;</span><br><span class="line">                &lt;port&gt;8080&lt;/port&gt;</span><br><span class="line">                &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p><strong>11、启动和运行项目</strong></p><p>mvn tomcat7:run</p><p>测试路径：<a href="http://localhost:8080/index" target="_blank" rel="noopener">http://localhost:8080/index</a></p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/93a36431-820f-45cc-9acf-6db7c64489dc/index_files/ec5c47b3-e24f-4977-bc68-719fe7215450.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543924069350.png" alt="1543924069350"></p><h3 id="三、常用注解"><a href="#三、常用注解" class="headerlink" title="三、常用注解"></a>三、常用注解</h3><p><strong>一、@RequestMapping的位置</strong></p><p>1、加在方法前</p><p>2、加在类前</p><p><strong>例如：</strong>创建 /jsp/school/list.jsp 和 SchoolController.java</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;锋舍管理系统&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;校区管理&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/school"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"school/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启tomcat，程序的访问路径是：<a href="http://localhost:8080/school/list" target="_blank" rel="noopener">http://localhost:8080/school/list</a> </p><p><strong>二、@RequestMapping的请求方式</strong></p><p><strong>1、默认情况下，处理器可以同时接收post形式和get形式的请求</strong></p><p><strong>例如：</strong>创建/jsp/login.jsp 、/jsp/success.jsp 和 LoginController.java</p><p>login.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">&lt;form action=&quot;do_login&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for=&quot;username&quot;&gt;用户名&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;button&gt;登录&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>success.jsp </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;成功&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>LoginController.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/do_login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启tomcat，程序的访问路径是：<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a></p><p>输入用户名和密码程序跳转到：<a href="http://localhost:8080/do_login?username=admin&amp;password=12345" target="_blank" rel="noopener">http://localhost:8080/do_login?username=admin&amp;password=12345</a></p><p>此时表单为默认的get形式发送的请求 </p><p> <strong>2、可以将表单的请求方式改为 post</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;do_login&quot; method=&quot;post&quot;&gt;</span><br></pre></td></tr></table></figure><p>刷新页面后重新测试。</p><p><strong>3、可以将处理器中的注解修改成只接收post请求的方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/do_login"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：如果请求方式和接收方式不匹配，会发生405错误</p><p> <img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/f4c9161a-9148-46a2-afe8-d03530d0b043/index_files/50c51402-284e-4fb6-b50d-f522b0c83d6c.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543924351265.png" alt="1543924351265"></p><p><strong>4、总结</strong></p><p><strong>（1）GET形式：</strong>@RequestMapping(value=”/do_login”, method=RequestMethod.GET)</p><ul><li>通过URL地址直接访问</li><li>或通过a标签的超链接访问</li></ul><p>例如：index.jsp中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;a href=&quot;login&quot;&gt;登录&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>表单中的 <form method="get"></form></li><li>ajax get</li></ul><p><strong>（2）POST形式：</strong></p><ul><li>@RequestMapping(value=”/do_login”, method=RequestMethod.POST)</li></ul><p>表单中的 <form method="post"></form></p><ul><li>ajax post</li></ul><p><strong>（3）注意：</strong></p><ul><li>如果不明确指定method参数，那么可以接收任何类型的请求</li><li>如果明确指定，但是类型不匹配，那么会出现 405 错误</li></ul><p><strong>三、处理请求参数</strong> </p><p><strong>1、在控制层方法的参数中处理请求参数：</strong></p><ul><li>参数名和表单中控件的name属性保持一致</li><li>可以接收get和post所有形式的传参</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/do_login"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、@RequestParam处理请求参数</strong></p><p>上面的例子也可以写成下面的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String doLogin(@RequestParam String username, @RequestParam String password)&#123;</span><br></pre></td></tr></table></figure><p>或（@RequestParam中的默认参数和表单中控件的name属性保持一致） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String doLogin(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;password&quot;) String password)&#123;</span><br></pre></td></tr></table></figure><p><strong>3、配置可选的参数</strong></p><p>在控制层添加一个参数：“验证码 code”，测试登录功能发现400错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/do_login"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(<span class="string">"code"</span>)</span> String code)</span>&#123;</span><br></pre></td></tr></table></figure><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/f4c9161a-9148-46a2-afe8-d03530d0b043/index_files/c2b3b3a8-974e-4b84-b4ac-79609b4182f5.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543924451503.png" alt="1543924451503"></p><p>可以设置：required=false，表示参数是可选的，可以传递也可以不传递。默认值是true，必须传递 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestParam(name = &quot;code&quot;, required = false) String code</span><br></pre></td></tr></table></figure><p><strong>4、配置参数的默认值</strong></p><p>defaultValue属性可以配置参数的默认值，当参数没有被定义时，使用默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/do_login"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">        <span class="comment">/*@RequestParam(name = "code", required = false) String code*/</span></span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"code"</span>, defaultValue = <span class="string">""</span>)</span> String code)</span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(<span class="string">"code = "</span> + code);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、接收参数时，数值类型的参数应该使用包装类类型</strong></p><p>否则当前端的字段可以为空时，会报告类型转换错误（400错误）</p><p>例如：login.jsp中添加如下字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;label for=&quot;number&quot;&gt;数值&lt;/label&gt;&lt;input type=&quot;number&quot; name=&quot;number&quot; id=&quot;number&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>LoginController.jsp中接收参数是int，测试：当不输入number的时候会发生400错误 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/do_login"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">        <span class="comment">/*@RequestParam(name = "code", required = false) String code*/</span></span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"code"</span>, defaultValue = <span class="string">""</span>)</span> String code,</span></span><br><span class="line"><span class="function">        <span class="keyword">int</span> number)</span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(<span class="string">"code = "</span> + code);</span><br><span class="line">    System.out.println(<span class="string">"number = "</span> + number);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/f4c9161a-9148-46a2-afe8-d03530d0b043/index_files/9c531a1f-4b70-4da2-aaa6-986edbcfade6.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543924520557.png" alt="1543924520557"></p><p>控制台警告：</p><p>警告: Failed to bind request element: org.springframework.beans.TypeMismatchException: Failed to convert value of type ‘java.lang.String’ to required type ‘int’; nested exception is java.lang.NumberFormatException: For input string: “”</p><p>将 int 该成 Integer 会解决这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer number</span><br></pre></td></tr></table></figure><p><strong>四、@PathVariable 路径传参</strong></p><p>通常url中的参数使用queryString，也可以使用路径传参</p><p>（1）修改school/list.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;校区管理&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;校区名称&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;a href="view?id=1"&gt;天丰利&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;a href="view/1"&gt;北科&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>（2）添加school/view.jsp </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;校区管理&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;详细信息&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>（3）修改SchoolController.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/view"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">view1</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"id = "</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"school/view"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/view/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">view2</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"id = "</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"school/view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>五、转发和重定向</strong></p><p>重定向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value=&quot;/do_login&quot;, method= RequestMethod.POST)</span><br><span class="line">public String doLogin(......)&#123;</span><br><span class="line">    ......</span><br><span class="line">    //return &quot;success&quot;;</span><br><span class="line">    return &quot;redirect:index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>六、乱码</strong></p><p><strong>1、解决post乱码问题</strong></p><p><strong>web.xml文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 字符编码过滤器 : 放在其他过滤器的前面--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">utf</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">forceEncoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">true</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、get乱码问题</strong></p><p>get 乱码 和 tomcat 版本有关</p><p>tomcat7和7以下 需要 解决乱码问题</p><p>tomcat8不用</p><p><strong>3、idea乱码</strong></p><p><a href="https://www.cnblogs.com/liaoyanglong/p/6639039.html" target="_blank" rel="noopener">https://www.cnblogs.com/liaoyanglong/p/6639039.html</a></p><h3 id="四、处理模型数据"><a href="#四、处理模型数据" class="headerlink" title="四、处理模型数据"></a>四、处理模型数据</h3><p><strong>一、使用pojo对象绑定参数</strong></p><p><strong>1、创建模型类School.java</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class School &#123;</span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String number;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、school/form.jsp</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;校区管理&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"save"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="name"&gt;校区名称&lt;/label&gt;&lt;input type="text" name="name" id="name"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="number"&gt;校区编号&lt;/label&gt;&lt;input type="text" name="number" id="number"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;button&gt;保存&lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>3、SchoolController.java</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"school/form"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(School school)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(school);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 会按请求参数名和 POJO 属性名进行自动匹配， 自动为该对象填充属性值。</p><p><strong>4、测试</strong>：<a href="http://localhost:8080/school/add" target="_blank" rel="noopener">http://localhost:8080/school/add</a></p><p><strong>二、复杂的对象</strong></p><p>Spring MVC 参数支持级联属性如：.school.name 等</p><p><strong>1、创建模型类Apartment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apartment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String contractBegin;</span><br><span class="line">    <span class="keyword">private</span> String contractEnd;</span><br><span class="line">    <span class="keyword">private</span> Integer dormitoryCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、创建页面apartment/form.jsp</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;公寓管理&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"save"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="schoolName"&gt;所属校区&lt;/label&gt;&lt;input type="text" name="school.name" id="schoolName"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="name"&gt;公寓名称&lt;/label&gt;&lt;input type="text" name="name" id="name"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="type"&gt;公寓类型&lt;/label&gt;&lt;input type="text" name="type" id="type"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="number"&gt;公寓编号&lt;/label&gt;&lt;input type="text" name="number" id="number"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="contractBegin"&gt;合同租期&lt;/label&gt;&lt;input type="text" name="contractBegin" id="contractBegin"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="contractEnd"&gt;合同到期&lt;/label&gt;&lt;input type="text" name="contractEnd" id="contractEnd"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="dormitoryCount"&gt;宿舍数量&lt;/label&gt;&lt;input type="text" name="dormitoryCount" id="dormitoryCount"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;button&gt;保存&lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>3、创建页面apartment/list.jsp</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;公寓管理&lt;/h1&gt;</span><br><span class="line">&lt;div&gt;&lt;a href=&quot;add&quot;&gt;添加&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>4、创建 ApartmentController.java</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/apartment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApartmentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"apartment/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"apartment/form"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Apartment apartment)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(apartment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、测试</strong></p><p> <strong>三、ModelAndView处理模型数据</strong></p><p>从controller向页面传值，多用于列表页、回显页面</p><p><strong>1、修改SchoolController的 list 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设从db中取出了数据列表</span></span><br><span class="line">    List&lt;School&gt; schoolList = <span class="keyword">new</span> ArrayList&lt;School&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        School school = <span class="keyword">new</span> School();</span><br><span class="line">        school.setId(i + <span class="number">1</span>);</span><br><span class="line">        school.setName(<span class="string">"school "</span> + <span class="number">1</span>);</span><br><span class="line">        school.setNumber(<span class="string">"number "</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        schoolList.add(school);</span><br><span class="line">    &#125;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">    mv.setViewName(<span class="string">"school/list"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"schoolList"</span>, schoolList);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、修改 school/list.jsp页面</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;校区ID&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;校区名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;校区编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">"$&#123;requestScope.schoolList&#125;"</span> <span class="keyword">var</span>=<span class="string">"school"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;school.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;a href="view?id=$&#123;school.id&#125;"&gt;$&#123;school.name&#125;&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;school.number&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;a href="view/$&#123;school.id&#125;"&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>3、测试</p><p><strong>四、Map处理模型数据</strong></p><p><strong>1、修改SchoolController的 list 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设从db中取出了数据列表</span></span><br><span class="line">    List&lt;School&gt; schoolList = <span class="keyword">new</span> ArrayList&lt;School&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        School school = <span class="keyword">new</span> School();</span><br><span class="line">        school.setId(i + <span class="number">1</span>);</span><br><span class="line">        school.setName(<span class="string">"school "</span> + <span class="number">1</span>);</span><br><span class="line">        school.setNumber(<span class="string">"number "</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        schoolList.add(school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">"schoolList"</span>, schoolList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"school/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试</p><p><strong>五、Model/ModelMap处理模型数据</strong></p><p>还可以使用 Model 或 ModelMap 类替代Map类</p><h3 id="五、原生API"><a href="#五、原生API" class="headerlink" title="五、原生API"></a>五、原生API</h3><p><strong>一、原生API</strong></p><p>主要指Servlet中的可用对象，例如：</p><p>HttpServletRequest、HttpServletResponse、HttpSession 等</p><p>需要将如下依赖加入到pom中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>二、登陆功能的实现</strong></p><p><strong>1、修改doLogin方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/do_login"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpSession session)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(username) &amp;&amp; <span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:index"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、页面中获取session数据</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;当前用户：$&#123;sessionScope.username&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>5、登出的controller方法</strong></p><p>index.jsp页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/logout&quot;&gt;退出&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>LoginController.java中添加： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    <span class="comment">//session.removeAttribute("username");</span></span><br><span class="line">    session.invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:login"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、Spring-MVC处理请求的流程（底层原理）"><a href="#六、Spring-MVC处理请求的流程（底层原理）" class="headerlink" title="六、Spring MVC处理请求的流程（底层原理）"></a>六、Spring MVC处理请求的流程（底层原理）</h3><p><strong>一、Spring MVC 的运行原理</strong></p><p>执行细节：</p><p>springmvc 的 DispathcerServlet执行时 会读取默认的配置文件，来加载相关组件：</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/635e59e0-cd41-4d66-8c82-0ce5b858f216/index_files/9201a3aa-6fda-49db-8447-c49a88e99437.png" alt="img"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543925189428.png" alt="1543925189428"></p><p>、核心组件包括：处理器映射器、处理器适配器、视图解析器 </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/635e59e0-cd41-4d66-8c82-0ce5b858f216/index_files/2cc10102-a98d-40d2-9e55-5d646bbc5839.png" alt="img"> 、</p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543925232853.png" alt="1543925232853"></p><p>可以通过在spring mvc的配置文件中配置如下选项修改默认的组件 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--视图解析器--&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><br><span class="line"> p:prefix=<span class="string">"/WEB-INF/jsp/"</span></span><br><span class="line"> p:suffix=".jsp"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 处理器映射器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span> /&gt;</span><br><span class="line">&lt;!-- 处理器适配器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>二、Spring MVC处理请求的流程</strong> </p><p> <img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/635e59e0-cd41-4d66-8c82-0ce5b858f216/index_files/e3ca6d3c-6f68-4c68-a15f-01df3f349886.jpg" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543925281417.png" alt="1543925281417"></p><p><strong>SpringMVC流程</strong></p><p>1、  用户发送请求至前端控制器DispatcherServlet。</p><p>2、  DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p><p>3、  处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p><p>4、  DispatcherServlet调用HandlerAdapter处理器适配器。</p><p>5、  HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p><p>6、  Controller执行完成返回ModelAndView。</p><p>7、  HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p><p>8、  DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>9、  ViewReslover解析后返回具体View。</p><p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p><p>11、 DispatcherServlet响应用户。</p><p><strong>组件说明：</strong></p><p>DispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。</p><p>HandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </p><p>HandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。</p><p>ViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。</p><p><strong>组件：</strong><br><strong>1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供</strong><br>作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。<br>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</p><p><strong>2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供</strong><br>作用：根据请求的url查找Handler<br>HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><p><strong>3、处理器适配器HandlerAdapter</strong><br>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler<br>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><p><strong>4、处理器Handler(需要工程师开发)</strong><br><strong>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler</strong><br>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。<br>由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。</p><p><strong>5、视图解析器View resolver(不需要工程师开发),由框架提供</strong><br>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）<br>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、freemarkerView、pdfView等。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p><p><strong>6、视图View(需要工程师开发jsp…)</strong><br>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</p><h3 id="七、静态资源访问"><a href="#七、静态资源访问" class="headerlink" title="七、静态资源访问"></a>七、静态资源访问</h3><p><strong>一、静态资源访问</strong></p><p><strong>1、创建 webapp/css/web.css</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、在login.jsp中加入静态资源文件</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;锋舍管理系统&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/web.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>刷新后，发现脚本无法被加载，因为所有请求通过前端控制器拦截，springMVC无法找到脚本的路径请求对应的视图，所以报告404错误</p><p><strong>3、处理静态资源</strong></p><p><strong>在spring-mvc.xml文件中添加</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;!-- 处理静态资源 --&gt;</span><br><span class="line">&lt;!-- 所有以/css路径开头的请求不会经过springMVC的DispatcherServlet，而是由/css目录提供服务 --&gt;</span><br><span class="line">&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/css/&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>二、SpringMVC访问静态资源的三种方式</strong></p><p><a href="https://blog.csdn.net/u012730299/article/details/51872704" target="_blank" rel="noopener">https://blog.csdn.net/u012730299/article/details/51872704</a></p><p>如果你的DispatcherServlet拦截 <em>.do这样的URL，就不存在访问不到静态资源的问题。如果你的DispatcherServlet拦截“/”，拦截了所有的请求，同时对</em>.js,*.jpg的访问也就被拦截了。</p><p>问题原因：罪魁祸首是web.xml下对spring的DispatcherServlet请求url映射的配置</p><p>分析原因：<servlet-mapping>的<url-pattern>/</url-pattern>把所有的请求都交给spring去处理了</servlet-mapping></p><p><strong>方案一：激活Tomcat的defaultServlet来处理静态文件</strong></p><p>在web.xml里添加如下配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>要写在DispatcherServlet的前面， 让defaultServlet先拦截，这个就不会进入Spring了，我想性能是最好的吧。</p><p>Tomcat, Jetty, JBoss, and GlassFish  默认 Servlet的名字 – “default”<br>Google App Engine 默认 Servlet的名字 – “_ah_default”<br>Resin 默认 Servlet的名字 – “resin-file”<br>WebLogic 默认 Servlet的名字  – “FileServlet”<br>WebSphere  默认 Servlet的名字 – “SimpleFileServlet”</p><p><strong>方案二： 在spring3.0.4以后版本提供了mvc:resources</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;!-- 处理静态资源 --&gt;</span><br><span class="line">&lt;!-- 所有以/css路径开头的请求不会经过springMVC的DispatcherServlet，而是由/css目录提供服务 --&gt;</span><br><span class="line">&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/css/&quot; /&gt;</span><br></pre></td></tr></table></figure><p>/css/**映射到通过DispatcherServlet进入 ResourceHttpRequestHandler 进行处理，location指定静态资源的位置</p><ul><li>mapping：映射</li><li>location：本地资源路径，注意必须是webapp目录下的路径。</li><li>两个*，它表示映射resources/下所有的URL，包括子路径</li></ul><p>注意：</p><ul><li>一定要配置 &lt;mvc:annotation-driven /&gt; </li><li>配置的location一定要是webapp根目录下才行，如果你将资源目录，放置到webapp/WEB-INF下面的话，则就会访问失败。</li></ul><p>WEB-INF目录作用<br>WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。<br>如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。<br> 当然，你非要放在WEB-INF中，则必须修改resources映射，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/WEB-INF/css/&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>方案三：使用<a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a></strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置注解驱动 --&gt;</span><br><span class="line"> &lt;mvc:annotation-driven /&gt;</span><br><span class="line"> &lt;mvc:default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure><p><a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a>会把 “/**” url,注册到 SimpleUrlHandlerMapping 的 urlMap 中</p><p>把对静态资源的访问由 HandlerMapping 转到 org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler 处理并返回</p><p>DefaultServletHttpRequestHandler 使用就是各个 Servlet 容器自己的默认 Servlet</p><p>补充说明：多个HandlerMapping的执行顺序问题：<br>DefaultAnnotationHandlerMapping 的 order 属性值是：0<br>&lt;mvc:resources/ &gt;自动注册的 SimpleUrlHandlerMapping 的 order 属性值是： 2147483646<br><a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a>自动注册的 SimpleUrlHandlerMapping 的 order 属性值是：2147483647<br>spring 会先执行 order 值比较小的。当访问一个 a.jpg 图片文件时，先通过 DefaultAnnotationHandlerMapping 来找处理器，一定是找不到的，我们没有叫 a.jpg 的 Action。再按 order 值升序找，由于最后一个 SimpleUrlHandlerMapping 是匹配 “/**” 的，所以一定会匹配上，再响应图片。</p><p>最后再说明一下，如何你的 DispatcherServlet 拦截 *.do 这样的 URL，就不存上述问题了。</p><h3 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器"></a>八、拦截器</h3><p><strong>一、什么是拦截器</strong></p><p>java里的拦截器是动态拦截Controller/Action调用的对象。</p><p>它提供了一种机制可以使开发者在一个Controller执行的前后执行的代码，也可以在一个Controller执行前阻止其执行。</p><p>同时也提供了一种可以提取Controller中可重用部分的方式。</p><p>在AOP（Aspect-Oriented Programming）中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。</p><p><strong>二、实现一个拦截器</strong></p><p><strong>1、实现接口HandlerInterceptor创建拦截器（创建相同的拦截器1和2）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller.interceptor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span>  <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行handler之前来执行的</span></span><br><span class="line"><span class="comment">     * 用于用户认证校验、用户权限校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"HandlerInterceptor1...preHandle"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果返回false表示拦截不继续执行handler，如果返回true表示放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行handler返回modelAndView之前来执行</span></span><br><span class="line"><span class="comment">     * 如果需要向页面提供一些公用的数据或配置一些视图信息，使用此方法实现</span></span><br><span class="line"><span class="comment">     * 可以再次配置modelAndView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HandlerInterceptor1...postHandle"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行handler之后执行此方法</span></span><br><span class="line"><span class="comment">     * 如统一日志记录、方法执行性能监控：</span></span><br><span class="line"><span class="comment">     * 在preHandle中设置一个时间点，在afterCompletion设置一个时间，两个时间点的差就是执行时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HandlerInterceptor1...afterCompletion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、在spring-mvc.xml中配置拦截器</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--拦截器 --&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!--多个拦截器,顺序执行 --&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!-- <span class="comment">/**可以拦截路径不管多少层 --&gt;</span></span><br><span class="line"><span class="comment">        &lt;mvc:mapping path="/**" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;bean class="com.qfedu.springmvc.controller.interceptor.HandlerInterceptor1"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mvc:interceptor&gt;</span></span><br><span class="line"><span class="comment">    &lt;mvc:interceptor&gt;</span></span><br><span class="line"><span class="comment">        &lt;mvc:mapping path="/**" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;bean class="com.qfedu.springmvc.controller.interceptor.HandlerInterceptor2"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mvc:interceptor&gt;</span></span><br><span class="line"><span class="comment">&lt;/mvc:interceptors&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试拦截器</strong></p><p><strong>测试1 （1 号和2号都放行）</strong></p><p>测试结果：</p><p>HandlerInterceptor1…preHandle</p><p>HandlerInterceptor2…preHandle</p><p>HandlerInterceptor2…postHandle</p><p>HandlerInterceptor1…postHandle</p><p>HandlerInterceptor2…afterCompletion</p><p>HandlerInterceptor1…afterCompletion</p><p>总结：</p><p>执行preHandle是顺序执行。</p><p>执行postHandle、afterCompletion是倒序执行</p><p><strong>测试2 （1 号放行和2号不放行）</strong></p><p>测试结果：</p><p>HandlerInterceptor1…preHandle</p><p>HandlerInterceptor2…preHandle</p><p>HandlerInterceptor1…afterCompletion</p><p>总结：</p><p>如果preHandle不放行，postHandle、afterCompletion都不执行。</p><p>只要有一个拦截器不放行，controller不能执行完成</p><p><strong>测试3 （1 、2号都不放行）</strong></p><p>测试结果：</p><p>HandlerInterceptor1…preHandle</p><p>总结：</p><p>只有前边的拦截器preHandle方法放行，下边的拦截器的preHandle才执行。</p><p><strong>三、实现用户认证拦截</strong></p><p><strong>1、确认已有login.jsp</strong></p><p><strong>2、确认已有index.jsp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;a href=&quot;login&quot;&gt;登录&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    当前用户：$&#123;sessionScope.username&#125;</span><br><span class="line">    &lt;c:if test=&quot;$&#123;sessionScope.username!=null &#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/logout&quot;&gt;退出&lt;/a&gt;</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h1&gt;欢迎访问&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><strong>3、确认已有LoginController.java</strong></p><p><strong>4、定义拦截器：使用HandlerInterceptorAdapter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller.interceptor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到请求的url</span></span><br><span class="line">        String url = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否是公开地址</span></span><br><span class="line">        <span class="keyword">if</span>(url.indexOf(<span class="string">"login"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//如果是公开 地址则放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户身份在session中是否存在</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String username = (String) session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        <span class="comment">//如果用户身份在session中存在放行</span></span><br><span class="line">        <span class="keyword">if</span>(username != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行到这里拦截，跳转到登录页面，用户进行身份认证</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        response.sendRedirect(contextPath + <span class="string">"/login"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果返回false表示拦截不继续执行handler，如果返回true表示放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、配置拦截器</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">     &lt;mvc:mapping path=<span class="string">"/**"</span> /&gt;</span><br><span class="line">     &lt;mvc:exclude-mapping path=<span class="string">"/css/**"</span>/&gt;</span><br><span class="line">     &lt;bean class="com.qfedu.springmvc.controller.interceptor.LoginInterceptor"&gt;&lt;/bean&gt;</span><br><span class="line"> &lt;/mvc:interceptor&gt;</span><br></pre></td></tr></table></figure><p><strong>面试题</strong></p><p><strong>谈谈过滤器的作用</strong></p><p>过滤器，是在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者 struts的action前统一设置字符集，或者去除掉一些非法字符 </p><p><strong>谈谈拦截器的作用</strong></p><p>拦截器，是在面向切面编程的就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，在你调用方法前打印出字符串（或者做其它业务逻辑的操作），也可以在你调用方法后打印出字符串，甚至在你抛出异常的时候做业务逻辑的操作。</p><p><strong>拦截器和过滤器有什么区别</strong></p><p>拦截器是基于java的反射机制的，而过滤器是基于函数回调。</p><p>拦截器不依赖servlet容器，过滤器依赖与servlet容器。</p><p>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。</p><p>拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。</p><p>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次</p><p>执行顺序：过滤前 – 拦截前 – Action处理 – 拦截后 – 过滤后。个人认为过滤是一个横向的过程，首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页面的处理)；过滤通过后，拦截器将检查用户提交数据的验证，做一些前期的数据处理，接着把处理后的数据发给对应的Action；Action处理完成返回后，拦截器还可以做其他过程(还没想到要做啥)，再向上返回到过滤器的后续操作。</p><h3 id="九、数据的格式化"><a href="#九、数据的格式化" class="headerlink" title="九、数据的格式化"></a>九、数据的格式化</h3><p><strong>一、自动数据类型转换</strong></p><p><strong>1、创建实体模型 Checkout.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.pojo;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退宿管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Checkout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer numberOfBed; <span class="comment">//床位数</span></span><br><span class="line">    <span class="keyword">private</span> Float cost; <span class="comment">//月住宿费</span></span><br><span class="line">    <span class="keyword">private</span> Date checkinDate; <span class="comment">//入住日期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>2、创建页面 checkout/list.jsp，checkout/form.jsp</strong></p><p>list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;退宿管理&lt;/h1&gt;</span><br><span class="line">&lt;div&gt;&lt;a href=&quot;add&quot;&gt;添加&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>form </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;公寓管理&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"save"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="numberOfBed"&gt;床位数&lt;/label&gt;&lt;input type="text" name="numberOfBed" id="numberOfBed"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="cost"&gt;月住宿费&lt;/label&gt;&lt;input type="text" name="cost" id="cost"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="checkinDate"&gt;入住日期&lt;/label&gt;&lt;input type="text" name="checkinDate" id="checkinDate"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;button&gt;保存&lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>3、创建CheckoutController.java</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/checkout"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckoutController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"checkout/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"checkout/form"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Checkout checkout)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(checkout);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、测试</strong> </p><p>发生 400 错误</p><p>特殊类型的数据无法自动格式化</p><p>屏蔽Date和Float</p><p>自定义模型、Integer类型等可以自动转换</p><p><strong>二、使用注解实现数据类型转换</strong></p><p><strong>1、pojo</strong>中添加注解<em>**</em></p><p>使输入类型匹配货币格式：需要在表单中输入 ￥100.100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@NumberFormat(style= NumberFormat.Style.CURRENCY)//货币类型</span><br><span class="line">private Float cost; //月住宿费</span><br></pre></td></tr></table></figure><p>使输入类型匹配货币格式：需要在表单中输入  2018-01-01 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)//日期类型</span><br><span class="line">private Date checkinDate; //入住日期</span><br></pre></td></tr></table></figure><p><strong>2、测试</strong></p><p><strong>三、自定义日期类型转换器</strong></p><p>也可以不使用注解，使用自定义日期类型转换器，转换更灵活</p><p><strong>1、创建DateConverter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller.converter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串转换成日期格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sdf.setLenient(<span class="keyword">false</span>);<span class="comment">//是否宽松解析：默认true</span></span><br><span class="line">            <span class="keyword">return</span> sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、spring-mvc配置文件</strong></p><p>添加自定义转换器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service=<span class="string">"conversionService"</span>  /&gt;</span><br><span class="line">&lt;!-- 配置自定义类型转换器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"conversionService"</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;bean class="com.qfedu.springmvc.controller.converter.DateConverter"&gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>四、自定义类型转换器完成数据添加</strong> </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/62aa6163-8569-4f40-bb38-be3380587841/index_files/2c74dcad-8b83-49c0-a3a2-c6e79fb2fb12.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543926043421.png" alt="1543926043421"></p><p><strong>1、添加list.jsp</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;a href=&quot;add&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;add_batch&quot;&gt;批量添加&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>2、添加add_batch.jsp</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;公寓管理&lt;/h1&gt;</span><br><span class="line">&lt;!-- 将字符串转换为Checkout对象 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"save_batch"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;!-- property1|property2|property3 例如: <span class="number">100</span>|<span class="number">100.25</span>|<span class="number">2018</span>-<span class="number">01</span>-<span class="number">01</span> --&gt;</span><br><span class="line">    退宿信息: &lt;input type=<span class="string">"text"</span> name=<span class="string">"checkout"</span> id=<span class="string">"checkout"</span>&gt;</span><br><span class="line">    &lt;button&gt;保存&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>3、修改CheckoutController.jsp</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add_batch"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addBatch</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"checkout/add_batch"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save_batch"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveBatch</span><span class="params">(Checkout checkout)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*for (Checkout checkout : checkoutList) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(checkout);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    System.out.println(checkout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、创建转换器类</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller.converter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckoutConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Checkout</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Checkout <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        System.out.println(source);</span><br><span class="line">        <span class="keyword">if</span>(source != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            String[] values = source.split(<span class="string">"\\|"</span>);</span><br><span class="line">            <span class="comment">//100|100.25|2018-01-01</span></span><br><span class="line">            <span class="keyword">if</span> (values != <span class="keyword">null</span> &amp;&amp; values.length == <span class="number">3</span>) &#123;</span><br><span class="line">                Integer numberOfBed = Integer.parseInt(values[<span class="number">0</span>]);</span><br><span class="line">                Float cost = Float.parseFloat(values[<span class="number">1</span>]);</span><br><span class="line">                Date checkinDate = <span class="keyword">null</span>;</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sdf.setLenient(<span class="keyword">false</span>);<span class="comment">//是否宽松解析：默认true  例如：33号是否合法</span></span><br><span class="line">                    checkinDate = sdf.parse(values[<span class="number">2</span>]);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Checkout checkout = <span class="keyword">new</span> Checkout();</span><br><span class="line">                checkout.setNumberOfBed(numberOfBed);</span><br><span class="line">                checkout.setCost(cost);</span><br><span class="line">                checkout.setCheckinDate(checkinDate);</span><br><span class="line">                <span class="keyword">return</span> checkout;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、mvc配置文件</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;list&gt;</span><br><span class="line">    &lt;bean class=&quot;com.qfedu.springmvc.controller.converter.DateConverter&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean class=&quot;com.qfedu.springmvc.controller.converter.CheckoutConverter&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/list&gt;</span><br></pre></td></tr></table></figure><p><strong>6、测试</strong> </p><h3 id="十、List和Array的数据类型转换"><a href="#十、List和Array的数据类型转换" class="headerlink" title="十、List和Array的数据类型转换"></a>十、List和Array的数据类型转换</h3><p><strong>一、列表和数组形式的参数</strong></p><p><strong>1、url</strong></p><p><a href="http://localhost:8080/checkout/delete_batch?ids=1&amp;ids=2&amp;ids=3" target="_blank" rel="noopener">http://localhost:8080/checkout/delete_batch?ids=1&amp;ids=2&amp;ids=3</a></p><p><strong>2、CheckoutController.java</strong></p><p>注意：参数前必须添加@RequestParam(value=”ids”)注解，否则参数没有办法赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/delete_batch&quot;)</span><br><span class="line">public String deleteBatch(@RequestParam(value=&quot;ids&quot;) List&lt;Integer&gt; ids)&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(ids);</span><br><span class="line">    return &quot;redirect:list&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/delete_batch1&quot;)</span><br><span class="line">public String deleteBatch1(@RequestParam(value=&quot;ids&quot;) String[] ids)&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(ids[0]);</span><br><span class="line">    System.out.println(ids[1]);</span><br><span class="line">    System.out.println(ids[2]);</span><br><span class="line">    return &quot;redirect:list&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一、全局异常处理"><a href="#十一、全局异常处理" class="headerlink" title="十一、全局异常处理"></a>十一、全局异常处理</h3><p><strong>一、简单异常处理</strong></p><p><strong>1、修改LoginController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/do_login"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isEmpty(username))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"用户名为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isEmpty(password))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密码为空"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>2、LoginController.java中添加异常处理函数</strong></p><p>如果当前controller中发生Exception异常，那么应用程序会自动调用 @ExceptionHandler(Exception.class) 所标注的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ExceptionHandler(Exception.class)</span><br><span class="line">public String handleException()&#123;</span><br><span class="line">    return &quot;error&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、添加WEB-INF/jsp/error.jsp页面：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;错误页面&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><strong>4、测试</strong></p><p><strong>二、自定义异常和捕获精确异常</strong></p><p><strong>1、自定义异常如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringEmptyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringEmptyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringEmptyException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、修改异常抛出的代码：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(username))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> StringEmptyException(<span class="string">"用户名为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(password))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> StringEmptyException(<span class="string">"密码为空"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、在LoginController中添加如下方法，捕获Exception异常</strong></p><p>注意：</p><p>1、如果想要向error页面传递参数，应该使用ModelAndView，不可以使用Map参数</p><p>2、在 @ExceptionHandler方法中加入 Exception 类型的参数，该参数对应捕获的异常对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ExceptionHandler(StringEmptyException.class)</span><br><span class="line">public ModelAndView handleStringEmptyException(StringEmptyException e)&#123;</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    mv.setViewName(&quot;error&quot;);</span><br><span class="line">    mv.addObject(&quot;message&quot;, &quot;错误：&quot; + e.getMessage());</span><br><span class="line">    return mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、error.jsp页面</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;错误页面&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;$&#123;requestScope.message&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>三、全局异常处理</strong></p><p><strong>1、创建全局异常处理类</strong></p><p>包：</p><p>com.qfedu.springmvc.exception.handler</p><p>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.exception.handler;</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(StringEmptyException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleStringEmptyException</span><span class="params">(StringEmptyException e)</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"message"</span>, <span class="string">"全局异常处理错误："</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、在springMVC-servlet.xml中添加如下配置</strong></p><p> 注意：必须有<a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--扫描切面--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.qfedu.springmvc.exception.handler&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><p>注意：应用程序出错后会首先执行LoginController中的如下方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ExceptionHandler(StringEmptyException.class)</span><br><span class="line">public ModelAndView handleStringEmptyException(StringEmptyException e)</span><br></pre></td></tr></table></figure><p>如果没有，只执行LoginController中的如下方法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ExceptionHandler(Exception.class)</span><br><span class="line">public String handleException()&#123;</span><br><span class="line">    return &quot;error&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前Controller中没有任何异常处理方法，则应用程序才会执行全局异常处理部分的代码</p><p>异常处理的优先级由高到低：</p><ul><li>当前Controller的具体异常处理方法 </li><li>当前Controller的父类异常处理方法</li><li>全局异常处理方法 </li></ul><h3 id="十二、SpringMVC文件上传"><a href="#十二、SpringMVC文件上传" class="headerlink" title="十二、SpringMVC文件上传"></a>十二、SpringMVC文件上传</h3><p><strong>一、准备项目</strong></p><p><strong>1、创建新maven项目：springmvc02upload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p><strong>2、加入springmvc和文件上传相关的jar包</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.13.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>3、配置web.xml：</strong>前端控制器、post乱码 </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/473f9a87-5c47-4173-8db9-683288d93dc3/index_files/eb842e0d-7f57-4909-a310-ff4e62028c30.png" alt="img"></p><p> <img src="C:\Users\Administrator\AppData\Local\Temp\1543928401168.png" alt="1543928401168"></p><p><strong>4、log4j.properties</strong></p><p><strong>5、**</strong>创建SpringMVC配置文件**</p><p>spring/spring-mvc.xml：包扫描、视图解析器、注解驱动</p><p>使用文件上传必须开启注解驱动&lt;mvc:annotation-driven /&gt;</p><p><strong>6、jsp文件夹</strong></p><p><strong>7、controller包</strong></p><p><strong>9、配置tomcat</strong></p><p>配置server、deployment</p><p>### </p><p><strong>二、文件上传功能</strong></p><p><strong>1、配置虚拟目录</strong></p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/473f9a87-5c47-4173-8db9-683288d93dc3/index_files/4b7f0190-edc3-4922-86b4-0bc86b456057.png" alt="img"></p><p> <img src="C:\Users\Administrator\AppData\Local\Temp\1543928463478.png" alt="1543928463478"></p><p><strong>2、修改SpringMVC配置文件</strong></p><p>添加如下配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置 MultipartResolver  处理文件上传 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"multipartResolver"</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"defaultEncoding"</span> value=<span class="string">"UTF-8"</span>/&gt; &lt;!-- 默认编码 (ISO-<span class="number">8859</span>-<span class="number">1</span>) --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"maxInMemorySize"</span> value=<span class="string">"10240"</span>/&gt; &lt;!-- 最大内存大小 (<span class="number">10240</span>)--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"uploadTempDir"</span> value=<span class="string">"/upload/"</span>/&gt; &lt;!-- 上传后的目录名 --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"maxUploadSize"</span> value=<span class="string">"-1"</span>/&gt; &lt;!-- 最大文件大小，单位是字节，-<span class="number">1</span>为无限制 --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>3、制作文件上传表单</p><p>在jsp文件夹中创建fileupload.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"fileupload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    描述：&lt;input name=<span class="string">"desc"</span>&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button&gt;上传&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>4、创建控制器</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/form"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">form</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fileupload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"fileupload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileupload</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(<span class="string">"desc"</span>)</span> String desc,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile file,</span></span><br><span class="line"><span class="function">            Map&lt;String, Object&gt; map) <span class="keyword">throws</span> IllegalStateException, IOException </span>&#123;</span><br><span class="line">        System.out.println(desc);</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        <span class="keyword">if</span>(file != <span class="keyword">null</span> &amp;&amp; file.getOriginalFilename() != <span class="keyword">null</span> &amp;&amp; file.getOriginalFilename().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//图片上传成功后，将图片的地址写到数据库</span></span><br><span class="line">            String filePath = <span class="string">"D:\\upload\\"</span>;</span><br><span class="line">            <span class="comment">//上传文件原始名称</span></span><br><span class="line">            String originalFilename = file.getOriginalFilename();</span><br><span class="line">            <span class="comment">//新的图片名称</span></span><br><span class="line">            String uuid = UUID.randomUUID().toString() ;</span><br><span class="line">            String newFileName = uuid + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="comment">//新文件</span></span><br><span class="line">            File uploadFile = <span class="keyword">new</span> File(filePath + newFileName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将内存中的文件写入磁盘</span></span><br><span class="line">            file.transferTo(uploadFile);</span><br><span class="line"></span><br><span class="line">            map.put(<span class="string">"url"</span>, <span class="string">"/upload/"</span> + newFileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、jsp中创建成功页：success.jsp</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;成功&lt;/h3&gt;</span><br><span class="line">&lt;img src=&quot;$&#123;url&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="十三、JSON"><a href="#十三、JSON" class="headerlink" title="十三、JSON"></a>十三、JSON</h3><p><strong>一、准备项目</strong></p><p><strong>1、创建新maven项目：springmvc03json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p><strong>2、加入jar包</strong></p><p>spring-webmvc、jstl、javax.servlet-api、jsp-api、junit</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.13.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>3、配置web.xml：</strong>前端控制器、post乱码 </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/fd5c00f1-27fe-4cf9-8c63-974f790d16b9/index_files/b57a4381-7129-41ab-a0ac-2a99158d26da.png" alt="img"></p><p> <img src="C:\Users\Administrator\AppData\Local\Temp\1543928800897.png" alt="1543928800897"></p><p><strong>4、log4j.properties</strong></p><p><strong>5、**</strong>创建SpringMVC配置文件**</p><p>spring/spring-mvc.xml：包扫描、视图解析器、注解驱动</p><p>使用json必须开启注解驱动&lt;mvc:annotation-driven /&gt;</p><p><strong>6、jsp文件夹</strong></p><p><strong>7、controller包</strong></p><p><strong>9、配置tomcat</strong></p><p>配置server、deployment</p><p>### </p><p><strong>二、校区管理</strong></p><p><strong>1、复制pojo</strong></p><p><strong>2、复制controller</strong></p><p><strong>3、复制jsp</strong></p><p><strong>4、测试：<a href="http://localhost:8080/school/list" target="_blank" rel="noopener">http://localhost:8080/school/list</a></strong></p><p><strong>三、响应JSON</strong></p><p>前后端分离开发中需要JSON数据作为数据传输的格式</p><p><strong>1、引入jar包</strong></p><p>否则会有 <code>No converter found for return value of type</code>异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2、响应json</strong></p><p>修改schoolController中的list方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;School&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设从db中取出了数据列表</span></span><br><span class="line">    List&lt;School&gt; schoolList = <span class="keyword">new</span> ArrayList&lt;School&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        School school = <span class="keyword">new</span> School();</span><br><span class="line">        school.setId(i + <span class="number">1</span>);</span><br><span class="line">        school.setName(<span class="string">"school "</span> + <span class="number">1</span>);</span><br><span class="line">        school.setNumber(<span class="string">"number "</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        schoolList.add(school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> schoolList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>四、请求json</strong></p><p><strong>1、加入js</strong> </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/fd5c00f1-27fe-4cf9-8c63-974f790d16b9/index_files/9f526656-572d-49ba-adad-3ce4154ac6cf.png" alt="img"></p><p> <img src="C:\Users\Administrator\AppData\Local\Temp\1543929247750.png" alt="1543929247750"></p><p><strong>2、spring mvc配置中加入静态资源解析</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 处理静态资源 --&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler /&gt;</span><br></pre></td></tr></table></figure><p><strong>3、表单form.jsp</strong> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;锋舍管理系统&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;校区管理&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"save"</span> method=<span class="string">"post"</span> id=<span class="string">"myform"</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="name"&gt;校区名称&lt;/label&gt;&lt;input type="text" name="name" id="name"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label for="number"&gt;校区编号&lt;/label&gt;&lt;input type="text" name="number" id="number"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;button type="button" onclick="save()"&gt;保存&lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src="$&#123;pageContext.request.contextPath &#125;/lib/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加数据 */</span></span><br><span class="line">    <span class="function">function <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            name: $(<span class="string">'#name'</span>).val(),</span><br><span class="line">            number: $(<span class="string">'#number'</span>).val()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"save"</span>,</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json;charset=utf-8"</span>,</span><br><span class="line">            <span class="comment">//请求json数据,使用json表示商品信息</span></span><br><span class="line">            data:JSON.stringify(data),</span><br><span class="line">            success:function(result)&#123;</span><br><span class="line">                console.log(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>javascript：JSON转换</strong></p><p>var aToStr=JSON.stringify(a); //将对象转成json字符串</p><p>var bToObj=JSON.parse(b); //将json字符串转成对象</p><p> <strong>4、controller</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qfedu.springmvc.pojo.School;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/school"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;School&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设从db中取出了数据列表</span></span><br><span class="line">        List&lt;School&gt; schoolList = <span class="keyword">new</span> ArrayList&lt;School&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            School school = <span class="keyword">new</span> School();</span><br><span class="line">            school.setId(i + <span class="number">1</span>);</span><br><span class="line">            school.setName(<span class="string">"school "</span> + <span class="number">1</span>);</span><br><span class="line">            school.setNumber(<span class="string">"number "</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            schoolList.add(school);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> schoolList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"school/form"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">save</span><span class="params">(@RequestBody School school)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(school);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">        result.put(<span class="string">"msg"</span>, <span class="string">"保存成功"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据返回结果前端提示 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(result.code == 0)&#123;</span><br><span class="line">    alert(result.msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、测试</strong> </p><p><strong>五、返回R对象</strong></p><p><strong>1、定义R对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">R</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> error(<span class="number">500</span>, <span class="string">"未知异常，请联系管理员"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> error(<span class="number">500</span>, msg);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">      R r = <span class="keyword">new</span> R();</span><br><span class="line">      r.put(<span class="string">"code"</span>, code);</span><br><span class="line">      r.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">ok</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">      R r = <span class="keyword">new</span> R();</span><br><span class="line">      r.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">ok</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">      R r = <span class="keyword">new</span> R();</span><br><span class="line">      r.putAll(map);</span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> R();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> R <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.put(key, value);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用R对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(@RequestBody School school)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(school);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="string">"保存成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假设从db中取出了数据列表</span></span><br><span class="line">    List&lt;School&gt; schoolList = <span class="keyword">new</span> ArrayList&lt;School&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        School school = <span class="keyword">new</span> School();</span><br><span class="line">        school.setId(i + <span class="number">1</span>);</span><br><span class="line">        school.setName(<span class="string">"school "</span> + <span class="number">1</span>);</span><br><span class="line">        school.setNumber(<span class="string">"number "</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        schoolList.add(school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">"data"</span>, schoolList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十四、RESTful"><a href="#十四、RESTful" class="headerlink" title="十四、RESTful"></a>十四、RESTful</h3><p><strong>一、REST</strong></p><p>REST：即 Representational State Transfer，（资源）表现层状态转化。是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便， 所以正得到越来越多网站的采用。</p><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动 词：</p><p>GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：</p><ul><li>GET 用来获 取资源</li><li>POST 用来新建资源</li><li>PUT 用来更新资源</li><li>DELETE 用来删除资源</li></ul><p>URL示例 ：</p><ul><li><p>/orders HTTP GET ：得到order列表                  （列表页）</p></li><li><p>/order/1 HTTP GET ：得到 id = 1 的 order         （回显页）</p></li><li>/order/1 HTTP DELETE：删除 id = 1的 order     （执行删除）</li><li>/order/1 HTTP PUT：更新id = 1的 order              （执行更新）</li><li>/order HTTP POST：新增 order                          （执行插入） </li></ul><p>HiddenHttpMethodFilter：浏览器 form 表单只支持 GET 和 POST 请求，不支 持 DELETE、PUT请求 ，</p><p>Spring添加了一个过滤器，可以将这些请求转换 为标准的 http 方法，支持 GET、POST、PUT 和 DELETE 请求。</p><p><strong>二、使用result实现CRUD</strong></p><p>1、在web.xml中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> 配置 org.springframework.web.filter.HiddenHttpMethodFilter: 可以把 POST 请求转为 DELETE 或  PUT 请求</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">HiddenHttpMethodFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">HiddenHttpMethodFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、controller</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolController2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Rest 风格的 URL.</span></span><br><span class="line"><span class="comment">     * 以 CRUD 为例:</span></span><br><span class="line"><span class="comment">     * 列表: /schools GET</span></span><br><span class="line"><span class="comment">     * 新增: /school POST</span></span><br><span class="line"><span class="comment">     * 修改: /school/1 PUT        update?id=1</span></span><br><span class="line"><span class="comment">     * 获取: /school/1 GET        get?id=1</span></span><br><span class="line"><span class="comment">     * 删除: /school/1 DELETE     delete?id=1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/schools"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设从db中取出了数据列表</span></span><br><span class="line">        List&lt;School&gt; schoolList = <span class="keyword">new</span> ArrayList&lt;School&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            School school = <span class="keyword">new</span> School();</span><br><span class="line">            school.setId(i + <span class="number">1</span>);</span><br><span class="line">            school.setName(<span class="string">"school "</span> + <span class="number">1</span>);</span><br><span class="line">            school.setNumber(<span class="string">"number "</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            schoolList.add(school);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">"data"</span>, schoolList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/school"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(@RequestBody School school)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(school);</span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/school/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">update</span><span class="params">(@RequestBody School school, @PathVariable Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(school);</span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">"更新成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/school/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">view</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"id = "</span> + id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/school/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"id = "</span> + id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、使用postman测试</strong></p><p><strong>4、模拟持久层数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qfedu.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qfedu.springmvc.dto.R;</span><br><span class="line"><span class="keyword">import</span> com.qfedu.springmvc.pojo.School;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolController3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, School&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, School&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Integer id = i + <span class="number">1</span>;</span><br><span class="line">            School school = <span class="keyword">new</span> School();</span><br><span class="line">            school.setId(id);</span><br><span class="line">            school.setName(<span class="string">"校区"</span> + id);</span><br><span class="line">            school.setNumber(<span class="string">"编号"</span> + id);</span><br><span class="line">            map.put(id, school);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/schools"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;School&gt; schoolList = <span class="keyword">new</span> ArrayList&lt;School&gt;(map.values());</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">"data"</span>, schoolList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原子变量，方便生成自增序列</span></span><br><span class="line">    <span class="keyword">static</span> AtomicInteger seq = <span class="keyword">new</span> AtomicInteger(<span class="number">10</span>);</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/school"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(@RequestBody School school)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟数据库生成自增长主键</span></span><br><span class="line">        Integer id = seq.incrementAndGet();</span><br><span class="line">        school.setId(id);</span><br><span class="line">        map.put(id, school);</span><br><span class="line">        <span class="comment">//将携带主键的school对象作为响应返回</span></span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">"保存成功"</span>).put(<span class="string">"school"</span>, school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/school/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">update</span><span class="params">(@RequestBody School school, @PathVariable Integer id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从持久层中获取数据</span></span><br><span class="line">        School school1 = map.get(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据远程传递过来的参数修改数据</span></span><br><span class="line">        school1.setName(school.getName());</span><br><span class="line">        school1.setNumber(school.getNumber());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新持久层的数据</span></span><br><span class="line">        map.put(id, school);</span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">"更新成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/school/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">view</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        School school = map.get(id);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">"school"</span>, school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/school/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">        <span class="keyword">return</span> R.ok(<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h1&gt;&lt;h3 id=&quot;一、springmvc框架&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="框架" scheme="https://zymmx.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="https://zymmx.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring详解</title>
    <link href="https://zymmx.github.io/2018/12/04/Spring/"/>
    <id>https://zymmx.github.io/2018/12/04/Spring/</id>
    <published>2018-12-04T10:33:02.597Z</published>
    <updated>2018-12-04T11:12:45.798Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h3 id="一、什么是spring"><a href="#一、什么是spring" class="headerlink" title="一、什么是spring"></a>一、什么是spring</h3><p>Spring框架，由Rod Johnson开发</p><p>Spring是一个非常活跃的开源框架, 基于IOC和AOP来构架多层JavaEE系统，以帮助分离项目组件之间的依赖关系</p><h3 id="二、核心概念"><a href="#二、核心概念" class="headerlink" title="二、核心概念"></a><strong>二、核心概念</strong></h3><p>IoC：Inversion of Control 控制反转</p><p>DI：Dependency Injection,依赖注入</p><p>AOP：Aspect Oriented Programming 面向切面编程</p><h3 id="三、Spring的组成"><a href="#三、Spring的组成" class="headerlink" title="三、Spring的组成"></a>三、Spring的组成</h3><p>Spring框架包含的功能大约由20个模块组成。这些模块按组可分为核心容器、数据访问/集成，Web，AOP(面向切面编程)、设备、消息和测试</p><p>核心模块：Beans、Core、Context、SpEL对应四个初始化项目时需要的四个核心包</p><h3 id="四、模块介绍"><a href="#四、模块介绍" class="headerlink" title="四、模块介绍"></a><strong>四、模块介绍</strong></h3><table><thead><tr><th>GroupId</th><th>ArtifactId</th><th>说明</th></tr></thead><tbody><tr><td>org.springframework</td><td>spring-beans</td><td>Beans 支持，包含 Groovy</td></tr><tr><td>org.springframework</td><td>spring-aop</td><td>基于代理的AOP支持</td></tr><tr><td>org.springframework</td><td>spring-aspects</td><td>基于AspectJ 的切面</td></tr><tr><td>org.springframework</td><td>spring-context</td><td>应用上下文运行时，包括调度和远程抽象</td></tr><tr><td>org.springframework</td><td>spring-context-support</td><td>支持将常见的第三方类库集成到 Spring 应用上下文</td></tr><tr><td>org.springframework</td><td>spring-core</td><td>其他模块所依赖的核心模块</td></tr><tr><td>org.springframework</td><td>spring-expression</td><td>Spring 表达式语言，SpEL</td></tr><tr><td>org.springframework</td><td>spring-instrument</td><td>JVM 引导的仪表（监测器）代理</td></tr><tr><td>org.springframework</td><td>spring-instrument-tomcat</td><td>Tomcat 的仪表（监测器）代理</td></tr><tr><td>org.springframework</td><td>spring-jdbc</td><td>支持包括数据源设置和 JDBC 访问支持</td></tr><tr><td>org.springframework</td><td>spring-jms</td><td>支持包括发送/接收JMS消息的助手类</td></tr><tr><td>org.springframework</td><td>spring-messaging</td><td>对消息架构和协议的支持</td></tr><tr><td>org.springframework</td><td>spring-orm</td><td>对象/关系映射，包括对 JPA 和 Hibernate 的支持</td></tr><tr><td>org.springframework</td><td>spring-oxm</td><td>对象/XML 映射（Object/XML Mapping，OXM）</td></tr><tr><td>org.springframework</td><td>spring-test</td><td>单元测试和集成测试支持组件</td></tr><tr><td>org.springframework</td><td>spring-tx</td><td>事务基础组件，包括对 DAO 的支持及 JCA 的集成</td></tr><tr><td>org.springframework</td><td>spring-web</td><td>web支持包，包括客户端及web远程调用</td></tr><tr><td>org.springframework</td><td>spring-webmvc</td><td>REST web 服务及 web 应用的 MVC 实现</td></tr><tr><td>org.springframework</td><td>spring-webmvc-portlet</td><td>用于 Portlet 环境的MVC实现</td></tr><tr><td>org.springframework</td><td>spring-websocket</td><td>WebSocket 和 SockJS 实现，包括对 STOMP 的支持</td></tr></tbody></table><h3 id="五、模块详解"><a href="#五、模块详解" class="headerlink" title="五、模块详解"></a><strong>五、模块详解</strong></h3><p><strong>1、core - 核心模块</strong></p><ul><li>spring-core：依赖注入IoC与DI的最基本实现</li><li>spring-beans：Bean工厂与bean的装配</li><li>spring-context：spring的context上下文即IoC容器</li><li>spring-context-support</li><li>spring-expression：spring表达式语言</li></ul><p><strong>核心模块说明</strong></p><p>（1）spring-core</p><p>这个jar文件包含Spring框架基本的核心工具类，Spring其它组件要都要使用到这个包里的类，是其它组件的基本核心，当然你也可以在自己的应用系统中使用这些工具类</p><p>（2）spring-beans</p><p>这个jar文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。如果应用只需基本的IoC/DI支持，引入spring-core.jar及spring- beans.jar文件就可以了</p><p>（3）spring-context</p><p>Spring核心提供了大量扩展，这样使得由 Core 和 Beans 提供的基础功能增强：这意味着Spring 工程能以框架模式访问对象。Context 模块继承了Beans 模块的特性并增加了对国际化（例如资源绑定）、事件传播、资源加载和context 透明化（例如 Servlet container）。同时，也支持JAVA EE 特性，例如 EJB、 JMX 和 基本的远程访问。Context 模块的关键是 ApplicationContext 接口。spring-context-support 则提供了对第三方库集成到 Spring-context 的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</p><p>（4）spring-expression</p><p>为在运行时查询和操作对象图提供了强大的表达式语言。它是JSP2.1规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投影、选择以及聚合等。</p><p><strong>2、Data Access/Integration - 数据访问与集成</strong></p><p>数据访问与集成层包含 JDBC、ORM、OXM、JMS和事务模块。</p><p><strong>详细说明</strong></p><p>（1）spring-jdbc</p><p>提供了 JDBC抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</p><p>（2）spring-tx</p><p>支持编程式事务和声明式事务，可用于实现了特定接口的类和所有的 POJO 对象。编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细。</p><p>（3）spring-orm</p><p>提供了对流行的对象关系映射 API的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring 的其它功能整合，比如前面提及的事务管理。</p><p>（4）spring-oxm </p><p>模块提供了对 OXM 实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。</p><p>（5）spring-jms</p><p>模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了 spring-messaging 模块</p><p><strong>3、Web</strong></p><p>Web 层包括 spring-web、spring-webmvc、spring-websocket、spring-webmvc-portlet 等模块。</p><p><strong>详细说明</strong></p><p>（1）spring-web</p><p>提供面向 web 的基本功能和面向 web 的应用上下文，比如 multipart 文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分</p><p>（2）spring-webmvc</p><p>为 web 应用提供了模型视图控制（MVC）和 REST Web 服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成</p><p>（3）spring-webmvc-portlet</p><p>（即Web-Portlet模块）提供了用于 Portlet 环境的 MVC 实现，并反映了 pring-webmvc 模块的功能</p><p><strong>4、AOP</strong></p><p>（1）spring-aop</p><p>提供了面向切面编程（AOP）的实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦。使用源码级的元数据。</p><p>（2）spring-aspects</p><p>提供了对 AspectJ 的集成</p><p><strong>5、Instrumentation</strong></p><p>（1）spring-instrument</p><p>模块提供了对检测类的支持和用于特定的应用服务器的类加载器的实现。</p><p>（2）spring-instrument-tomcat</p><p>模块包含了用于 Tomcat 的Spring 检测代理。</p><p><strong>6、Messaging - 消息处理</strong></p><p>spring-messaging 模块</p><p>从 Spring 4 开始集成，从一些 Spring 集成项目的关键抽象中提取出来的。这些项目包括 Message、MessageChannel、MessageHandler 和其它服务于消息处理的项目。这个模块也包含一系列的注解用于映射消息到方法</p><p><strong>7、Test</strong></p><p>spring-test 模块</p><p>通过 JUnit 和 TestNG 组件支持单元测试和集成测试。它提供了一致性地加载和缓存 Spring 上下文，也提供了用于单独测试代码的模拟对象（mock object）</p><h3 id="六、入门程序和IOC"><a href="#六、入门程序和IOC" class="headerlink" title="六、入门程序和IOC"></a>六、入门程序和IOC</h3><p><strong>1、下载</strong></p><p>Spring框架的主页：<a href="http://spring.io/" target="_blank" rel="noopener">http://spring.io/</a></p><p>下载地址：<a href="http://repo.spring.io/release/org/springframework/spring" target="_blank" rel="noopener">http://repo.spring.io/release/org/springframework/spring</a></p><p><strong>2、创建项目</strong></p><p>spring-01-IOC</p><p>java项目或maven项目</p><p><strong>3、引入jar包</strong></p><p>核心包加日志包</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/5dade8d7-9a79-463a-9e70-ba524cf55878/index_files/00b71379-4ec0-4dd7-9cc3-e2405a784d2d.png" alt="img"> </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/5dade8d7-9a79-463a-9e70-ba524cf55878/index_files/a6374126-9990-407e-b0ac-4a13da93f96d.jpg" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543914559520.png" alt="1543914559520"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543914568281.png" alt="1543914568281"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pom:</span><br><span class="line">&lt;!-- spring --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- 日志处理 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p> <strong>4、引入log4j.properties</strong></p><p>放入源码目录（maven项目放在src/mian/resources下）</p><p> <strong>5、创建一个类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.bean;</span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    public Person() &#123;</span><br><span class="line">        super();</span><br><span class="line">        System.out.println(&quot;Person的空参构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //getter、setter、空参构造、toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、创建配置文件</strong></p><p>配置文件的位置和名字可以自定义，但是建议放在src下，名字为applicationContext.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>也可以安装spring的sts插件 </p><p><strong>7、配置bean对象</strong></p><p>在配置文件中添加bean的配置，让spring管理对象的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>bean元素：素描述需要spring容器管理的对象。</li><li>class属性：被管理对象的完整类名。</li><li>name属性：给被管理的对象起个名字，根据该名称获得对象。</li></ul><p><strong>8、测试</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.bean;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">public class IOCTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testCreatePerson()&#123;</span><br><span class="line">        </span><br><span class="line">        //1、创建容器对象</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        //2、在容器中找到person对象</span><br><span class="line">        Person p = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line">        //3、打印</span><br><span class="line">        System.out.println(p);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、什么是IoC"><a href="#七、什么是IoC" class="headerlink" title="七、什么是IoC"></a>七、什么是IoC</h3><p><strong>IoC-控制反转</strong></p><p>IoC是 Inverse of Control 的简写，意思是控制反转。是降低对象之间的耦合关系的设计思想。</p><p>通过IOC，开发人员不需要关心对象的创建过程，交给Spring容器完成。具体的过程是，程序读取Spring 配置文件，获取需要创建的 bean 对象，</p><p>通过反射机制创建对象的实例。</p><p>缺点：对象是通过反射机制实例化出来的，因此对系统的性能有一定的影响。</p><p><strong>DI-依赖注入</strong></p><p>Dependency Injection，说的是创建对象实例时，同时为这个对象注入它所依赖的属性。相当于把每个bean与bean之间的关系交给容器管理。而这个容器就是spring。</p><p>例如我们通常在 Service 层注入它所依赖的 Dao 层的实例；在 Controller层注入 Service层的实例。</p><p><strong>IoC和DI</strong></p><p>IoC的别名,2004年，Martin Fowler探讨了同一个问题，既然IoC是控制反转，那么到底是“哪些方面的控制被反转了呢？”，经过详细地分析和论证后，他得出了答案：“获得依赖对象的过程被反转了”。控制被反转之后，获得依赖对象的过程由自身管理对象变为由IoC容器主动注入。于是，他给“控制反转”取了一个更合适的名字叫做“依赖注入（Dependency Injection，DI）”。他的这个答案，实际上给出了实现IoC的方法：注入。</p><p>所谓依赖注入，就是由IoC容器在运行期间，动态地将某种依赖关系注入到对象之中。</p><p>所以，依赖注入（DI）和控制反转（IoC）是从不同的角度描述的同一件事情，就是指通过引入IoC容器，利用依赖关系注入的方式，实现对象之间的解耦</p><h3 id="八、对象创建的细节"><a href="#八、对象创建的细节" class="headerlink" title="八、对象创建的细节"></a>八、对象创建的细节</h3><p>applicationContext-bean.xml</p><p>BeanTest.java</p><p><strong>一、bean元素的id和name</strong> </p><p>bean元素既可以定义name属性，也可以定义id属性</p><p>name属性：可以重复，可以使用特殊字符。<br>id属性：作用与name属性一样。名称不可重复，不能使用特殊字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;person1&quot; name=&quot;person2&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>以下两种方式都可以获取到上面的Person对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void testCreatePerson()&#123;</span><br><span class="line">      ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-bean.xml&quot;);</span><br><span class="line">      Person p1 = (Person)context.getBean(&quot;person1&quot;);//方式1</span><br><span class="line">      Person p2= (Person)context.getBean(&quot;person2&quot;);//方式2</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>二、创建对象的工厂</strong> </p><p>1、FileSystemXmlApplicationContext：从硬盘绝对路径下加载配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testBeanFactory1()&#123;</span><br><span class="line">    ApplicationContext context = new FileSystemXmlApplicationContext(&quot;D:\\workspace\\spring-01-IOC\\src\\applicationContext-bean.xml&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、ClassPathXmlApplicationContext：丛类路径下加载配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testBeanFactory2()&#123;</span><br><span class="line">       ApplicationContext context2 = new ClassPathXmlApplicationContext(&quot;applicationContextbean-bean.xml&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过上面的测试也可以发现，默认情况下，每次容器启动时就会创建容器中配置的所有对象 </p><p><strong>三、单例和多例</strong></p><p>为bean配置scope属性</p><p>1、scope=”singleton”，单例， 默认值， 适用实际开发中的绝大部分情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person&quot; scope=&quot;singleton&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testScope()&#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-bean.xml&quot;);</span><br><span class="line">        Person p1 = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line">        Person p2 = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line">        System.out.println(p1==p2); //true</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、scope=”prototype”，多例，适用于struts2中的action的配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person&quot; scope=&quot;prototype&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void testScope()&#123;</span><br><span class="line">      ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-bean.xml&quot;);</span><br><span class="line">      Person p1 = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line">      Person p2 = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line">      System.out.println(p1==p2); //false</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3、scope=<em>“request”</em>（了解）：web环境下，对象与request生命周期一致。很少用。</p><p>4、scope=<em>“session”</em>（了解）：web环境下，对象与session生命周期一致。很少用。</p><p><strong>四、对象创建的时机</strong></p><p>scope=”singleton” 在启动容器时， 创建bean，且整个应用只有一个。</p><p>scope=”prototype” 在用到对象的时候，才创建对象。每次创建都是新的对象。</p><p><strong>五、是否延迟创建</strong> </p><p>注意：只对单例有效，设置scope=”singleton”时测试</p><p>lazy-init=”false” 默认值，不延迟创建，即在启动时候就创建对象</p><p>lazy-init=”true” 延迟初始化， 在用到对象的时候才创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person&quot; scope=&quot;singleton&quot; lazy-init=&quot;true&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"> public void testLazy()&#123;</span><br><span class="line">     ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-bean.xml&quot;);</span><br><span class="line">     //lazy-init=&quot;true&quot;，则直到执行下面的语句对象才会被创建</span><br><span class="line">     Person p = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>六、初始化/销毁</strong> </p><p>init-method=”init” 对应对象的init()方法，在对象创建之后执行</p><p>destroy-method=”destroy” 调用容器对象的destroy()方法时候执行</p><p>在Person类中添加初始化方法和销毁方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void init() &#123;</span><br><span class="line">        System.out.println(&quot;Person的初始化方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;Person的销毁方法&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置bean： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><p>注意：单实例时测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testInitAndDestroy()&#123;</span><br><span class="line">       AbstractApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-bean.xml&quot;);</span><br><span class="line">       </span><br><span class="line">       //或者手动调用销毁方法</span><br><span class="line">       context.destroy();</span><br><span class="line">       //或者关闭容器，触发销毁方法</span><br><span class="line">       //context.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/e7fa973f-0144-49fd-9631-6fd2d13fea71/index_files/ec75eee5-06ee-42db-a4c9-fa84f1459763.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543915535231.png" alt="1543915535231"></p><h3 id="九、对象创建的几种方式"><a href="#九、对象创建的几种方式" class="headerlink" title="九、对象创建的几种方式"></a>九、对象创建的几种方式</h3><p>applicationContext-create.xml</p><p>CreateTest.java</p><p><strong>一、无参构造函数</strong></p><p>前面的方式调用了类的无参构造函数</p><p><strong>二、有参构造函数</strong></p><p>参考后面章节的：对象的依赖-属性注入（构造函数注入）</p><p><strong>三、静态工厂方法</strong></p><p>创建工厂类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.factory;</span><br><span class="line">import name.yaohuan.spring.bean.Person;</span><br><span class="line">public class PersonFactory &#123;</span><br><span class="line">    public static Person createPerson1()&#123;</span><br><span class="line">        System.out.println(&quot;静态工厂创建Person&quot;);</span><br><span class="line">        return new Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 静态工厂创建 --&gt;</span><br><span class="line">&lt;bean name=&quot;person1&quot; class=&quot;name.yaohuan.spring.factory.PersonFactory&quot; factory-method=&quot;createPerson1&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><p>容器初始化的时候同时调用静态工厂初始化了对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testCreatePerson()&#123;</span><br><span class="line">       ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-create.xml&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>四、实例工厂</strong></p><p> 在上一步的工厂类中添加实例工厂方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Person createPerson2()&#123;</span><br><span class="line">    System.out.println(&quot;实例工厂创建Person&quot;);</span><br><span class="line">    return new Person();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 实例工厂创建 --&gt;</span><br><span class="line">&lt;bean name=&quot;personFactory&quot; class=&quot;name.yaohuan.spring.factory.PersonFactory&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean name=&quot;person2&quot; factory-bean=&quot;personFactory&quot; factory-method=&quot;createPerson2&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><p>使用上一步的测试用例即可</p><h3 id="十、对象的依赖关系-依赖注入"><a href="#十、对象的依赖关系-依赖注入" class="headerlink" title="十、对象的依赖关系-依赖注入"></a>十、对象的依赖关系-依赖注入</h3><p>applicationContext-injection.xmlInjectionTest.java</p><p><strong>一、set方法注入</strong></p><p><strong>1、值类型注入使用 value</strong></p><p>配置bean：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- set注入 --&gt;</span><br><span class="line">&lt;bean name=&quot;person1&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;helen&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testProperty()&#123;</span><br><span class="line">        </span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-injection.xml&quot;);</span><br><span class="line">        Person p = (Person)context.getBean(&quot;person1&quot;);</span><br><span class="line">        System.out.println(p);    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在Person中添加 toString() 方法</p><p>结果：</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/37d93ce2-a433-4324-9dc8-e7b5e4713b8d/index_files/fdc348b9-4aa6-43af-8896-5b14d184d1c4.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543915963624.png" alt="1543915963624"></p><p><strong>2、引用类型注入使用</strong> <strong>ref</strong></p><p>创建Car.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.bean;</span><br><span class="line">public class Car &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String color;</span><br><span class="line">    </span><br><span class="line">    public Car() &#123;</span><br><span class="line">        super();</span><br><span class="line">        System.out.println(&quot;Car的空参构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //getter、setter、toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Person中引用Car： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Car car;</span><br><span class="line">    //getter、setter、toString等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person1&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;name&quot; value=&quot;helen&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;car&quot; ref=&quot;car&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;bean name=&quot;car&quot; class=&quot;name.yaohuan.spring.bean.Car&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;name&quot; value=&quot;MINI&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;color&quot; value=&quot;灰色&quot; &gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testProperty()&#123;</span><br><span class="line">       </span><br><span class="line">       ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-injection.xml&quot;);</span><br><span class="line">       Person p = (Person)context.getBean(&quot;person1&quot;);</span><br><span class="line">       System.out.println(p);    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>测试：使用上一步的测试用例即可 </p><p><strong>二、构造函数注入</strong></p><p><strong>1、name属性：按参数名注入</strong></p><p>在Person中创建构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Person(String name, Car car) &#123;</span><br><span class="line">        super();</span><br><span class="line">        System.out.println(&quot;Person(String name, Car car)&quot;);</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.car = car;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置bean：使用 <code>name</code> 属性指定参数名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person2&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;</span><br><span class="line">     &lt;constructor-arg name=&quot;name&quot; value=&quot;helen&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">     &lt;constructor-arg name=&quot;car&quot; ref=&quot;car&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testConstuctor()&#123;</span><br><span class="line">       ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-injection.xml&quot;);</span><br><span class="line">       Person p = (Person)context.getBean(&quot;person2&quot;);</span><br><span class="line">       System.out.println(p);    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果： </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/37d93ce2-a433-4324-9dc8-e7b5e4713b8d/index_files/52ffcd7d-a31d-4b4c-af74-ede166a39d39.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543916110050.png" alt="1543916110050"></p><p><strong>2、index属性：按参数索引注入</strong></p><p>参数名一致，但位置不一致时，使用 index</p><p>例如以下两个构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public Person(String name, Car car) &#123;</span><br><span class="line">       super();</span><br><span class="line">       System.out.println(&quot;Person(String name, Car car)&quot;);</span><br><span class="line">       this.name = name;</span><br><span class="line">       this.car = car;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public Person(Car car, String name) &#123;</span><br><span class="line">       super();</span><br><span class="line">       System.out.println(&quot;Person(Car car, String name)&quot;);</span><br><span class="line">       this.name = name;</span><br><span class="line">       this.car = car;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>配置bean，使用index确定调用哪个构造函数： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person2&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;</span><br><span class="line">      &lt;constructor-arg name=&quot;name&quot; value=&quot;helen&quot; index=&quot;0&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">      &lt;constructor-arg name=&quot;car&quot; ref=&quot;car&quot; index=&quot;1&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>重新执行第一步的测试用例</p><p>结果：</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/37d93ce2-a433-4324-9dc8-e7b5e4713b8d/index_files/52ffcd7d-a31d-4b4c-af74-ede166a39d39.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543916151374.png" alt="1543916151374"></p><p><strong>3、type属性：按参数类型注入</strong></p><p>参数名和位置一致，但类型不一致时，使用type</p><p>例如以下两个构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public Person(Car car, String name) &#123;</span><br><span class="line">       super();</span><br><span class="line">       System.out.println(&quot;Person(Car car, String name)&quot;);</span><br><span class="line">       this.name = name;</span><br><span class="line">       this.car = car;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public Person(Car car, Integer name) &#123;</span><br><span class="line">       super();</span><br><span class="line">       System.out.println(&quot;Person(Car car, Integer name)&quot;);</span><br><span class="line">       this.name = name + &quot;&quot;;</span><br><span class="line">       this.car = car;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>配置bean，使用type指定参数的类型 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person2&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;&gt;</span><br><span class="line">       &lt;constructor-arg name=&quot;name&quot; value=&quot;988&quot; type=&quot;java.lang.Integer&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">       &lt;constructor-arg name=&quot;car&quot; ref=&quot;car&quot; &gt;&lt;/constructor-arg&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>重新执行第一步的测试用例</p><p>结果：</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/37d93ce2-a433-4324-9dc8-e7b5e4713b8d/index_files/91a870d0-c2aa-4e9a-a6ff-addb069b5cb1.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543916191914.png" alt="1543916191914"></p><p><strong>三、p名称空间注入</strong></p><p>导入p名称空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><p>使用 p:属性名 完成注入，走set方法</p><ul><li><p>值类型：p:属性名=”值”</p></li><li><p>对象类型：p:属性名-ref=”bean名称”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person3&quot; class=&quot;name.yaohuan.spring.bean.Person&quot; </span><br><span class="line">      p:name=&quot;helen&quot; p:age=&quot;18&quot; p:car-ref=&quot;car&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void testP()&#123;</span><br><span class="line">       ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-injection.xml&quot;);</span><br><span class="line">       Person p = (Person)context.getBean(&quot;person3&quot;);</span><br><span class="line">       System.out.println(p);    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果： </p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/37d93ce2-a433-4324-9dc8-e7b5e4713b8d/index_files/ad12a327-8c18-4d38-a958-7464524252ae.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543916271031.png" alt="1543916271031"></p><p><strong>四、spel注入</strong></p><p>spring Expression Language：spring表达式语言</p><p>bean配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;person4&quot; class=&quot;name.yaohuan.spring.bean.Person&quot; &gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;#&#123;person1.name&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot; value=&quot;#&#123;person1.age&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;car&quot; ref=&quot;car&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testSpel()&#123;</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-injection.xml&quot;);</span><br><span class="line">        Person p = (Person)context.getBean(&quot;person4&quot;);</span><br><span class="line">        System.out.println(p);    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/37d93ce2-a433-4324-9dc8-e7b5e4713b8d/index_files/26bdb133-7d0e-493f-bb3d-980ee044b544.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543916315901.png" alt="1543916315901"></p><h3 id="十一、对象的依赖关系-复杂类型注入"><a href="#十一、对象的依赖关系-复杂类型注入" class="headerlink" title="十一、对象的依赖关系-复杂类型注入"></a>十一、对象的依赖关系-复杂类型注入</h3><p>applicationContext-collection.xml</p><p>CollectionTest.java</p><p>实体类： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.bean;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">public class CollectionBean &#123;</span><br><span class="line">    private Object[] arr;//数组类型注入</span><br><span class="line">    private List list;//list/set 类型注入</span><br><span class="line">    private Map map;//map类型注入</span><br><span class="line">    private Properties prop;//properties类型注入</span><br><span class="line">    //getter、setter、空参构造、toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一、数组注入</strong></p><p>1、如果数组中只准备注入一个 值 | 对象，直接使用 value | ref 即可 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;car&quot; class=&quot;name.yaohuan.spring.bean.Car&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;name&quot; value=&quot;MINI&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;color&quot; value=&quot;灰色&quot; &gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;!-- 数组注入 --&gt;</span><br><span class="line">   &lt;bean name=&quot;cb1&quot; class=&quot;name.yaohuan.spring.bean.CollectionBean&quot; &gt;</span><br><span class="line">       &lt;!-- 如果数组中只准备注入一个值(对象)，直接使用value|ref即可 --&gt;</span><br><span class="line">       &lt;property name=&quot;arr&quot; value=&quot;helen&quot; &gt;&lt;/property&gt;</span><br><span class="line">       &lt;!-- &lt;property name=&quot;arr&quot; ref=&quot;car&quot; &gt;&lt;/property&gt; --&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>2、多个数组元素 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;cb2&quot; class=&quot;name.yaohuan.spring.bean.CollectionBean&quot; &gt;</span><br><span class="line">      &lt;!-- array注入,多个元素注入 --&gt;</span><br><span class="line">      &lt;property name=&quot;arr&quot;&gt;</span><br><span class="line">          &lt;array&gt;</span><br><span class="line">              &lt;value&gt;tom&lt;/value&gt;</span><br><span class="line">              &lt;value&gt;helen&lt;/value&gt;</span><br><span class="line">              &lt;ref bean=&quot;car&quot; /&gt;</span><br><span class="line">          &lt;/array&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>二、List注入</strong></p><p>1、如果集合中只准备注入一个值(对象),直接使用value|ref即可 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;cb3&quot; class=&quot;name.yaohuan.spring.bean.CollectionBean&quot; &gt;</span><br><span class="line">       &lt;!-- 如果List中只准备注入一个值(对象),直接使用value|ref即可 --&gt;</span><br><span class="line">       &lt;property name=&quot;list&quot; value=&quot;helen&quot; &gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>2、多个集合元素 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;cb4&quot; class=&quot;name.yaohuan.spring.bean.CollectionBean&quot; &gt;</span><br><span class="line">        &lt;property name=&quot;list&quot;  &gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;helen&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;rose&lt;/value&gt;</span><br><span class="line">                &lt;ref bean=&quot;car&quot; /&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>三、Map注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;cb5&quot; class=&quot;name.yaohuan.spring.bean.CollectionBean&quot; &gt;</span><br><span class="line">       &lt;property name=&quot;map&quot;  &gt;</span><br><span class="line">           &lt;map&gt;</span><br><span class="line">               &lt;entry key=&quot;username&quot; value=&quot;root&quot; &gt;&lt;/entry&gt;</span><br><span class="line">               &lt;entry key=&quot;car&quot; value-ref=&quot;car&quot;  &gt;&lt;/entry&gt;</span><br><span class="line">               &lt;entry key-ref=&quot;car&quot; value-ref=&quot;car&quot;  &gt;&lt;/entry&gt;</span><br><span class="line">           &lt;/map&gt; </span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><strong>四、properties类型注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;cb6&quot; class=&quot;name.yaohuan.spring.bean.CollectionBean&quot; &gt;</span><br><span class="line">      &lt;property name=&quot;prop&quot;&gt;</span><br><span class="line">          &lt;props&gt;</span><br><span class="line">              &lt;prop key=&quot;driverClass&quot;&gt;com.jdbc.mysql.Driver&lt;/prop&gt;</span><br><span class="line">              &lt;prop key=&quot;userName&quot;&gt;root&lt;/prop&gt;</span><br><span class="line">              &lt;prop key=&quot;password&quot;&gt;123456&lt;/prop&gt;</span><br><span class="line">          &lt;/props&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="十二、使用注解"><a href="#十二、使用注解" class="headerlink" title="十二、使用注解"></a>十二、使用注解</h3><p><strong>1、创建项目</strong></p><p>spring-02-annotation</p><p><strong>2、引入jar包</strong></p><p>核心包加日志包（和之前一样）</p><p>加 spring-aop 包</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/6cb3f82b-e283-418f-86a4-6fa802fd138b/index_files/1506670153213.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543916664046.png" alt="1543916664046"></p><p>maven项目无需添加新包，context依赖了aop。完整的依赖如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 日志处理 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>3、引入日志配置</strong></p><p>log4j.properties</p><p><strong>4、创建实体类</strong></p><p>Person.java：保留基本空参构造方法和getter、setter即可</p><p>Car.java</p><p><strong>5、创建applicationContext.xml</strong></p><p>引入新的名称空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>6、配置注解扫描</strong></p><p>指定扫描name.yaohuan.spring.bean下的所有类中的注解。</p><p>扫描包时，会扫描所有子孙包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;name.yaohuan.spring.bean&quot;&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p><strong>7、在类中使用注解</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;person&quot;)</span><br><span class="line">//&lt;bean name=&quot;person&quot; class=&quot;name.yaohuan.spring.bean.Person&quot;  /&gt;</span><br><span class="line">public class Person &#123;</span><br></pre></td></tr></table></figure><p><strong>8、测试</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class AnnotationTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testCreatePerson()&#123;</span><br><span class="line">        </span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        Person p = (Person)context.getBean(&quot;person&quot;);</span><br><span class="line">        System.out.println(p);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9、其他类的头部可用的注解</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Service(&quot;person&quot;) // service层</span><br><span class="line">@Controller(&quot;person&quot;) // controller层</span><br><span class="line">@Repository(&quot;person&quot;)// dao层</span><br></pre></td></tr></table></figure><p><strong>10、在类的头部指定对象的作用域</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Scope(scopeName=&quot;singleton&quot;)</span><br><span class="line">@Scope(scopeName=&quot;prototype&quot;)</span><br></pre></td></tr></table></figure><p><strong>11、注入属性value值</strong></p><p>加在成员变量上：通过反射的Field赋值（破坏对象的封装性）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;helen&quot;)</span><br><span class="line">  private String name;</span><br></pre></td></tr></table></figure><p>或加在set方法上：通过set方法赋值 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;tom&quot;)</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@Value(“helen”) 等同于 @Value(value=”helen”) </p><p><strong>12、自动装配</strong></p><p>（1）@Autowired</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;car&quot;)</span><br><span class="line">public class Car &#123;</span><br><span class="line">    @Value(&quot;mini&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;红&quot;)</span><br><span class="line">    private String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;person&quot;)</span><br><span class="line">public class Person &#123;</span><br><span class="line">    @Value(&quot;helen&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;18&quot;)</span><br><span class="line">    private Integer age;</span><br><span class="line">    @Autowired</span><br><span class="line">    private Car car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）@Qualifier</strong></p><ul><li>如果匹配多个类型一致的对象，将无法选择具体注入哪一个对象</li><li>使用@Qualifier()注解告诉spring容器自动装配哪个名称的对象</li></ul><p>创建Computer接口和PC、Labtop实现类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface Computer &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;pc&quot;)</span><br><span class="line">public class PC implements Computer&#123;</span><br><span class="line">    @Value(&quot;联想台式机&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    //getter、setter、空参构造、toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;labtop&quot;)</span><br><span class="line">public class Labtop implements Computer&#123;</span><br><span class="line">    @Value(&quot;苹果笔记本&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    //getter、setter、空参构造、toString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Person类中添加Computer属性：使用 <code>@Qualifier(&quot;labtop&quot;)</code> 指定装配 <code>@Component(&quot;labtop&quot;)</code> 对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">  @Qualifier(&quot;labtop&quot;)</span><br><span class="line">  private Computer computer;</span><br><span class="line">  //getter、setter</span><br></pre></td></tr></table></figure><p><strong>（3）@Resource</strong></p><p>使用@Resource指定注入哪个名称的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Resource(name=&quot;pc&quot;)</span><br><span class="line"> private Computer computer;</span><br></pre></td></tr></table></figure><p><strong>13、初始化和销毁方法</strong></p><p>注意：单实例时设置</p><p>person类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@PostConstruct //在对象被创建后调用，init-method</span><br><span class="line">  public void init() &#123;</span><br><span class="line">      System.out.println(&quot;Person的初始化方法&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @PreDestroy //在销毁之前调用，destory-method</span><br><span class="line">  public void destroy() &#123;</span><br><span class="line">      System.out.println(&quot;Person的销毁方法&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>测试： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void testInitAndDestroy()&#123;</span><br><span class="line">        AbstractApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        //或者手动调用销毁方法</span><br><span class="line">        context.destroy();</span><br><span class="line">        //或者关闭容器，触发销毁方法</span><br><span class="line">        //context.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="十三、spring整合junit测试"><a href="#十三、spring整合junit测试" class="headerlink" title="十三、spring整合junit测试"></a>十三、spring整合junit测试</h3><p>spring整合junit，为我们提供了方便的测试方式</p><p><strong>1、导包</strong></p><p>在spring-02-annotation项目中再加入如下包</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/ad1dae3e-ccac-4aa0-898c-df22005862af/index_files/1506674560367.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543917070793.png" alt="1543917070793"></p><p>pom：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>完整的依赖如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring --&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;!-- 日志处理 --&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2、创建测试类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//创建容器</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">//指定创建容器时使用哪个配置文件</span><br><span class="line">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="line">public class RunWithTest &#123;</span><br><span class="line">    //将名为user的对象注入到u变量中</span><br><span class="line">    @Resource(name=&quot;person&quot;)</span><br><span class="line">    private Person p;</span><br><span class="line">    @Test</span><br><span class="line">    public void testCreatePerson()&#123;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十四、aop简介"><a href="#十四、aop简介" class="headerlink" title="十四、aop简介"></a>十四、aop简介</h3><p><strong>1、AOP （面向切面编程）</strong></p><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>AOP 思想：横向重复、纵向抽取</p><p><strong>2、底层实现：</strong></p><p>Spring 的 AOP 的底层用到两种代理机制：</p><ul><li>JDK 的动态代理：针对实现了接口的类产生代理。</li><li>Cglib 的动态代理：针对没有实现接口的类产生代理，应用的是底层的字节码增强的技术 生成当前类的子类对象。</li></ul><p><strong>3、AOP 的开发中的相关术语：</strong></p><ul><li><strong>Joinpoint（连接点）：</strong>所谓连接点是指那些被拦截到的点。在 spring 中，这些点指的是方法,因为 spring 只支持方法类型的连接点（可以被切入的点）</li><li><strong>Pointcut（切入点）：</strong>所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。（已经被切入的点）</li><li><strong>Advice（通知/增强）：</strong>所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知分为前置通知，后置通知，异常通知，最终通知，环绕通知（切面要完成的功能）</li><li><strong>Introduction（引介）：</strong>引介是一种特殊的通知在不修改类代码的前提下，Introduction 可以在运行期为类动态地添加一些方法或 Field。</li><li><strong>Aspect（切面）：</strong>是切入点和通知（引介）的结合</li><li><strong>Target（目标对象）：</strong>代理的目标对象</li><li><strong>Proxy（代理）：</strong>一个类被 AOP 织入增强后，就产生一个结果代理类。</li><li><strong>Weaving(织入)：</strong>是指把增强应用到目标对象来创建新的代理对象的过程。spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。</li></ul><h3 id="十五、spring-aop-开发（xml）"><a href="#十五、spring-aop-开发（xml）" class="headerlink" title="十五、spring aop 开发（xml）"></a><strong>十五、spring aop 开发（xml）</strong></h3><p><strong>1、创建项目</strong></p><p>spring-03-aop</p><p><strong>2、引入jar包</strong></p><p>核心包加日志包（和之前一样）</p><p>测试包</p><p>再加入以下包</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/d08b8a35-9040-4a50-9dd6-7f7f0cfcb6e2/index_files/9d92a743-8734-47f0-b964-48b751c11754.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543917244233.png" alt="1543917244233"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>完整的依赖如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- 日志处理 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>3、引入日志配置</strong></p><p>log4j.properties</p><p><strong>4、准备目标对象</strong></p><p>先创建UserService接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.service;</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    void save();</span><br><span class="line">    void delete();</span><br><span class="line">    void update();</span><br><span class="line">    void select();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.service;</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void save() &#123;</span><br><span class="line">        System.out.println(&quot;保存用户!&quot;);</span><br><span class="line">        //int i = 1/0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        System.out.println(&quot;删除用户!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;更新用户!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void select() &#123;</span><br><span class="line">        System.out.println(&quot;查找用户!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、准备通知</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.aop;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">//通知类</span><br><span class="line">public class MyAdvice &#123;</span><br><span class="line">    </span><br><span class="line">    //前置通知：目标方法运行之前调用</span><br><span class="line">    //后置通知(如果出现异常不会调用)：在目标方法运行之后调用</span><br><span class="line">    //环绕通知：在目标方法之前和之后都调用</span><br><span class="line">    //异常拦截通知：如果出现异常，就会调用</span><br><span class="line">    //后置通知(无论是否出现 异常都会调用)：在目标方法运行之后调用</span><br><span class="line">    //前置通知</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;这是前置通知!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //后置通知</span><br><span class="line">    public void afterReturning()&#123;</span><br><span class="line">        System.out.println(&quot;这是后置通知(如果出现异常不会调用)!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //环绕通知</span><br><span class="line">    public Object around(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;这是环绕通知之前的部分!!&quot;);</span><br><span class="line">        Object proceed = pjp.proceed();//调用目标方法</span><br><span class="line">        System.out.println(&quot;这是环绕通知之后的部分!!&quot;);</span><br><span class="line">        return proceed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //异常通知</span><br><span class="line">    public void afterException()&#123;</span><br><span class="line">        System.out.println(&quot;出事啦!出现异常了!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //后置通知</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;这是后置通知(出现异常也会调用)!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、配置进行织入,将通知织入目标对象中</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; </span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/aop </span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd &quot;&gt;</span><br><span class="line">&lt;!-- 准备工作: 导入aop(约束)命名空间 --&gt;</span><br><span class="line">&lt;!-- 1.配置目标对象 --&gt;</span><br><span class="line">    &lt;bean name=&quot;userService&quot; class=&quot;name.yaohuan.spring.service.UserServiceImpl&quot; &gt;&lt;/bean&gt;</span><br><span class="line">&lt;!-- 2.配置通知对象 --&gt;</span><br><span class="line">    &lt;bean name=&quot;myAdvice&quot; class=&quot;name.yaohuan.spring.aop.MyAdvice&quot; &gt;&lt;/bean&gt;</span><br><span class="line">&lt;!-- 3.配置将通知织入目标对象 --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!-- 配置切入点 </span><br><span class="line">            public void name.yaohuan.spring.service.UserServiceImpl.save() </span><br><span class="line">            * name.yaohuan.spring.service.UserServiceImpl.*()</span><br><span class="line">            * name.yaohuan.spring.service.*ServiceImpl.*(..)</span><br><span class="line">            * name.yaohuan.spring.service..*ServiceImpl.*(..)</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;aop:pointcut expression=&quot;execution(* name.yaohuan.spring.service.*ServiceImpl.*(..))&quot; id=&quot;pc&quot;/&gt;</span><br><span class="line">        &lt;aop:aspect ref=&quot;myAdvice&quot; &gt;</span><br><span class="line">            &lt;!-- 指定名为before方法作为前置通知 --&gt;</span><br><span class="line">            &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;pc&quot; /&gt;</span><br><span class="line">            &lt;!-- 后置 --&gt;</span><br><span class="line">            &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;pc&quot; /&gt;</span><br><span class="line">            &lt;!-- 环绕通知 --&gt;</span><br><span class="line">            &lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;pc&quot; /&gt;</span><br><span class="line">            &lt;!-- 异常拦截通知 --&gt;</span><br><span class="line">            &lt;aop:after-throwing method=&quot;afterException&quot; pointcut-ref=&quot;pc&quot;/&gt;</span><br><span class="line">            &lt;!-- 后置 --&gt;</span><br><span class="line">            &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;pc&quot;/&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>7、测试</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.service;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="line">public class AopTest &#123;</span><br><span class="line">    </span><br><span class="line">    @Resource(name=&quot;userService&quot;)</span><br><span class="line">    private UserService userService;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testSave()&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十六、spring-aop-开发（注解）"><a href="#十六、spring-aop-开发（注解）" class="headerlink" title="十六、spring aop 开发（注解）"></a>十六、spring aop 开发（注解）</h3><p>1、按照前面的步骤中准备目标对象和通知</p><p>2、配置文件</p><p>配置目标对象</p><p>配置通知对象</p><p>开启注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 3.开启使用注解完成织入 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure><p>7、MyAdvice中加注解 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//通知类</span><br><span class="line">@Aspect</span><br><span class="line">//表示该类是一个通知类</span><br><span class="line">public class MyAdvice &#123;</span><br><span class="line">    @Pointcut(&quot;execution(* name.yaohuan.spring.service.*ServiceImpl.*(..))&quot;)</span><br><span class="line">    public void pc()&#123;&#125;</span><br><span class="line">    //前置通知</span><br><span class="line">    //指定该方法是前置通知,并制定切入点</span><br><span class="line">    @Before(&quot;MyAdvice.pc()&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;这是前置通知!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //后置通知</span><br><span class="line">    @AfterReturning(&quot;execution(* name.yaohuan.spring.service.*ServiceImpl.*(..))&quot;)</span><br><span class="line">    public void afterReturning()&#123;</span><br><span class="line">        System.out.println(&quot;这是后置通知(如果出现异常不会调用)!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //环绕通知</span><br><span class="line">    @Around(&quot;execution(* name.yaohuan.spring.service.*ServiceImpl.*(..))&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;这是环绕通知之前的部分!!&quot;);</span><br><span class="line">        Object proceed = pjp.proceed();//调用目标方法</span><br><span class="line">        System.out.println(&quot;这是环绕通知之后的部分!!&quot;);</span><br><span class="line">        return proceed;</span><br><span class="line">    &#125;</span><br><span class="line">    //异常通知</span><br><span class="line">    @AfterThrowing(&quot;execution(* name.yaohuan.spring.service.*ServiceImpl.*(..))&quot;)</span><br><span class="line">    public void afterException()&#123;</span><br><span class="line">        System.out.println(&quot;出事啦!出现异常了!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //后置通知</span><br><span class="line">    @After(&quot;execution(* name.yaohuan.spring.service.*ServiceImpl.*(..))&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;这是后置通知(出现异常也会调用)!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十七、JdbcTemplate入门"><a href="#十七、JdbcTemplate入门" class="headerlink" title="十七、JdbcTemplate入门"></a>十七、JdbcTemplate入门</h3><p><strong>类似DBUtils 的 QueryRunner</strong></p><p><strong>案例：救援系统的角色表的增删改查</strong></p><p><strong>1、创建项目</strong></p><p>spring-04-jdbcTemplate</p><p><strong>2、导包</strong></p><p>核心包加日志包（和之前一样）</p><p>测试包</p><p>再加入以下jar包</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/2c08cf77-2d85-41b0-a184-66e9bc6ad461/index_files/4b6eb9a0-64f2-4f61-9360-1242f24e367a.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543917595463.png" alt="1543917595463"></p><p>完整的依赖如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">              &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!-- 日志处理 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!-- mysql --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;5.1.40&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!-- c3p0 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>3、引入日志配置</strong></p><p>log4j.properties</p><p><strong>4、数据库</strong></p><p>新建数据库spring，创建角色表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*Table structure for table `ar_role` */</span><br><span class="line"></span><br><span class="line">CREATE TABLE `ar_role` (</span><br><span class="line">  `rid` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &apos;角色id&apos;,</span><br><span class="line">  `rname` varchar(20) NOT NULL COMMENT &apos;角色名&apos;,</span><br><span class="line">  `alias` varchar(20) NOT NULL COMMENT &apos;角色别名&apos;,</span><br><span class="line">  PRIMARY KEY (`rid`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">/*Data for the table `ar_role` */</span><br><span class="line"></span><br><span class="line">insert  into `ar_role`(`rid`,`rname`,`alias`) values (1,&apos;administrator&apos;,&apos;系统管理员&apos;);</span><br><span class="line">insert  into `ar_role`(`rid`,`rname`,`alias`) values (2,&apos;dispatcher&apos;,&apos;调度员&apos;);</span><br></pre></td></tr></table></figure><p><strong>5、拷贝之前写的 DataSourceUtil.java</strong></p><p><strong>6、拷贝c3p0-config.xml</strong></p><p><strong>7、写测试类</strong></p><p>下面是不使用 DataSourceUtil.java 的版本，和使用 DataSourceUtil.java 的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.jdbctemplate;</span><br><span class="line">public class JdbcTemplateTest &#123;</span><br><span class="line">    </span><br><span class="line">    //不使用工具类</span><br><span class="line">    @Test</span><br><span class="line">    public void testSave1() throws PropertyVetoException&#123;</span><br><span class="line">        </span><br><span class="line">        //准备连接池</span><br><span class="line">        ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        dataSource.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/spring&quot;);</span><br><span class="line">        dataSource.setUser(&quot;root&quot;);</span><br><span class="line">        dataSource.setPassword(&quot;123456&quot;);</span><br><span class="line">        </span><br><span class="line">        //创建JdbcTemplate对象</span><br><span class="line">        JdbcTemplate jt= new JdbcTemplate(dataSource);</span><br><span class="line">        //执行sql</span><br><span class="line">        String sql = &quot; INSERT INTO ar_role ( &quot;</span><br><span class="line">                + &quot; rname,&quot;</span><br><span class="line">                + &quot; alias&quot;</span><br><span class="line">                + &quot; ) VALUES (?,?)&quot; ;</span><br><span class="line">       jt.update(sql, &quot;test1&quot;, &quot;test1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //使用工具类</span><br><span class="line">    @Test</span><br><span class="line">    public void testSave2() throws PropertyVetoException&#123;</span><br><span class="line">        </span><br><span class="line">        //准备连接池</span><br><span class="line">        DataSource dataSource = DataSourceUtil.getDataSource();</span><br><span class="line">        //创建JdbcTemplate对象</span><br><span class="line">        JdbcTemplate jt= new JdbcTemplate(dataSource);</span><br><span class="line">        //执行sql</span><br><span class="line">        String sql = &quot; INSERT INTO ar_role ( &quot;</span><br><span class="line">                + &quot; rname,&quot;</span><br><span class="line">                + &quot; alias&quot;</span><br><span class="line">                + &quot; ) VALUES (?,?)&quot; ;</span><br><span class="line">       jt.update(sql, &quot;test2&quot;, &quot;test2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十八、用spring管理JdbcTemplate"><a href="#十八、用spring管理JdbcTemplate" class="headerlink" title="十八、用spring管理JdbcTemplate"></a>十八、用spring管理JdbcTemplate</h3><p>学习JdbcTemplate API 和 如何用Spring 管理 JdbcTemplate</p><p><strong>1、创建 pojo.Role.java</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.pojo;</span><br><span class="line">public class Role &#123;</span><br><span class="line">    private Integer rid;</span><br><span class="line">    private String rname;</span><br><span class="line">    private String alias;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、创建 dao.RoleDao.java 和 dao.RoleDaoImpl.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.dao;</span><br><span class="line">public interface RoleDao &#123;</span><br><span class="line">    //增</span><br><span class="line">    void save(Role role);</span><br><span class="line">    //删</span><br><span class="line">    void delete(Integer id);</span><br><span class="line">    //改</span><br><span class="line">    void update(Role role);</span><br><span class="line">    //查</span><br><span class="line">    Role getById(Integer id);</span><br><span class="line">    //查</span><br><span class="line">    int getTotalCount();</span><br><span class="line">    //查</span><br><span class="line">    List&lt;Role&gt; getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据源（连接池）、JdbcTemplate、RoleDao对象交给spring容器管理</p><p>如果不用注解的方式配置，不要忘记写jt的 set 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.dao;</span><br><span class="line">public class RoleDaoImpl extends JdbcDaoSupport implements RoleDao &#123;</span><br><span class="line">    </span><br><span class="line">    private JdbcTemplate jt;</span><br><span class="line">    public void setJt(JdbcTemplate jt) &#123;</span><br><span class="line">        this.jt = jt;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void save(Role role) &#123;</span><br><span class="line">        String sql = &quot; INSERT INTO ar_role ( &quot;</span><br><span class="line">                + &quot; rname,&quot;</span><br><span class="line">                + &quot; alias&quot;</span><br><span class="line">                + &quot; ) VALUES (?,?)&quot; ;</span><br><span class="line">        jt.update(sql, role.getRname(), role.getAlias());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void delete(Integer id) &#123;</span><br><span class="line">        String sql = &quot;delete from ar_role where rid = ? &quot;;</span><br><span class="line">        jt.update(sql, id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void update(Role role) &#123;</span><br><span class="line">        String sql = &quot;update ar_role set rname = ?, alias = ? where rid=? &quot;;</span><br><span class="line">        jt.update(sql, role.getRname(), role.getAlias(), role.getRid());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Role getById(Integer id) &#123;</span><br><span class="line">        String sql = &quot;select * from ar_role where rid = ? &quot;;</span><br><span class="line">        return jt.queryForObject(sql,new RowMapper&lt;Role&gt;()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Role mapRow(ResultSet rs, int index) throws SQLException &#123;</span><br><span class="line">                return mapRowHandler(rs);</span><br><span class="line">            &#125;&#125;, id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public int getTotalCount() &#123;</span><br><span class="line">        String sql = &quot;select count(*) from ar_role &quot;;</span><br><span class="line">        Integer count = jt.queryForObject(sql, Integer.class);</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Role&gt; getAll() &#123;</span><br><span class="line">        String sql = &quot;select * from ar_role&quot;;</span><br><span class="line">        List&lt;Role&gt; list = jt.query(sql, new RowMapper&lt;Role&gt;()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Role mapRow(ResultSet rs, int index) throws SQLException &#123;</span><br><span class="line">                return mapRowHandler(rs);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">    private Role mapRowHandler(ResultSet rs) throws SQLException &#123;</span><br><span class="line">        Role role = new Role();</span><br><span class="line">        role.setRname(rs.getString(&quot;rname&quot;));</span><br><span class="line">        role.setAlias(rs.getString(&quot;alias&quot;));</span><br><span class="line">        role.setRid(rs.getInt(&quot;rid&quot;));</span><br><span class="line">        return role;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、创建db.properties</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/spring</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><p><strong>4、配置applicationContext.xml</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd &quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定spring读取db.properties配置 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;  /&gt;</span><br><span class="line">&lt;!-- 1、连接池 --&gt;</span><br><span class="line">&lt;bean name=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; &gt;</span><br><span class="line">    &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.user&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 2、JdbcTemplate --&gt;</span><br><span class="line">&lt;bean name=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; &gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; &gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 3、roleDao --&gt;</span><br><span class="line">&lt;bean name=&quot;roleDao&quot; class=&quot;name.yaohuan.spring.dao.RoleDaoImpl&quot; &gt;</span><br><span class="line">    &lt;property name=&quot;jt&quot; ref=&quot;jdbcTemplate&quot; &gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>5、写测试类</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.jdbctemplate;</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="line">public class SpringJdbcTemplateTest &#123;</span><br><span class="line">    @Resource(name=&quot;roleDao&quot;)</span><br><span class="line">    private RoleDao roleDao;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testSave() throws Exception&#123;</span><br><span class="line">        Role role = new Role();</span><br><span class="line">        role.setRname(&quot;spring1&quot;);</span><br><span class="line">        role.setAlias(&quot;spring1&quot;);</span><br><span class="line">        roleDao.save(role);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testDelete() throws Exception&#123;</span><br><span class="line">        roleDao.delete(11);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testUpdate() throws Exception&#123;</span><br><span class="line">        Role role = new Role();</span><br><span class="line">        role.setRid(10);</span><br><span class="line">        role.setRname(&quot;spring123&quot;);</span><br><span class="line">        role.setAlias(&quot;spring123&quot;);</span><br><span class="line">        roleDao.update(role);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testGetById() throws Exception&#123;</span><br><span class="line">        System.out.println(roleDao.getById(1));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testGetTotalCount() throws Exception&#123;</span><br><span class="line">        System.out.println(roleDao.getTotalCount());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testGetAll() throws Exception&#123;</span><br><span class="line">        System.out.println(roleDao.getAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、也可以使用注解的方式</strong> </p><p>（1）在applicationContext中配置注解扫描 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;name.yaohuan.spring.dao&quot;&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>（2）不用配置  &lt;bean name=”roleDao” …</p><p>（3）在 RoleDaoImpl中配置注解</p><p>此时已经不需要 jt 的 set 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Repository(&quot;roleDao&quot;)</span><br><span class="line">public class RoleDaoImpl implements RoleDao &#123;</span><br><span class="line">    </span><br><span class="line">    @Resource(name=&quot;jdbcTemplate&quot;)</span><br><span class="line">    private JdbcTemplate jt;</span><br></pre></td></tr></table></figure><p>（4）执行刚才的测试用例即可 </p><h3 id="十九、转账的案例（无事务）"><a href="#十九、转账的案例（无事务）" class="headerlink" title="十九、转账的案例（无事务）"></a>十九、转账的案例（无事务）</h3><p><strong>案例：转账</strong></p><p><strong>1、创建项目</strong></p><p>spring-05-tx</p><p><strong>2、导包</strong></p><p>同 前一个项目 spring-04-jdbcTemplate，再加上aop的相关包</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/280ef5a3-00eb-4cf3-81f7-d21e96dff286/index_files/aa6200ac-68f1-4f63-bc2f-03add670ff26.png" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543917868911.png" alt="1543917868911"></p><p>完整的依赖如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 日志处理 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- mysql --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.40&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- c3p0 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>3、引入日志配置</strong></p><p>log4j.properties</p><p><strong>4、复制数据库配置</strong></p><p>db.properties</p><p><strong>5、创建数据库表</strong></p><p>在spring数据库中创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*Table structure for table `ar_account` */</span><br><span class="line"></span><br><span class="line">CREATE TABLE `ar_account` (</span><br><span class="line">  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` VARCHAR(20) NOT NULL,</span><br><span class="line">  `money` DECIMAL(10,2) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">/*Data for the table `ar_account` */</span><br><span class="line"></span><br><span class="line">INSERT  INTO `ar_account`(`id`,`username`,`money`) VALUES (1,&apos;Helen&apos;,&apos;1000.00&apos;);</span><br><span class="line">INSERT  INTO `ar_account`(`id`,`username`,`money`) VALUES (2,&apos;Tom&apos;,&apos;1000.00&apos;);</span><br></pre></td></tr></table></figure><p><strong>6、创建dao接口和dao</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.dao;</span><br><span class="line">public interface AccountDao &#123;</span><br><span class="line">    //加钱</span><br><span class="line">    void increaseMoney(Integer id,Double money);</span><br><span class="line">    //减钱</span><br><span class="line">    void decreaseMoney(Integer id,Double money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.dao;</span><br><span class="line">@Repository(&quot;accountDao&quot;)</span><br><span class="line">public class AccountDaoImpl implements AccountDao  &#123;</span><br><span class="line">    @Resource(name=&quot;jdbcTemplate&quot;)</span><br><span class="line">    private JdbcTemplate jt;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void increaseMoney(Integer id, Double money) &#123;</span><br><span class="line">        jt.update(&quot;update ar_account set money = money+? where id = ? &quot;, money,id);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void decreaseMoney(Integer id, Double money) &#123;</span><br><span class="line">        jt.update(&quot;update ar_account set money = money-? where id = ? &quot;, money,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7、创建service接口和service</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.service;</span><br><span class="line">public interface AccountService &#123;</span><br><span class="line">    //转账方法</span><br><span class="line">    void transfer(Integer from, Integer to, Double money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.service;</span><br><span class="line">@Service(&quot;accountService&quot;)</span><br><span class="line">public class AccountServiceImpl implements AccountService &#123;</span><br><span class="line">    @Resource(name=&quot;accountDao&quot;)</span><br><span class="line">    private AccountDao accountDao ;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void transfer(final Integer from,final Integer to,final Double money) &#123;</span><br><span class="line">        //减钱</span><br><span class="line">        accountDao.decreaseMoney(from, money);</span><br><span class="line">        int i = 1/0; //异常</span><br><span class="line">        //加钱</span><br><span class="line">        accountDao.increaseMoney(to, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8、创建applicationContext.xml</strong></p><p>先不加入事务处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/aop </span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 注解扫描 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;name.yaohuan.spring.dao&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;name.yaohuan.spring.service&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定spring读取db.properties配置 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;  /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 1、连接池 --&gt;</span><br><span class="line">&lt;bean name=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; &gt;</span><br><span class="line">    &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.user&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; &gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 2、JdbcTemplate --&gt;</span><br><span class="line">&lt;bean name=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; &gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; &gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>9、创建测试</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package name.yaohuan.spring.service;</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="line">public class TxTest &#123;</span><br><span class="line">    @Resource(name=&quot;accountService&quot;)</span><br><span class="line">    private AccountService accountService;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testTransfer()&#123;</span><br><span class="line">        accountService.transfer(1, 2, 100d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十、复习事务相关概念"><a href="#二十、复习事务相关概念" class="headerlink" title="二十、复习事务相关概念"></a>二十、复习事务相关概念</h3><p><strong>一、什么是事务(Transaction)</strong></p><p>是并发控制的单元，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位。通过事务，sql  能将逻辑相关的一组操作绑定在一起，以便服务器 保持数据的完整性。事务通常是以begin transaction开始，以commit或rollback结束。Commint表示提交，即提交事务的所有操作。具体地说就是将事务中所有对数据的更新写回到磁盘上的物理数据库中去，事务正常结束。Rollback表示回滚，即在事务运行的过程中发生了某种故障，事务不能继续进行，系统将事务中对数据库的所有已完成的操作全部撤消，滚回到事务开始的状态。</p><p>设想网上购物的一次交易，其付款过程至少包括以下几步数据库操作：</p><p>1、更新客户所购商品的库存信息 </p><p>2、保存客户付款信息–可能包括与银行系统的交互 </p><p>3、生成订单并且保存到数据库中 </p><p>4、更新用户相关信息，例如购物数量等等 </p><p>正常的情况下，这些操作将顺利进行，最终交易成功，与交易相关的所有数据库信息也成功地更新。但是，如果在这一系列过程中任何一个环节出了差错，例如在更新商品库存信息时发生异常、该顾客银行帐户存款不足等，都将导致交易失败。一旦交易失败，数据库中所有信息都必须保持交易前的状态不变，比如最后一步更新用户信息时失败而导致交易失败，那么必须保证这笔失败的交易不影响数据库的状态–库存信息没有被更新、用户也没有付款，订单也没有生成。否则，数据库的信息将会一片混乱而不可预测。</p><p>数据库事务正是用来保证这种情况下交易的平稳性和可预测性的技术</p><p><strong>二、为什么要使用事务？</strong> </p><p>1、为了提高性能</p><p>2、为了保持业务流程的完整性</p><p>3、使用分布式事务</p><p><strong>三、事务的特性</strong></p><p><strong>ACID</strong></p><p><strong>1、原子性（atomicity）</strong></p><p>事务是数据库的逻辑工作单位，而且是必须是原子工作单位，对于其数据修改，要么全部执行，要么全部不执行。</p><p><strong>2、一致性（consistency）</strong></p><p>事务在完成时，必须是所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。</p><p><strong>3、隔离性（isolation）</strong></p><p>一个事务的执行不能被其他事务所影响。企业级的数据库每一秒钟都可能应付成千上万的并发访问，因而带来了并发控制的问题。由数据库理论可知，由于并发访问，在不可预料的时刻可能引发如下几个可以预料的问题：（见“二、事务的并发问题“）</p><p><strong>4、持久性（durability）</strong></p><p>一个事务一旦提交，事物的操作便永久性的保存在DB中。即使此时再执行回滚操作也不能撤消所做的更改</p><p><strong>四、事务的并发问题</strong></p><p><strong>1、脏读（Dirty Read）</strong></p><p>一个事务读取到了另一个事务未提交的数据操作结果。这是相当危险的，因为很可能所有的操作都被回滚。</p><p><strong>2、不可重复读（虚读）（NonRepeatable Read）</strong></p><p>一个事务对同一行数据重复读取两次，但是却得到了不同的结果。例如事务T1读取某一数据后，事务T2对其做了修改，当事务T1再次读该数据时得到与前一次不同的值。</p><p><strong>3、幻读（Phantom Read）</strong></p><p>事务在操作过程中进行两次查询，第二次查询的结果包含了第一次查询中未出现的数据或者缺少了第一次查询中出现的数据，这是因为在两次查询过程中有另外一个事务插入数据造成的</p><p><strong>五、事务的隔离级别</strong></p><p><strong>1 - 读未提交</strong></p><p>Read uncommitted：最低级别，以上情况均无法保证。</p><p><strong>2 - 读已提交</strong></p><p>Read committed：可避免脏读情况发生。（Oracle默认）</p><p><strong>4 - 可重复读</strong></p><p>Repeatable read：可避免脏读、不可重复读情况的发生。不可以避免虚读。（MySQl默认）</p><p><strong>8 - 串行化读</strong>Serializable：事务只能一个一个执行，避免了脏读、不可重复读、幻读。执行效率慢，使用时慎重。</p><h3 id="二十一、spring的事务管理接口"><a href="#二十一、spring的事务管理接口" class="headerlink" title="二十一、spring的事务管理接口"></a>二十一、spring的事务管理接口</h3><p><strong>1、Spring 的 TransactionManager 接口：</strong></p><p>在不同平台，操作事务的代码各不相同，因此spring提供了一个 TransactionManager 接口：</p><p>DateSourceTransactionManager 用于 JDBC 的事务管理</p><p>HibernateTransactionManager 用于 Hibernate 的事务管理</p><p>JpaTransactionManager 用于 Jpa 的事务管理</p><p><img src="https://vipkshttps13.wiz.cn/ks/note/view/bb461bed-93db-4f2e-a3f0-69f99ac1fcde/42524505-046b-47e4-bbe3-f4c9984dca6b/index_files/69360651.jpg" alt="img"> </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1543918091718.png" alt="1543918091718"></p><p><strong>2、Spring中 TransactionManager 接口的定义（源码）</strong></p><p>事务的属性介绍：这里定义了传播行为、隔离级别、超时时间、是否只读</p><p>绝大部分场景下会使用 <em>PROPAGATION_REQUIRED</em> 和 PROPAGATION_SUPPORTS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.transaction;</span><br><span class="line">public interface TransactionDefinition &#123;</span><br><span class="line">    int PROPAGATION_REQUIRED = 0; //支持当前事务，如果不存在，就新建一个</span><br><span class="line">    int PROPAGATION_SUPPORTS = 1; //支持当前事务，如果不存在，就不使用事务</span><br><span class="line">    int PROPAGATION_MANDATORY = 2; //支持当前事务，如果不存在，就抛出异常</span><br><span class="line">    int PROPAGATION_REQUIRES_NEW = 3;//如果有事务存在，挂起当前事务，创建一个新的事物</span><br><span class="line">    int PROPAGATION_NOT_SUPPORTED = 4;//以非事务方式运行，如果有事务存在，挂起当前事务</span><br><span class="line">    int PROPAGATION_NEVER = 5;//以非事务方式运行，如果有事务存在，就抛出异常</span><br><span class="line">    int PROPAGATION_NESTED = 6;//如果有事务存在，则嵌套事务执行</span><br><span class="line">    </span><br><span class="line">    int ISOLATION_DEFAULT = -1;//默认级别，MYSQL: 默认为REPEATABLE_READ级别 SQLSERVER: 默认为READ_COMMITTED</span><br><span class="line">    int ISOLATION_READ_UNCOMMITTED = 1;//读取未提交数据(会出现脏读, 不可重复读) 基本不使用</span><br><span class="line">    int ISOLATION_READ_COMMITTED = 2;//读取已提交数据(会出现不可重复读和幻读)</span><br><span class="line">    int ISOLATION_REPEATABLE_READ = 4;//可重复读(会出现幻读)</span><br><span class="line">    int ISOLATION_SERIALIZABLE = 8;//串行化</span><br><span class="line">    </span><br><span class="line">    int TIMEOUT_DEFAULT = -1;//默认是-1，不超时，单位是秒</span><br><span class="line"></span><br><span class="line">    //事务的传播行为</span><br><span class="line">    int getPropagationBehavior();</span><br><span class="line">    //事务的隔离级别</span><br><span class="line">    int getIsolationLevel();</span><br><span class="line">    //事务超时时间</span><br><span class="line">    int getTimeout();</span><br><span class="line">    //是否只读</span><br><span class="line">    boolean isReadOnly();</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十二、xml事务管理"><a href="#二十二、xml事务管理" class="headerlink" title="二十二、xml事务管理"></a>二十二、xml事务管理</h3><p><strong>1、在applicationContext.xml中添加 tx 名称空间</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans </span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/context </span><br><span class="line">http://www.springframework.org/schema/context/spring-context-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/aop </span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd </span><br><span class="line">http://www.springframework.org/schema/tx </span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx-4.2.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>2、在applicationContext.xml中添加事务相关配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">    class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;!-- 数据源 --&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 通知 --&gt;</span><br><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;!-- 传播行为 --&gt;</span><br><span class="line">        &lt;!-- REQUIRED：如果有事务，则在事务中执行；如果没有事务，则开启一个新的事物 --&gt;</span><br><span class="line">        &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;create*&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;transfer&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">        &lt;!-- SUPPORTS：如果有事务，则在事务中执行；如果没有事务，则不会开启事物 --&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;select*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;!-- 切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!-- 定义在service包或者子包里的任意方法的执行 --&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;txPointCut&quot;</span><br><span class="line">        expression=&quot;execution(* name.yaohuan.spring.service..*.*(..))&quot; /&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointCut&quot; /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p><strong>自定义aop和spring事物的执行顺序分析</strong></p><p>1、如果先配置spring的事物，后配置自定义的aop，那么事物会在自定义aop通知后提交</p><p>2、如果后配置spring的事物，先配置自定义的aop，那么事物会在自定义aop通知前提交</p><h3 id="二十三、注解事务管理"><a href="#二十三、注解事务管理" class="headerlink" title="二十三、注解事务管理"></a>二十三、注解事务管理</h3><p><strong>1、修改 applicationContext.xml</strong></p><p>在 applicationContext.xml 中添加开启注解事务的配置，删除通知和切面的配置，保留事务管理器的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">    class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;!-- 数据源 --&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 开启使用注解管理aop事务 --&gt;</span><br><span class="line">&lt;tx:annotation-driven/&gt;</span><br></pre></td></tr></table></figure><p><strong>2、在service层的每个方法上添加事务的配置</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  @Transactional(isolation=Isolation.REPEATABLE_READ,propagation=Propagation.REQUIRED,readOnly=false)</span><br><span class="line">  public void transfer(final Integer from,final Integer to,final Double money) &#123;</span><br></pre></td></tr></table></figure><p>也可以在类名上方定义 @Transactional 或配置通用属性，统一定义所有的service方法。如果有方法采用不同的配置，则在方法名上方单独配置 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;h3 id=&quot;一、什么是spring&quot;&gt;&lt;a href=&quot;#一、什么是spring&quot; 
      
    
    </summary>
    
      <category term="框架" scheme="https://zymmx.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://zymmx.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>hexo + github 搭建个人博客</title>
    <link href="https://zymmx.github.io/2018/11/22/hexo%20+%20github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zymmx.github.io/2018/11/22/hexo + github 搭建个人博客/</id>
    <published>2018-11-21T17:59:15.656Z</published>
    <updated>2018-11-21T17:58:46.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-github-搭建个人博客（基础篇）"><a href="#hexo-github-搭建个人博客（基础篇）" class="headerlink" title="hexo + github 搭建个人博客（基础篇）"></a>hexo + github 搭建个人博客（基础篇）</h1><p>前言：电脑系统为window 10专业版，64位 </p><p><strong>相关步骤：</strong></p><p>1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021222335756-1508643846.png" alt="img"></p><p> 2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置<strong>鼠标右键</strong>能够出现如下两个选择</p><p> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021222542474-1351750125.png" alt="img"></p><p>注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223101193-1524328031.png" alt="img"></p><p> 3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223639881-1998790649.png" alt="img"></p><p>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 </p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223928802-1978574025.png" alt="img"></p><p> 4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021224442443-1196707159.png" alt="img"></p><p>输入npm install hexo -g，开始安装Hexo</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021224910568-2096615217.png" alt="img"></p><p>输入hexo -v，检查hexo是否安装成功</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021225015224-1426206003.png" alt="img"></p><p>输入hexo init，初始化该文件夹（有点漫长的等待。。。）</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021230203912-509196411.png" alt="img"></p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021230241646-1660449756.png" alt="img"></p><p>看到后面的“Start blogging with Hexo！”，激动有木有！！！！！</p><p>输入npm install，安装所需要的组件</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231521646-1099473727.png" alt="img"></p><p>输入hexo g，首次体验Hexo</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231705474-1404994153.png" alt="img"></p><p> 输入hexo s，开启服务器，访问该网址，正式体验Hexo</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231833912-663774637.png" alt="img"></p><p>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021232311912-1198771378.png" alt="img"></p><p>那么出现如下图就成功了</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021232413224-1288183746.png" alt="img"></p><p> 5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）</p><p> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233157224-1386748377.png" alt="img"></p><p>上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱</p><p>输入cd ~/.ssh，检查是否由.ssh的文件夹</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233543052-76995831.png" alt="img"></p><p>输入ls，列出该文件下的内容。下图说明存在</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233630568-279882178.png" alt="img"></p><p> 输入ssh-keygen -t rsa -C “<a href="mailto:929762930@qq.com" target="_blank" rel="noopener">929762930@qq.com</a>”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。</p><p> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234107209-1205335399.png" alt="img"></p><p> 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234314146-695835137.png" alt="img"></p><p> 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234528552-610835964.png" alt="img"></p><p> 登录Github，点击头像下的settings，添加ssh</p><p> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234636834-426105098.png" alt="img"></p><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234906724-1938556332.png" alt="img"></p><p>输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235116271-1521882533.png" alt="img"></p><p><strong>问题：</strong>假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key</p><p>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</p><p>接下来正常操作<br>在github上添加公钥public-key:<br>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存</p><p>6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）</p><p> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235812974-84318377.png" alt="img"></p><p>repo值是你在github项目里的ssh（右下角）</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235722365-818312042.png" alt="img"></p><p>7、新建一篇博客，在cmd执行命令：hexo new post “博客名”</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022000227834-1991784353.png" alt="img"></p><p> 这时候在文件夹_posts目录下将会看到已经创建的文件</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022000508865-46787156.png" alt="img"></p><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001237943-657272339.png" alt="img"></p><p>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了</p><p> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001410662-1611125904.png" alt="img"></p><p>部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001738037-1195721153.png" alt="img"></p><p>原文链接地址：<a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><p>添加 关于页面<br>使用：hexo new page “about” 新建一个 关于我 页面。<br>主题的 _config.yml 文件中的 menu 中进行匹配</p><p>menu:<br>  home: /      //主页<br>  categories: /categories //分类<br>  archives: /archives   //归档<br>  tags: /tags   //标签<br>  about: /about   //关于                  （添加此行即可）<br>编辑 about 关于页面 md文件 部署就能看到</p><p>进阶链接：<strong><a href="http://www.cnblogs.com/fengxiongZz/p/7707568.html" target="_blank" rel="noopener">http://www.cnblogs.com/fengxiongZz/p/7707568.html</a></strong> </p><p>主题链接：<strong><a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></strong> </p><p>配置文件按需安装</p><p>常用命令：</p><p>提交 ：commit</p><p>更新：cd themes/shana</p><p>​           git pull origin master</p><p>部署：hexo d -g</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo-github-搭建个人博客（基础篇）&quot;&gt;&lt;a href=&quot;#hexo-github-搭建个人博客（基础篇）&quot; class=&quot;headerlink&quot; title=&quot;hexo + github 搭建个人博客（基础篇）&quot;&gt;&lt;/a&gt;hexo + github 搭
      
    
    </summary>
    
      <category term="杂散" scheme="https://zymmx.github.io/categories/%E6%9D%82%E6%95%A3/"/>
    
    
      <category term="hexo" scheme="https://zymmx.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装及环境变量配置</title>
    <link href="https://zymmx.github.io/2018/11/21/Node.js%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>https://zymmx.github.io/2018/11/21/Node.js安装及环境变量配置/</id>
    <published>2018-11-21T15:39:18.386Z</published>
    <updated>2018-11-21T17:54:54.652Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Node-js安装及环境变量配置"><a href="#Node-js安装及环境变量配置" class="headerlink" title="Node.js安装及环境变量配置"></a>Node.js安装及环境变量配置</h4><p>傻瓜式安装，注意选择保存的路径</p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1542770140650.png" alt="1542770140650"></p><p>此处说明下：新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西 </p><p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。 例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图： </p><p>创建完两个空文件夹之后，打开cmd命令窗口，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Develop\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\Develop\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>接下来，关闭命令窗口</p><p>进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】，将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】 </p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1542770300130.png" alt="1542770300130"></p><p><img src="C:\Users\Administrator\AppData\Local\Temp\1542770309169.png" alt="1542770309169"></p><p>npm config set prefix “E:\Nodejs\node_global”</p><p>npm config set cache “E:\Nodejs\node_cache”</p><p>C:\Users\Administrator\AppData\Roaming\npm</p><p>配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，<br>输入如下命令进行模块的全局安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g     # -g是全局安装的意思</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Local\Temp\1542770346462.png" alt="1542770346462"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Node-js安装及环境变量配置&quot;&gt;&lt;a href=&quot;#Node-js安装及环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;Node.js安装及环境变量配置&quot;&gt;&lt;/a&gt;Node.js安装及环境变量配置&lt;/h4&gt;&lt;p&gt;傻瓜式安装，注意选择保存的路
      
    
    </summary>
    
      <category term="杂散" scheme="https://zymmx.github.io/categories/%E6%9D%82%E6%95%A3/"/>
    
    
      <category term="js" scheme="https://zymmx.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机安装及相关环境配置</title>
    <link href="https://zymmx.github.io/2018/11/21/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://zymmx.github.io/2018/11/21/虚拟机安装及相关环境配置/</id>
    <published>2018-11-21T09:56:42.084Z</published>
    <updated>2018-07-14T06:13:48.934Z</updated>
    
    <content type="html"><![CDATA[<h4 id="虚拟机安装及相关环境配置"><a href="#虚拟机安装及相关环境配置" class="headerlink" title="虚拟机安装及相关环境配置"></a>虚拟机安装及相关环境配置</h4><h5 id="一：虚拟机安装"><a href="#一：虚拟机安装" class="headerlink" title="一：虚拟机安装"></a>一：虚拟机安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">傻瓜式安装</span><br><span class="line"></span><br><span class="line">注意断开可移动设备中的cd/dvd</span><br><span class="line"></span><br><span class="line">su root</span><br><span class="line">命令是切换到root用户</span><br><span class="line">passwd 空格 回车</span><br><span class="line">是修改密码</span><br><span class="line"></span><br><span class="line">如果是ssh访问的是别的电脑上的虚拟机，需要将虚拟机的网络设置成桥接</span><br><span class="line">ervice sshd status</span><br><span class="line">命令查看sshd服务的运行状态</span><br><span class="line">如果状态不是running</span><br><span class="line">使用命令启动</span><br><span class="line">service sshd start</span><br><span class="line"></span><br><span class="line">使用工具进行远程连接时，需要开放22端口</span><br><span class="line"></span><br><span class="line">使用iptables开放如下端口（如下开放22端口，其他类似）</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">保存</span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br><span class="line">重启服务</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line">如果配置不成功，或者不想这么麻烦每个端口都配置，可以关闭防火墙</span><br><span class="line">关闭防火墙：service iptables stop</span><br></pre></td></tr></table></figure><h5 id="二：mysql安装"><a href="#二：mysql安装" class="headerlink" title="二：mysql安装"></a>二：mysql安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.使用工具（xftp），将压缩包上传到usr/local/software下【usr/local无读写权限限制，software如没有可新建】</span><br><span class="line"></span><br><span class="line">2.解压，并重命名为mysql</span><br><span class="line">cd /usr/local/software</span><br><span class="line">tar -zxvf mysql-5.6.38-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">3.cd mysql进入解压后的目录</span><br><span class="line">执行下面的命令安装mysql:</span><br><span class="line">scripts/mysql_install_db --user=mysql --basedir=/usr/local/software/mysql --datadir=/usr/local/software/mysql/data</span><br><span class="line"></span><br><span class="line">4.执行vim my.cnf 编辑mysql配置文件，添加如下两行内容：</span><br><span class="line">basedir=/usr/local/software/mysql</span><br><span class="line">datadir=/usr/local/software/mysql/data</span><br><span class="line"></span><br><span class="line">5.执行vim /etc/my.cnf编辑文件，加入两行：</span><br><span class="line">basedir=/usr/local/software/mysql</span><br><span class="line">datadir=/usr/local/software/mysql/data</span><br><span class="line"></span><br><span class="line">6.执行命令cp support-files/mysql.server /etc/init.d/mysql，把启动脚本放到开机初始化目录</span><br><span class="line">启动mysql服务：执行命令service mysql start</span><br><span class="line">执行命令：ps -ef|grep mysql 看到mysql服务说明启动成功</span><br><span class="line"></span><br><span class="line">7.输入mysql 回车</span><br><span class="line">set password for root@localhost = password(&apos;root&apos;);</span><br><span class="line">修改root的密码</span><br><span class="line">退出输入quit</span><br><span class="line"></span><br><span class="line">8.再登录的时候报错：</span><br><span class="line">使用mysql –u 用户名 –p登录</span><br><span class="line">执行下面的命令，让root可以远程登录：</span><br><span class="line">grant all privileges on *.* to &apos;root&apos; @&apos;%&apos; identified by &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">9.linux下的mysql默认是大小写敏感的，通过java操作数据库的时候会出现找不到表的情况，需要设置大小写不敏感</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]后添加添加lower_case_table_names=1</span><br></pre></td></tr></table></figure><h5 id="三：jdk安装"><a href="#三：jdk安装" class="headerlink" title="三：jdk安装"></a>三：jdk安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CentOS一般会自带两个jdk，使用命令查看：</span><br><span class="line">rpm -qa | grep java</span><br><span class="line">rpm -e --nodeps 要卸载的包 (包通过上面的指令可以获取到)]</span><br><span class="line">如：</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64</span><br><span class="line">rpm -e --nodeps java-1.6.0-openjdk-1.6.0.38-1.13.10.4.el6.x86_64</span><br><span class="line"></span><br><span class="line">将下载好的安装包上传到linux的/usr/local/software目录下</span><br><span class="line">执行tar -zxvf jdk-8u151-linux-x64.tar.gz命令解压文件</span><br><span class="line"></span><br><span class="line">配置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line">在文件最末尾加上下面几句话：</span><br><span class="line">export JAVA_HOME=/usr/local/software/jdk1.8.0_151</span><br><span class="line">export JRE_HOME=/usr/local/software/jdk1.8.0_151/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">保存退出</span><br><span class="line">让配置生效：</span><br><span class="line">source /etc/profile</span><br><span class="line">检查环境：</span><br><span class="line">运行java –version能看到版本信息</span><br></pre></td></tr></table></figure><h5 id="四：tomcat安装"><a href="#四：tomcat安装" class="headerlink" title="四：tomcat安装"></a>四：tomcat安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">同上，上传并解压下载的tomcat</span><br><span class="line">进入tomcat解压路径的bin 目录</span><br><span class="line">运行 sh startup.sh启动tomcat</span><br><span class="line">浏览器里输入  服务器ip:8080能看到欢迎界面</span><br><span class="line"></span><br><span class="line">可以将tomcat安装成系统服务</span><br><span class="line">复制tomcat安装路径下的bin/catalina.sh作为系统服务脚本</span><br><span class="line">cp /usr/local/software/apache-tomcat-8.5.23/bin/catalina.sh /etc/init.d/tomcat    </span><br><span class="line">#重命名的tomcat为以后的服务名</span><br><span class="line">修改复制后的文件</span><br><span class="line">vim /etc/init.d/tomcat</span><br><span class="line">在文件比较靠前的位置，把jdk的安装路经和tomcat的安装路径设置进去</span><br><span class="line"></span><br><span class="line"># os specific support --------</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/usr/local/software/jdk1.8.0_151</span><br><span class="line">CATALINA_HOME=/usr/local/software/apache-tomcat-8.5.23</span><br><span class="line"></span><br><span class="line">保存并退出，</span><br><span class="line">可以通过service tomcat stop或start来停止或启动tomcat</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;虚拟机安装及相关环境配置&quot;&gt;&lt;a href=&quot;#虚拟机安装及相关环境配置&quot; class=&quot;headerlink&quot; title=&quot;虚拟机安装及相关环境配置&quot;&gt;&lt;/a&gt;虚拟机安装及相关环境配置&lt;/h4&gt;&lt;h5 id=&quot;一：虚拟机安装&quot;&gt;&lt;a href=&quot;#一：虚拟机安
      
    
    </summary>
    
      <category term="linux" scheme="https://zymmx.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://zymmx.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>java基础之进程与线程</title>
    <link href="https://zymmx.github.io/2018/11/21/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BA%BF%E7%A8%8B/"/>
    <id>https://zymmx.github.io/2018/11/21/java基础之线程/</id>
    <published>2018-11-21T09:56:42.069Z</published>
    <updated>2018-07-13T13:32:30.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java基础之进程与线程"><a href="#java基础之进程与线程" class="headerlink" title="java基础之进程与线程"></a>java基础之进程与线程</h1><p><strong>进程</strong>是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。 </p><p><strong>线程</strong>是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。 </p><h3 id="线程和进程各自有什么区别和优劣呢？"><a href="#线程和进程各自有什么区别和优劣呢？" class="headerlink" title="线程和进程各自有什么区别和优劣呢？"></a>线程和进程各自有什么区别和优劣呢？</h3><ul><li>进程是资源分配的最小单位，线程是程序执行的最小单位。</li><li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</li><li>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</li><li>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</li></ul><h3 id="线程必会"><a href="#线程必会" class="headerlink" title="线程必会"></a>线程必会</h3><p>基本线程类指的是Thread类，Runnable接口，Callable接口 </p><h5 id="一：基本方法"><a href="#一：基本方法" class="headerlink" title="一：基本方法"></a>一：基本方法</h5><p><strong>static void sleep(long millis)</strong> 在指定的毫秒数内让当前正在执行的线程暂停执行 ，该代码放在什么位置就在什么位置昏睡</p><p><strong>static void yield()</strong>     暂停当前正在执行的线程对象，并执行其他线程 </p><p>​            yield不一定会执行，有很多情况：</p><p>​            1）如果所有的线程已经结束了，就剩下带有yeild方法</p><p>​                的线程无法谦让</p><p>​            2）谦让是让出时间片，不保证该线程接着又抢回来    </p><p>​        因为该方法并不是强制性的，所以并不会抛出异常</p><p><strong>void join()</strong>  等待该线程终止,谁调用就等待谁结束 ，地老天荒 </p><p>​        此时的线程谦让一定成功，具有强制性</p><p>​        使用哪个线程对象调用就把哪个线程合并到当前线程之前执行</p><p><strong>static Thread currentThread()</strong>    返回对当前正在执行的线程对象的引用</p><h4 id="二：每个对象都有的方法"><a href="#二：每个对象都有的方法" class="headerlink" title="二：每个对象都有的方法"></a><strong>二：</strong>每个对象都有的方法</h4><p>​    wait()、notify/notifyAll() 方法是Object的本地final方法，无法被重写 ，</p><p>synchronized, wait, notify  是任何对象都具有的同步工具 </p><p>当线程执行wait()方法时候，会释放当前的锁，然后让出CPU，进入等待状态。只有当 notify/notifyAll() 被执行时候，才会唤醒一个或多个正处于等待状态的线程，然后继续往下执行，直到执行完synchronized 代码块的代码或是中途遇到wait() ，再次释放锁。</p><p>也就是说，notify/notifyAll() 的执行只是唤醒沉睡的线程，而不会立即释放锁，锁的释放要看代码块的具体执行情况。所以在编程中，尽量在使用了notify/notifyAll() 后立即退出临界区，以唤醒其他线程  </p><p>要注意，notify唤醒沉睡的线程后，线程会接着上次的执行继续往下执行。所以在进行条件判断时候，可以先把 wait 语句忽略不计来进行考虑，显然，要确保程序一定要执行，并且要保证程序直到满足一定的条件再执行，要使用while来执行，以确保条件满足和一定执行 </p><p>共同点：</p><p>​        1）都需要在synchronized代码块里面执行，否则抛出异常        </p><p>​        2）都是Object的方法，所以所有的线程锁对象都可以使用    </p><p>​        3）都需要先获得这把锁才可以执行    </p><p>​    区别：</p><p>​        1）wait方法是使得当前线程对象处于等待状态，并且主动释放对象锁</p><p>​            并且无法再次获得该锁    </p><p>​        2）notify和notifyAll是使得在该锁上处于等待状态的线程恢复活性    </p><p>​            但是不保证执行，原因是还需要获取时间片才可以，事实上唤醒</p><p>​            操作使得线程对象还原到Runnable状态</p><p>monitor</p><p>他们是应用于同步问题的人工线程调度工具。讲其本质，首先就要明确monitor的概念，Java中的每个对象都有一个监视器，来监测并发代码的重入。在非多线程编码时该监视器不发挥作用，反之如果在synchronized 范围内，监视器发挥作用。</p><p>wait/notify必须存在于synchronized块中。并且，这三个关键字针对的是同一个监视器（某对象的监视器）。这意味着wait之后，其他线程可以进入同步块执行。</p><p>当某代码并不持有监视器的使用权时去wait或notify，会抛出java.lang.IllegalMonitorStateException。也包括在synchronized块中去调用另一个对象的wait/notify，因为不同对象的监视器不同，同样会抛出此异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">主要用法：</span><br><span class="line">synchronized单独使用：</span><br><span class="line">代码块：如下，在多线程环境下，synchronized块中的方法获取了lock实例的monitor，如果实例相同，那么只有一个线程能执行该块内容</span><br><span class="line">public class Thread1 implements Runnable &#123;</span><br><span class="line">   Object lock;</span><br><span class="line">   public void run() &#123;  </span><br><span class="line">       synchronized(lock)&#123;</span><br><span class="line">         ..do something</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">直接用于方法： 相当于上面代码中用lock来锁定的效果，实际获取的是Thread1类的monitor。更进一步，如果修饰的是static方法，则锁定该类所有实例。</span><br><span class="line"></span><br><span class="line">public class Thread1 implements Runnable &#123;</span><br><span class="line">   public synchronized void run() &#123;  </span><br><span class="line">        ..do something</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">synchronized, wait, notify结合:典型场景生产者消费者问题</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   * 生产者生产出来的产品交给店员</span><br><span class="line">   */</span><br><span class="line">  public synchronized void produce()</span><br><span class="line">  &#123;</span><br><span class="line">      if(this.product &gt;= MAX_PRODUCT)</span><br><span class="line">      &#123;</span><br><span class="line">          try</span><br><span class="line">          &#123;</span><br><span class="line">              wait();  </span><br><span class="line">              System.out.println(&quot;产品已满,请稍候再生产&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          catch(InterruptedException e)</span><br><span class="line">          &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      this.product++;</span><br><span class="line">      System.out.println(&quot;生产者生产第&quot; + this.product + &quot;个产品.&quot;);</span><br><span class="line">      notifyAll();   //通知等待区的消费者可以取出产品了</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  /**</span><br><span class="line">   * 消费者从店员取产品</span><br><span class="line">   */</span><br><span class="line">  public synchronized void consume()</span><br><span class="line">  &#123;</span><br><span class="line">      if(this.product &lt;= MIN_PRODUCT)</span><br><span class="line">      &#123;</span><br><span class="line">          try</span><br><span class="line">          &#123;</span><br><span class="line">              wait(); </span><br><span class="line">              System.out.println(&quot;缺货,稍候再取&quot;);</span><br><span class="line">          &#125; </span><br><span class="line">          catch (InterruptedException e) </span><br><span class="line">          &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          return;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      System.out.println(&quot;消费者取走了第&quot; + this.product + &quot;个产品.&quot;);</span><br><span class="line">      this.product--;</span><br><span class="line">      notifyAll();   //通知等待去的生产者可以生产产品了</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="三：死锁"><a href="#三：死锁" class="headerlink" title="三：死锁"></a>三：死锁</h4><p>两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。产生四个条件：</p><p>​    请求保持————我不会轻易放弃的，灰太狼</p><p>​    请求互斥————资源的拥有方本身是矛盾的</p><p>​    不可剥夺————不能强行剥夺其他的线程的资源</p><p>​    形成环路————资源本身是唯一的，不可复制</p><h4 id="四：ThreadLocal"><a href="#四：ThreadLocal" class="headerlink" title="四：ThreadLocal"></a>四：ThreadLocal</h4><p>提供一个数据存储，把这个数据共享给每个线程，每个线程都可以自由的增删改这个数据，但是最后修改都是失效的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">常用方法：</span><br><span class="line">protected  T initialValue() 返回此线程局部变量的当前线程的“初始值”</span><br><span class="line">这个方法在类外无法直接使用，匿名内部类可以解决这个问题</span><br><span class="line">代码：</span><br><span class="line">// 构建ThreadLocal的对象，并且初始化线程本地变量</span><br><span class="line">ThreadLocal&lt;Integer&gt; threadLocal = new ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">//此时后面的泛型必须要写，否则报错</span><br><span class="line">@Override</span><br><span class="line">protected Integer initialValue() &#123;</span><br><span class="line">return 10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ThreadLocal多线程操作代码</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ThreadLocal&lt;Integer&gt; threadLocal = new ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">protected Integer initialValue() &#123;</span><br><span class="line">return 10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Thread[] ts = new Thread[5];</span><br><span class="line">for (int i = 0; i &lt; ts.length; i++) &#123;</span><br><span class="line">ts[i] = new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">//获取线程本地化变量的值</span><br><span class="line">Integer number = threadLocal.get();</span><br><span class="line">System.out.println(this+&quot;    &quot;+number);</span><br><span class="line">//给当前线程的本地化变量赋值</span><br><span class="line">threadLocal.set((int)(Math.random()*10));</span><br><span class="line">System.out.println(this+&quot;   &quot;+threadLocal.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; ts.length; i++) &#123;</span><br><span class="line">ts[i].start();</span><br><span class="line">&#125;</span><br><span class="line">//也就是说线程对ThreadLocal的修改是无效的，但是每个线程都可以获取到ThreadLocal的值</span><br><span class="line">System.out.println(threadLocal.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五：线程的状态"><a href="#五：线程的状态" class="headerlink" title="五：线程的状态"></a>五：线程的状态</h4><p><strong>New</strong>—-start()——-&gt;&gt;<strong>Runnable(可运行状态)</strong> —–获取cpu——&gt;&gt;<strong>Runing</strong>   ——run()结束或异常退出—–&gt;&gt;<strong>Dead</strong></p><p>线程在Running的过程中可能会遇到阻塞(Blocked) </p><ol><li>调用join()和sleep()方法，sleep()时间结束或被打断，join()中断,IO完成都会回到Runnable状态，等待JVM的调度。</li><li>调用wait()，使该线程处于等待池(wait blocked pool),直到notify()/notifyAll()，线程被唤醒被放到锁定池(lock blocked pool )，释放同步锁使线程回到可运行状态（Runnable）</li><li><p>对Running状态的线程加同步锁(Synchronized)使其进入(lock blocked pool ),同步锁被释放进入可运行状态(Runnable)。</p><p>4.此外，在runnable状态的线程是处于被调度的线程，此时的调度顺序是不一定的。Thread类中的yield方法可以让一个running状态的线程转入runnable。</p></li></ol><h4 id="六：线程池"><a href="#六：线程池" class="headerlink" title="六：线程池"></a>六：线程池</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java基础之进程与线程&quot;&gt;&lt;a href=&quot;#java基础之进程与线程&quot; class=&quot;headerlink&quot; title=&quot;java基础之进程与线程&quot;&gt;&lt;/a&gt;java基础之进程与线程&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;是资源（CPU、内存等
      
    
    </summary>
    
      <category term="java基础" scheme="https://zymmx.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://zymmx.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Web Service工作原理及实例</title>
    <link href="https://zymmx.github.io/2018/11/21/Web%20Service%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E4%BE%8B/"/>
    <id>https://zymmx.github.io/2018/11/21/Web Service工作原理及实例/</id>
    <published>2018-11-21T09:56:42.069Z</published>
    <updated>2018-07-11T15:25:15.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Web-Service工作原理及实例"><a href="#Web-Service工作原理及实例" class="headerlink" title="Web Service工作原理及实例"></a>Web Service工作原理及实例</h3><h4 id="一、Web-Service基本概念"><a href="#一、Web-Service基本概念" class="headerlink" title="一、Web Service基本概念"></a>一、Web Service基本概念</h4><blockquote><p>Web Service也叫XML Web Service WebService是一种可以接收从Internet或者Intranet上的其它系统中传递过来的请求，<code>*轻量级的独立的通讯技术*</code>。是:<strong>通过SOAP在Web上提供的软件服务，使用WSDL文件进行说明，并通过UDDI进行注册。</strong> </p></blockquote><p>XML：(Extensible Markup Language)扩展型可标记语言。面向短期的临时数据处理、面向万维网络，是Soap的基础。</p><p>Soap：(Simple Object Access Protocol)<code>**简单对象存取协议**</code>。是XML Web Service 的通信协议。当用户通过UDDI找到你的WSDL描述文档后，他通过可以SOAP调用你建立的Web服务中的一个或多个操作。SOAP是XML文档形式的调用方法的规范，它可以支持不同的底层接口，像HTTP(S)或者SMTP。</p><p>WSDL：(Web Services Description Language) WSDL 文件是一个 XML 文档，用于说明一组 SOAP 消息以及如何交换这些消息。大多数情况下由软件自动生成和使用。 </p><p>UDDI (Universal Description, Discovery, and Integration) 是一个主要针对Web服务供应商和使用者的新项目。在用户能够调用Web服务之前，必须确定这个服务内包含哪些商务方法，找到被调用的接口定义，还要在服务端来编制软件，UDDI是一种根据描述文档来引导系统查找相应服务的机制。UDDI利用SOAP消息机制（标准的XML/HTTP）来发布，编辑，浏览以及查找注册信息。它采用XML格式来封装各种不同类型的数据，并且发送到注册中心或者由注册中心来返回需要的数据。</p><h4 id="二、调用原理"><a href="#二、调用原理" class="headerlink" title="二、调用原理"></a>二、调用原理</h4><p>​                         <img src="C:\Users\LMH\AppData\Local\Temp\1531295959763.png" alt="1531295959763">                                                           </p><p>实现一个完整的Web服务包括以下步骤： </p><p>◆ Web服务提供者设计实现Web服务，并将调试正确后的Web服务通过Web服务中介者发布，并在UDDI注册中心注册； （发布）</p><p>◆ Web服务请求者向Web服务中介者请求特定的服务，中介者根据请求查询UDDI注册中心，为请求者寻找满足请求的服务； （发现）</p><p>◆ Web服务中介者向Web服务请求者返回满足条件的Web服务描述信息，该描述信息用WSDL写成，各种支持Web服务的机器都能阅读；（发现）</p><p>◆ 利用从Web服务中介者返回的描述信息生成相应的SOAP消息，发送给Web服务提供者，以实现Web服务的调用；（绑定） </p><p>◆ Web服务提供者按SOAP消息执行相应的Web服务，并将服务结果返回给Web服务请求者。（绑定）</p><h4 id="三、调用方式："><a href="#三、调用方式：" class="headerlink" title="三、调用方式："></a>三、调用方式：</h4><ol><li><p>Net下采用GET/POST/SOAP方式动态调用WebService的简易灵活方法(C#)</p><p>webservice 的调用有3种方式</p></li></ol><p>1). httpget </p><p>2). httppost</p><p>3). httpsoap </p><p><strong>soap 的优点是 可以传递结构化的 数据，而前两种不行。</strong></p><p>btw, soap 最终也是使用 HTTP 传送 XM</p><h4 id="四、发布WebService实例"><a href="#四、发布WebService实例" class="headerlink" title="四、发布WebService实例"></a>四、发布WebService实例</h4><h1 id="1-JAX-WS发布WebService"><a href="#1-JAX-WS发布WebService" class="headerlink" title="1. JAX-WS发布WebService"></a>1. JAX-WS发布WebService</h1><p>创建web工程</p><p>创建simple包，和server、client两个子包。正常情况下server和client应该是两个项目，这里我们只是演示效果，所以简化写到一个项目中：</p><p>​                                                  </p><h2 id="1-1-创建服务类Server"><a href="#1-1-创建服务类Server" class="headerlink" title="1.1    创建服务类Server"></a>1.1    创建服务类Server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package simple.server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.jws.WebService;</span><br><span class="line"></span><br><span class="line">import javax.xml.ws.Endpoint;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里要加上WebService注解</span><br><span class="line"></span><br><span class="line">@WebService</span><br><span class="line"></span><br><span class="line">public class SimpleServer &#123;</span><br><span class="line"></span><br><span class="line">    //要发布出去的方法</span><br><span class="line"></span><br><span class="line">    public String sayHello() &#123;</span><br><span class="line"></span><br><span class="line">        return &quot;hello world&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //要发布出去的方法</span><br><span class="line"></span><br><span class="line">    public String speak(@WebParam(name = &quot;word&quot;) String word) &#123;</span><br><span class="line"></span><br><span class="line">        return word + &quot;:webservice&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​     <strong>//**</strong>使用main方法发布出去<strong>     </strong>public static void<strong> main(</strong>String<strong>[] </strong>args<strong>) </strong>{<strong>         </strong>//<strong>**第一个参数是地址，localhost是本机，         //9001是端口，端口可以是任意一个未占用的端口         //SimpleService是自己起的服务名，任意         //第二个参数是要发布的这个类的对象</strong>         Endpoint.publish(<strong>“<a href="http://localhost:9001/SimpleService&quot;" target="_blank" rel="noopener">http://localhost:9001/SimpleService&quot;</a></strong>, <strong>new</strong> SimpleServer());<br>         <strong>System</strong>.<strong>out</strong>.println(<strong>“Publish Success~”</strong>);<strong>//**</strong>看到这个输出代表发布成功了<strong>     </strong>} }**</p><p>运行main方法后在浏览器中输入</p><p><a href="http://localhost:9001/SimpleService?wsdl" target="_blank" rel="noopener">http://localhost:9001/SimpleService?wsdl</a></p><p>可以看到服务信息：</p><p>Wsdl文档从下往上读<br> Types - 数据类型定义的容器，它使用某种类型系统(一般地使用XML Schema中的类型系统)。（入参和出参的数据类型）<br> Message - 通信消息的数据结构的抽象类型化定义。使用Types所定义的类型来定义整个消息的数据结构（入参和出参）。<br> Operation - 对服务中所支持的操作的抽象描述，一般单个Operation描述了一个访问入口的请求/响应消息对（方法）。<br> PortType - 对于某个访问入口点类型所支持的操作的抽象集合，这些操作可以由一个或多个服务访问点来支持（服务类）。<br> Binding - 特定服务访问点与具体服务类的绑定（不看内容，看关系）。<br> Port - 定义为webservice单个服务访问点。<br> Service- 相关服务访问点的集合。</p><p>访问上面的schemaLocation=”<a href="http://localhost:9001/SimpleService?xsd=1&quot;网址，可以看到具体方法的描述信息" target="_blank" rel="noopener">http://localhost:9001/SimpleService?xsd=1&quot;网址，可以看到具体方法的描述信息</a></p><p>如果要使用web方式发布这个webservice，只需要写一个servlet,并在tomcat启动时就加载这个servlet，在servlet的int方法中发布webservice。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package simple.server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletConfig;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line"></span><br><span class="line">import javax.xml.ws.Endpoint;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class PublishServlet extends HttpServlet&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public void init(ServletConfig servletConfig) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">        super.init(servletConfig);</span><br><span class="line"></span><br><span class="line">        //发布webservice</span><br><span class="line"></span><br><span class="line">        Endpoint.publish(&quot;http://localhost:9001/SimpleService&quot;, new SimpleServer());</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Publish Success~&quot;);//看到这个输出代表发布成功了</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-name&gt;PublishServlet&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-class&gt;simple.server.PublishServlet&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;!--启动就加载--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-name&gt;PublishServlet&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;url-pattern&gt;/servlet/publish&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>需要servlet的jar包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--servlet依赖jar包--&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">  &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-创建客户端"><a href="#1-2-创建客户端" class="headerlink" title="1.2    创建客户端"></a>1.2    创建客户端</h2><p>使用jdk自带命令调用WebService</p><p>请求webservice会在本地生成类</p><p>wsimport 是请求webservice</p><p>-encoding utf-8 指定生成的java文件编码格式为utf-8</p><p>-s 后面是文件存放的工程路径</p><p>-p 是生成的java文件存放的包名</p><p>-keep 后面接的是1.1中发布出去的服务地址</p><p>运行成功后，工程中会多出几个类：</p><p>wsimport -encoding utf-8 -s E:\IdeaCoder\Examples\webservice\src\main\java -p onetest.client -keep <a href="http://localhost:9002/SimpleSer?wsdl" target="_blank" rel="noopener">http://localhost:9002/SimpleSer?wsdl</a></p><p>一般外部，只需跟环最后</p><p>wsimport -encoding utf-8 -s E:\IdeaCoder\SourceDrop\lmh_webservice\src\main\java -p outer.captcha -keep <a href="http://www.webxml.com.cn/WebServices/ValidateCodeWebService.asmx?wsdl" target="_blank" rel="noopener">http://www.webxml.com.cn/WebServices/ValidateCodeWebService.asmx?wsdl</a></p><p>创建测试客户端类MySimpleClient</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package simple.client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line"></span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MySimpleClient &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line"></span><br><span class="line">    public void testJdkMethod() &#123;</span><br><span class="line"></span><br><span class="line">        //&lt;service name=&quot;SimpleServerService&quot;&gt;</span><br><span class="line"></span><br><span class="line">        //   &lt;port name=&quot;SimpleServerPort&quot; binding=&quot;tns:SimpleServerPortBinding&quot;&gt;</span><br><span class="line"></span><br><span class="line">        //     &lt;soap:address location=&quot;http://localhost:9001/SimpleService&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        //   &lt;/port&gt;</span><br><span class="line"></span><br><span class="line">        // &lt;/service&gt;</span><br><span class="line"></span><br><span class="line">        //这个是xml文件中的service-name</span><br><span class="line"></span><br><span class="line">        // &lt;service name=&quot;SimpleServerService&quot;&gt;</span><br><span class="line"></span><br><span class="line">        SimpleServerService simpleServerService = new SimpleServerService();</span><br><span class="line"></span><br><span class="line">        //这个是&lt;port name=&quot;SimpleServerPort&quot;</span><br><span class="line"></span><br><span class="line">        SimpleServer simpleServer = simpleServerService.getSimpleServerPort();</span><br><span class="line"></span><br><span class="line">        System.out.println(simpleServer.sayHello());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过jdk生成的SimpleServer，可以调用相应的方法，实际上返回响应的是服务器，但执行的时候就像调用自己写的类一样。可以清楚的看到方法和参数。</p><p>另一种调用的方式，直接使用java方法，不生成类：</p><p>新建一个other包，存放如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package simple.other;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.jws.WebMethod;</span><br><span class="line"></span><br><span class="line">import javax.jws.WebParam;</span><br><span class="line"></span><br><span class="line">import javax.jws.WebService;</span><br><span class="line"></span><br><span class="line">import javax.xml.bind.annotation.XmlSeeAlso;</span><br><span class="line"></span><br><span class="line">import javax.xml.ws.RequestWrapper;</span><br><span class="line"></span><br><span class="line">import javax.xml.ws.ResponseWrapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//对应xml文件</span><br><span class="line"></span><br><span class="line">//&lt;definitions targetNamespace=&quot;http://server.simple/&quot; name=&quot;SimpleServerService&quot;&gt;</span><br><span class="line"></span><br><span class="line">@WebService(name = &quot;SimpleServerService&quot;, targetNamespace = &quot;http://server.simple/&quot;)</span><br><span class="line"></span><br><span class="line">@XmlSeeAlso(&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">public interface MySimpleClient &#123;</span><br><span class="line"></span><br><span class="line">    @WebMethod</span><br><span class="line"></span><br><span class="line">    @RequestWrapper(localName = &quot;sayHello&quot;)</span><br><span class="line"></span><br><span class="line">    @ResponseWrapper(localName = &quot;sayHelloResponse&quot;)</span><br><span class="line"></span><br><span class="line">    public String sayHello();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @WebMethod</span><br><span class="line"></span><br><span class="line">    @RequestWrapper(localName = &quot;speak&quot;)</span><br><span class="line"></span><br><span class="line">    @ResponseWrapper(localName = &quot;speakResponse&quot;)</span><br><span class="line"></span><br><span class="line">    public String speak(@WebParam(name = &quot;word&quot;)String word);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package simple.other;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.xml.namespace.QName;</span><br><span class="line"></span><br><span class="line">import javax.xml.ws.Service;</span><br><span class="line"></span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class OtherTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        URL wsdlUrl = new URL(&quot;http://localhost:9001/SimpleService?wsdl&quot;);</span><br><span class="line"></span><br><span class="line">        // targetNamespace=&quot;http://server.simple/&quot; name=&quot;SimpleServerService&quot;</span><br><span class="line"></span><br><span class="line">        Service s = Service.create(wsdlUrl,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">          new QName(&quot;http://server.simple/&quot;,&quot;SimpleServerService&quot;));</span><br><span class="line"></span><br><span class="line">MySimpleClient client =</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.getPort(</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new QName(&quot;http://server.simple/&quot;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;SimpleServerPort&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                         MySimpleClient.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(client.sayHello());</span><br><span class="line"></span><br><span class="line">        System.out.println(client.speak(&quot;123&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-cxf发布WebService"><a href="#2-cxf发布WebService" class="headerlink" title="2. cxf发布WebService"></a>2. cxf发布WebService</h1><p>JAX-WS是一种规范，CXF是他的实现。CXF可以不必关心服务端的实现方式。</p><p>为了简化代码，我们把服务端和客户端写在一个工程里，正常应该写在两个工程</p><h2 id="2-1-发布服务"><a href="#2-1-发布服务" class="headerlink" title="2.1 发布服务"></a>2.1 发布服务</h2><p>新建web工程，导入jar包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;cxf-rt-transports-http-jetty&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.apache.cxf.karaf&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;apache-cxf&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--日志文件--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>CXF发布服务需要一个接口和一个实现类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.jws.WebParam;</span><br><span class="line"></span><br><span class="line">import javax.jws.WebService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@WebService(name = &quot;CXF&quot;, targetNamespace = &quot;http://server.cxf/&quot;)</span><br><span class="line"></span><br><span class="line">public interface CxfServer &#123;</span><br><span class="line"></span><br><span class="line">    String sayHello();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String speak(@WebParam(name = &quot;word&quot;) String world);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CxfServerImpl implements CxfServer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public String sayHello() &#123;</span><br><span class="line"></span><br><span class="line">        return &quot;Hello CXF&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public String speak(String word) &#123;</span><br><span class="line"></span><br><span class="line">        return word + &quot;CXF&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.cxf.jaxws.JaxWsServerFactoryBean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CXFServerTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // 创建JaxWsServerFactoryBean对象</span><br><span class="line"></span><br><span class="line">        JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean();</span><br><span class="line"></span><br><span class="line">        // 设置服务端地址</span><br><span class="line"></span><br><span class="line">        serverFactoryBean.setAddress(&quot;http://127.0.0.1:9999/cxf&quot;);</span><br><span class="line"></span><br><span class="line">        // 设置服务接口</span><br><span class="line"></span><br><span class="line">        serverFactoryBean.setServiceClass(CxfServer.class);</span><br><span class="line"></span><br><span class="line">        // 设置实现类对象</span><br><span class="line"></span><br><span class="line">        serverFactoryBean.setServiceBean(new CxfServerImpl());</span><br><span class="line"></span><br><span class="line">        // 发布服务</span><br><span class="line"></span><br><span class="line">        serverFactoryBean.create();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;发布成功&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器中访问：<a href="http://127.0.0.1:9999/cxf?wsdl" target="_blank" rel="noopener">http://127.0.0.1:9999/cxf?wsdl</a></p><h2 id="2-2-调用服务"><a href="#2-2-调用服务" class="headerlink" title="2.2 调用服务"></a>2.2 调用服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.cxf.endpoint.Client;</span><br><span class="line"></span><br><span class="line">import org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CxfClientTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        JaxWsDynamicClientFactory clientFactory =</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                       JaxWsDynamicClientFactory.newInstance();</span><br><span class="line"></span><br><span class="line">        Client client = clientFactory.createClient(&quot;http://127.0.0.1:9999/cxf?wsdl&quot;);</span><br><span class="line"></span><br><span class="line">        //直接调用方法，不用关心服务端是怎么实现的</span><br><span class="line"></span><br><span class="line">        Object[] result = client.invoke(&quot;sayHello&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(result[0]);</span><br><span class="line"></span><br><span class="line">        Object[] result2 = client.invoke(&quot;speak&quot;, &quot;123&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(result2[0]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Spring与CXF集成"><a href="#2-3-Spring与CXF集成" class="headerlink" title="2.3 Spring与CXF集成"></a>2.3 Spring与CXF集成</h2><p>引入spring的jar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;4.3.11.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;version&gt;4.3.11.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>spring-cxf.xml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line">       xmlns:jaxws=&quot;http://cxf.apache.org/jaxws&quot;</span><br><span class="line"></span><br><span class="line">       xsi:schemaLocation=&quot;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--发布服务implementor是接口实现类，address在访问的时候加载路径里--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;jaxws:endpoint id=&quot;cxfDemo&quot; implementor=&quot;server.CxfServerImpl&quot; address=&quot;/cxf&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>web.xml中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee</span><br><span class="line"></span><br><span class="line">          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span><br><span class="line"></span><br><span class="line">         version=&quot;3.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line"></span><br><span class="line">        &lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">        &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">        &lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">        &lt;url-pattern&gt;/services/*&lt;/url-pattern&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line"></span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line"></span><br><span class="line">        &lt;param-value&gt;classpath:spring-cxf.xml&lt;/param-value&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;listener&gt;</span><br><span class="line"></span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>使用spring发布的时候，在接口实现类上加上注解，保证发布出去的targetNamespace一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@WebService(name = &quot;CXF&quot;, targetNamespace = &quot;http://server.cxf/&quot;)</span><br><span class="line"></span><br><span class="line">public class CxfServerImpl implements CxfServer &#123;</span><br></pre></td></tr></table></figure><p>浏览器中访问：<a href="http://127.0.0.1:8080/services/cxf?wsdl" target="_blank" rel="noopener">http://127.0.0.1:8080/services/cxf?wsdl</a></p><p>测试方法与2.2中相同，更换访问地址即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Web-Service工作原理及实例&quot;&gt;&lt;a href=&quot;#Web-Service工作原理及实例&quot; class=&quot;headerlink&quot; title=&quot;Web Service工作原理及实例&quot;&gt;&lt;/a&gt;Web Service工作原理及实例&lt;/h3&gt;&lt;h4 id=&quot;一
      
    
    </summary>
    
      <category term="服务" scheme="https://zymmx.github.io/categories/%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="webservice" scheme="https://zymmx.github.io/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>Dubbox+Zookeeper入门</title>
    <link href="https://zymmx.github.io/2018/11/21/Dubbox/"/>
    <id>https://zymmx.github.io/2018/11/21/Dubbox/</id>
    <published>2018-11-21T09:56:42.069Z</published>
    <updated>2018-07-14T06:05:25.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dubbox"><a href="#Dubbox" class="headerlink" title="Dubbox"></a>Dubbox</h3><p>Dubbox 是一个分布式服务框架，其前身是阿里巴巴开源项目Dubbo ，被国内电商及互联网项目中使用，后期阿里巴巴停止了该项目的维护，当当网便在Dubbo基础上进行优化，并继续维护，为了与原有的Dubbo区分，故将其命名为<strong>Dubbox</strong>。 </p><p>Dubbox 致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。简单的说，<strong>dubbox就是个服务框架</strong>，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有dubbox这样的分布式服务框架的需求，并且本质上是个服务调用的东东，<strong>说白了就是个远程服务调用的分布式框架</strong>。</p><p><img src="C:\Users\LMH\AppData\Local\Temp\1531299014547.png" alt="1531299014547"></p><p><strong>节点角色说明：</strong></p><p> Provider: 暴露服务的服务提供方。</p><p> Consumer: 调用远程服务的服务消费方。</p><p> Registry: 服务注册与发现的注册中心。</p><p> Monitor: 统计服务的调用次调和调用时间的监控中心。</p><p> Container: 服务运行容器。</p><p><strong>调用关系说明：</strong></p><p> 0. 服务容器负责启动，加载，运行服务提供者。</p><p> 1. 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p> 2. 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p> 3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推</p><p>送变更数据给消费者。</p><p> 4. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，</p><p>如果调用失败，再选另一台调用。</p><p> 5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计</p><p>数据到监控中心</p><h3 id="注册中心Zookeeper"><a href="#注册中心Zookeeper" class="headerlink" title="注册中心Zookeeper"></a>注册中心Zookeeper</h3><p>官方推荐使用 zookeeper 注册中心。注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。</p><p>Zookeeper 是Apacahe Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbox 服务的注册中心，工业强度较高，可用于生产环境。</p><h3 id="Zookeeper-在Linux系统的安装"><a href="#Zookeeper-在Linux系统的安装" class="headerlink" title="Zookeeper 在Linux系统的安装"></a>Zookeeper 在Linux系统的安装</h3><p>1：安装jdk</p><p>2：上传安装包：Alt+P 进入SFTP ，输入put d:\zookeeper-3.4.6.tar.gz 上传 ；也可以直接用工具拖动上传</p><p>3： 解压：tar -zxvf zookeeper-3.4.6.tar.gz </p><p>4： 进入 zookeeper-3.4.6 目录，创建 data 文件夹 ：mkdir data</p><p>5： 进入conf目录 ，把 zoo_sample.cfg 改名为 zoo.cfg  ：</p><p>​        cd conf</p><p>​        mv zoo_sample.cfg zoo.cfg</p><p>6： 打开zoo.cfg ,  修改 data 属性：dataDir=/root/zookeeper-3.4.6/data （安装路径）</p><p>7： 启动：进入bin里，执行启动程序 ：./zkServer.sh start</p><h3 id="Dubbox本地-JAR包部署与安装"><a href="#Dubbox本地-JAR包部署与安装" class="headerlink" title="Dubbox本地 JAR包部署与安装"></a>Dubbox本地 JAR包部署与安装</h3><p>Dubbox的jar包并没有部署到Maven的中央仓库中，大家在Maven的中央仓库中可以查找到Dubbo的最终版本是2.5.3 , 阿里巴巴解散了Dubbo团队后由当当网继续维护此项目，并改名为 Dubbox ,坐标不变，版本变更了，但是并没有提交到中央仓库。</p><p>我们现在需要手动将Dubbox的jar包安装到我的本地仓库中。</p><p>先将dubbo-2.8.4.jar包放到d:\setup, 然后输入命令</p><p>mvn install:install-file -Dfile=d:\setup\dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar </p><p>Eclipse配置离线约束 (将dubbo.xsd文件配置上：windows —-&gt;preferences—–&gt;xml catalog)</p><p><a href="http://code.alibabatech.com/schema/dubbo/dubbo.xsd" target="_blank" rel="noopener">http://code.alibabatech.com/schema/dubbo/dubbo.xsd</a> </p><h3 id="管理中心的部署"><a href="#管理中心的部署" class="headerlink" title="管理中心的部署"></a>管理中心的部署</h3><p>我们在开发时，需要知道注册中心都注册了哪些服务，以便我们开发和测试。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。 </p><p>管理端安装</p><p>（1）编译源码，得到war包 </p><p>我们有个dubbox-master.zip  ，这个是dubbox的源码，我们可以使用maven命令编译源码得到“管理端”的war包</p><p>将此压缩包解压，在命令符下进入dubbo-admin目录 ，输入maven命令</p><p>mvn package -Dmaven.skip.test=true </p><p>（2）进入target文件夹，你会看到一个dubbo-admin-2.8.4.war ， 在linux服务器上安装tomcat,  将此war包上传到linux服务器的tomcat的webapps下。为了访问方便，你可以把版本号去掉。 启动tomcat后自动解压。 </p><p>（3）如果你部署在zookeeper同一台主机并且端口是默认的2181，则无需修改任何配置。如果不是在一台主机上或端口被修改，需要修改WEB-INF下的dubbo.properties  ，修改如下配置： dubbo.registry.address=zookeeper://127.0.0.1:2181 </p><p>（4）打开浏览器，输入http://部署的linux主机地址:8080/dubbo-admin/ ,登录用户名和密码均为root 进入首页。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dubbox&quot;&gt;&lt;a href=&quot;#Dubbox&quot; class=&quot;headerlink&quot; title=&quot;Dubbox&quot;&gt;&lt;/a&gt;Dubbox&lt;/h3&gt;&lt;p&gt;Dubbox 是一个分布式服务框架，其前身是阿里巴巴开源项目Dubbo ，被国内电商及互联网项目中使用，后期
      
    
    </summary>
    
      <category term="架构" scheme="https://zymmx.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="soa" scheme="https://zymmx.github.io/tags/soa/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS入门</title>
    <link href="https://zymmx.github.io/2018/11/21/AngularJS/"/>
    <id>https://zymmx.github.io/2018/11/21/AngularJS/</id>
    <published>2018-11-21T09:56:42.069Z</published>
    <updated>2018-07-14T06:12:41.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><h4 id="四大特征"><a href="#四大特征" class="headerlink" title="四大特征"></a>四大特征</h4><p>MVC:</p><p>Model:数据,其实就是angular变量($scope.XX);</p><p>View: 数据的呈现,Html+Directive(指令);</p><p>Controller:操作数据,就是function,数据的增删改查;</p><p>双向绑定：声明式编程应该用于构建用户界面以及编写软件构建，而指令式编程非常适合来表示业务逻辑。框架采用并扩展了传统HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。因此，AngularJS使得对DOM的操作不再重要并提升了可测试性。 </p><p>依赖注入：依赖注入(Dependency Injection,简称DI)是一种设计模式, 指某个对象依赖的其他对象无需手工创建，只需要“吼一嗓子”，则此对象在创建时，其依赖的对象由框架来自动创建并注入进来,其实就是最少知识法则;模块中所有的service和provider两类对象，都可以根据形参名称实现DI. </p><p>模块化设计：高内聚低耦合法则 （官方提供的模块（ng等），自定义模块）</p><h4 id="指令及入门demo"><a href="#指令及入门demo" class="headerlink" title="指令及入门demo"></a>指令及入门demo</h4><p><strong>ng-app指令</strong>:告诉子元素一下的指令是归angularJs的,angularJs会识别的 ;定义了 AngularJS 应用程序的 根元素 ;在网页加载完毕时会自动引导（自动初始化）应用程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">demo01:双向绑定</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;入门小Demo-1  双向绑定&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body ng-app&gt;</span><br><span class="line">请输入你的姓名：&lt;input ng-model=&quot;myname&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;myname&#125;&#125;,你好</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>ng-model指令</strong>：用于绑定变量,这样用户在文本框输入的内容会绑定到变量上，而表达式可以实时地输出变量。 </p><p><strong>ng-init</strong>指令来对变量初始化 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">demo02用ng-init指令来对变量初始化</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;入门小Demo-2  初始化&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body ng-app   ng-init=&quot;myname=&apos;陈大海&apos;&quot;&gt;</span><br><span class="line">请输入你的姓名：&lt;input ng-model=&quot;myname&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;myname&#125;&#125;,你好</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>ng-controller</strong>：用于指定所使用的控制器。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">demo03控制器指令的使用</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;入门小Demo-3  事件指令&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app=angular.module(&apos;myApp&apos;,[]); //定义了一个叫myApp的模块</span><br><span class="line">//定义控制器</span><br><span class="line">app.controller(&apos;myController&apos;,function($scope)&#123;</span><br><span class="line">$scope.add=function()&#123;</span><br><span class="line">$scope.z= parseInt($scope.x)+parseInt($scope.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;myController&quot;&gt;</span><br><span class="line">x:&lt;input ng-model=&quot;x&quot; &gt;</span><br><span class="line">y:&lt;input ng-model=&quot;y&quot; &gt;</span><br><span class="line">&lt;button ng-click=&quot;add()&quot;&gt;运算&lt;/button&gt;</span><br><span class="line">结果：&#123;&#123;z&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">$scope 的使用贯穿整个 AngularJS App 应用,它与数据模型相关联,同时也是表达式执行的上下文.有了$scope 就在视图和控制器之间建立了一个通道,基于作用域视图在修改数据时会立刻更新 $scope,同样的$scope 发生改变时也会立刻重新渲染视图.</span><br></pre></td></tr></table></figure><p><strong>ng-repeat指令</strong>：用于循环数组变量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">demo04:ng-repeat=&quot;x in list&quot;数组的值传入x中</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;入门小Demo-4  循环数据&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app=angular.module(&apos;myApp&apos;,[]); //定义了一个叫myApp的模块</span><br><span class="line">//定义控制器</span><br><span class="line">app.controller(&apos;myController&apos;,function($scope)&#123;</span><br><span class="line">$scope.list= [100,192,203,434 ];//定义数组</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;myController&quot;&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr ng-repeat=&quot;x in list&quot;&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;x&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">demo05:循环对象数组</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;入门小Demo-5  循环对象数组&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app=angular.module(&apos;myApp&apos;,[]); //定义了一个叫myApp的模块</span><br><span class="line">//定义控制器</span><br><span class="line">app.controller(&apos;myController&apos;,function($scope)&#123;</span><br><span class="line">$scope.list= [</span><br><span class="line">&#123;name:&apos;张三&apos;,shuxue:100,yuwen:93&#125;,</span><br><span class="line">&#123;name:&apos;李四&apos;,shuxue:88,yuwen:87&#125;,</span><br><span class="line">&#123;name:&apos;王五&apos;,shuxue:77,yuwen:56&#125;</span><br><span class="line">];//定义数组</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;myController&quot;&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;数学&lt;/td&gt;</span><br><span class="line">&lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr ng-repeat=&quot;entity in list&quot;&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;entity.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;entity.shuxue&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;entity.yuwen&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>$http</strong> ：内置服务，从后端获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">demo05:内置服务</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;入门小Demo-8  内置服务&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app=angular.module(&apos;myApp&apos;,[]); //定义了一个叫myApp的模块</span><br><span class="line">//定义控制器</span><br><span class="line">app.controller(&apos;myController&apos;,function($scope,$http)&#123;</span><br><span class="line">$scope.findAll=function()&#123;</span><br><span class="line">$http.get(&apos;../后台传来的json数据地址&apos;).success(</span><br><span class="line">function(response)&#123;</span><br><span class="line">$scope.list=response;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;myController&quot; ng-init=&quot;findAll()&quot;&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">&lt;td&gt;数学&lt;/td&gt;</span><br><span class="line">&lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr ng-repeat=&quot;entity in list&quot;&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;entity.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;entity.shuxue&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;entity.yuwen&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AngularJS&quot;&gt;&lt;a href=&quot;#AngularJS&quot; class=&quot;headerlink&quot; title=&quot;AngularJS&quot;&gt;&lt;/a&gt;AngularJS&lt;/h1&gt;&lt;h4 id=&quot;四大特征&quot;&gt;&lt;a href=&quot;#四大特征&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="框架" scheme="https://zymmx.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="web" scheme="https://zymmx.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zymmx.github.io/2018/11/21/hello-world/"/>
    <id>https://zymmx.github.io/2018/11/21/hello-world/</id>
    <published>2018-11-21T03:29:27.140Z</published>
    <updated>2018-11-21T03:29:27.140Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
